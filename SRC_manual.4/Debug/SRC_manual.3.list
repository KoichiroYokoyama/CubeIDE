
SRC_manual.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005120  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080052b0  080052b0  000152b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800535c  0800535c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0800535c  0800535c  0001535c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005364  08005364  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005364  08005364  00015364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005368  08005368  00015368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800536c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000494  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004f0  200004f0  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d712  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001eae  00000000  00000000  0002d7e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c58  00000000  00000000  0002f690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009a8  00000000  00000000  000302e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002157c  00000000  00000000  00030c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f1db  00000000  00000000  0005220c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cb7ab  00000000  00000000  000613e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003838  00000000  00000000  0012cb94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  001303cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005298 	.word	0x08005298

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005298 	.word	0x08005298

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08a      	sub	sp, #40	; 0x28
 8000580:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]
 8000596:	4b4c      	ldr	r3, [pc, #304]	; (80006c8 <MX_GPIO_Init+0x14c>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a4b      	ldr	r2, [pc, #300]	; (80006c8 <MX_GPIO_Init+0x14c>)
 800059c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
 80005a2:	4b49      	ldr	r3, [pc, #292]	; (80006c8 <MX_GPIO_Init+0x14c>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	4b45      	ldr	r3, [pc, #276]	; (80006c8 <MX_GPIO_Init+0x14c>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a44      	ldr	r2, [pc, #272]	; (80006c8 <MX_GPIO_Init+0x14c>)
 80005b8:	f043 0304 	orr.w	r3, r3, #4
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b42      	ldr	r3, [pc, #264]	; (80006c8 <MX_GPIO_Init+0x14c>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0304 	and.w	r3, r3, #4
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	4b3e      	ldr	r3, [pc, #248]	; (80006c8 <MX_GPIO_Init+0x14c>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a3d      	ldr	r2, [pc, #244]	; (80006c8 <MX_GPIO_Init+0x14c>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b3b      	ldr	r3, [pc, #236]	; (80006c8 <MX_GPIO_Init+0x14c>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	4b37      	ldr	r3, [pc, #220]	; (80006c8 <MX_GPIO_Init+0x14c>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a36      	ldr	r2, [pc, #216]	; (80006c8 <MX_GPIO_Init+0x14c>)
 80005f0:	f043 0302 	orr.w	r3, r3, #2
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b34      	ldr	r3, [pc, #208]	; (80006c8 <MX_GPIO_Init+0x14c>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0302 	and.w	r3, r3, #2
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	4b30      	ldr	r3, [pc, #192]	; (80006c8 <MX_GPIO_Init+0x14c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a2f      	ldr	r2, [pc, #188]	; (80006c8 <MX_GPIO_Init+0x14c>)
 800060c:	f043 0308 	orr.w	r3, r3, #8
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b2d      	ldr	r3, [pc, #180]	; (80006c8 <MX_GPIO_Init+0x14c>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0308 	and.w	r3, r3, #8
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VALVE0_Pin|VALVE1_Pin|VALVE2_Pin, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	2138      	movs	r1, #56	; 0x38
 8000622:	482a      	ldr	r0, [pc, #168]	; (80006cc <MX_GPIO_Init+0x150>)
 8000624:	f001 fefe 	bl	8002424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED5_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	2118      	movs	r1, #24
 800062c:	4828      	ldr	r0, [pc, #160]	; (80006d0 <MX_GPIO_Init+0x154>)
 800062e:	f001 fef9 	bl	8002424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED2_Pin|LED1_Pin|LED0_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	21f0      	movs	r1, #240	; 0xf0
 8000636:	4827      	ldr	r0, [pc, #156]	; (80006d4 <MX_GPIO_Init+0x158>)
 8000638:	f001 fef4 	bl	8002424 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = PHOTO0_Pin|PHOTO1_Pin|PHOTO2_Pin;
 800063c:	2307      	movs	r3, #7
 800063e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000640:	2300      	movs	r3, #0
 8000642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000644:	2301      	movs	r3, #1
 8000646:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	4619      	mov	r1, r3
 800064e:	481f      	ldr	r0, [pc, #124]	; (80006cc <MX_GPIO_Init+0x150>)
 8000650:	f001 fd34 	bl	80020bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = VALVE0_Pin|VALVE1_Pin|VALVE2_Pin;
 8000654:	2338      	movs	r3, #56	; 0x38
 8000656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000658:	2301      	movs	r3, #1
 800065a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000660:	2300      	movs	r3, #0
 8000662:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	4619      	mov	r1, r3
 800066a:	4818      	ldr	r0, [pc, #96]	; (80006cc <MX_GPIO_Init+0x150>)
 800066c:	f001 fd26 	bl	80020bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PHOTO3_Pin;
 8000670:	2310      	movs	r3, #16
 8000672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000678:	2301      	movs	r3, #1
 800067a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PHOTO3_GPIO_Port, &GPIO_InitStruct);
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	4619      	mov	r1, r3
 8000682:	4815      	ldr	r0, [pc, #84]	; (80006d8 <MX_GPIO_Init+0x15c>)
 8000684:	f001 fd1a 	bl	80020bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LED5_Pin|LED4_Pin;
 8000688:	2318      	movs	r3, #24
 800068a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068c:	2301      	movs	r3, #1
 800068e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000694:	2300      	movs	r3, #0
 8000696:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	4619      	mov	r1, r3
 800069e:	480c      	ldr	r0, [pc, #48]	; (80006d0 <MX_GPIO_Init+0x154>)
 80006a0:	f001 fd0c 	bl	80020bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin|LED1_Pin|LED0_Pin;
 80006a4:	23f0      	movs	r3, #240	; 0xf0
 80006a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a8:	2301      	movs	r3, #1
 80006aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b0:	2300      	movs	r3, #0
 80006b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	4619      	mov	r1, r3
 80006ba:	4806      	ldr	r0, [pc, #24]	; (80006d4 <MX_GPIO_Init+0x158>)
 80006bc:	f001 fcfe 	bl	80020bc <HAL_GPIO_Init>

}
 80006c0:	bf00      	nop
 80006c2:	3728      	adds	r7, #40	; 0x28
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020800 	.word	0x40020800
 80006d0:	40020c00 	.word	0x40020c00
 80006d4:	40020400 	.word	0x40020400
 80006d8:	40020000 	.word	0x40020000

080006dc <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */
int overflowcnt0 = 0;
int overflowcnt1 = 0;
int overflowcnt2 = 0;
int overflowcnt3 = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM5){
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a39      	ldr	r2, [pc, #228]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d116      	bne.n	800071c <HAL_TIM_PeriodElapsedCallback+0x40>
		__HAL_TIM_CLEAR_FLAG(&htim5, TIM_IT_UPDATE);
 80006ee:	4b39      	ldr	r3, [pc, #228]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f06f 0201 	mvn.w	r2, #1
 80006f6:	611a      	str	r2, [r3, #16]
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim5)){
 80006f8:	4b36      	ldr	r3, [pc, #216]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f003 0310 	and.w	r3, r3, #16
 8000702:	2b10      	cmp	r3, #16
 8000704:	d105      	bne.n	8000712 <HAL_TIM_PeriodElapsedCallback+0x36>
			overflowcnt0 --;
 8000706:	4b34      	ldr	r3, [pc, #208]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	3b01      	subs	r3, #1
 800070c:	4a32      	ldr	r2, [pc, #200]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	e004      	b.n	800071c <HAL_TIM_PeriodElapsedCallback+0x40>
		}else{
			overflowcnt0 ++;
 8000712:	4b31      	ldr	r3, [pc, #196]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	3301      	adds	r3, #1
 8000718:	4a2f      	ldr	r2, [pc, #188]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800071a:	6013      	str	r3, [r2, #0]
		}
	}
	if(htim->Instance == TIM3){
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a2e      	ldr	r2, [pc, #184]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d116      	bne.n	8000754 <HAL_TIM_PeriodElapsedCallback+0x78>
		__HAL_TIM_CLEAR_FLAG(&htim3, TIM_IT_UPDATE);
 8000726:	4b2e      	ldr	r3, [pc, #184]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f06f 0201 	mvn.w	r2, #1
 800072e:	611a      	str	r2, [r3, #16]
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)){
 8000730:	4b2b      	ldr	r3, [pc, #172]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f003 0310 	and.w	r3, r3, #16
 800073a:	2b10      	cmp	r3, #16
 800073c:	d105      	bne.n	800074a <HAL_TIM_PeriodElapsedCallback+0x6e>
			overflowcnt1 --;
 800073e:	4b29      	ldr	r3, [pc, #164]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	3b01      	subs	r3, #1
 8000744:	4a27      	ldr	r2, [pc, #156]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	e004      	b.n	8000754 <HAL_TIM_PeriodElapsedCallback+0x78>
		}else{
			overflowcnt1 ++;
 800074a:	4b26      	ldr	r3, [pc, #152]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	3301      	adds	r3, #1
 8000750:	4a24      	ldr	r2, [pc, #144]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000752:	6013      	str	r3, [r2, #0]
		}
	}
	if(htim->Instance == TIM4){
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a23      	ldr	r2, [pc, #140]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d116      	bne.n	800078c <HAL_TIM_PeriodElapsedCallback+0xb0>
		__HAL_TIM_CLEAR_FLAG(&htim4, TIM_IT_UPDATE);
 800075e:	4b23      	ldr	r3, [pc, #140]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f06f 0201 	mvn.w	r2, #1
 8000766:	611a      	str	r2, [r3, #16]
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)){
 8000768:	4b20      	ldr	r3, [pc, #128]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x110>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f003 0310 	and.w	r3, r3, #16
 8000772:	2b10      	cmp	r3, #16
 8000774:	d105      	bne.n	8000782 <HAL_TIM_PeriodElapsedCallback+0xa6>
			overflowcnt2 --;
 8000776:	4b1e      	ldr	r3, [pc, #120]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	3b01      	subs	r3, #1
 800077c:	4a1c      	ldr	r2, [pc, #112]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800077e:	6013      	str	r3, [r2, #0]
 8000780:	e004      	b.n	800078c <HAL_TIM_PeriodElapsedCallback+0xb0>
		}else{
			overflowcnt2 ++;
 8000782:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	3301      	adds	r3, #1
 8000788:	4a19      	ldr	r2, [pc, #100]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800078a:	6013      	str	r3, [r2, #0]
		}
	}
	if(htim->Instance == TIM2){
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000794:	d116      	bne.n	80007c4 <HAL_TIM_PeriodElapsedCallback+0xe8>
		__HAL_TIM_CLEAR_FLAG(&htim2, TIM_IT_UPDATE);
 8000796:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f06f 0201 	mvn.w	r2, #1
 800079e:	611a      	str	r2, [r3, #16]
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 80007a0:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f003 0310 	and.w	r3, r3, #16
 80007aa:	2b10      	cmp	r3, #16
 80007ac:	d105      	bne.n	80007ba <HAL_TIM_PeriodElapsedCallback+0xde>
			overflowcnt3 --;
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	4a10      	ldr	r2, [pc, #64]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80007b6:	6013      	str	r3, [r2, #0]
		}else{
			overflowcnt3 ++;
		}
	}
}
 80007b8:	e004      	b.n	80007c4 <HAL_TIM_PeriodElapsedCallback+0xe8>
			overflowcnt3 ++;
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	3301      	adds	r3, #1
 80007c0:	4a0d      	ldr	r2, [pc, #52]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80007c2:	6013      	str	r3, [r2, #0]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	40000c00 	.word	0x40000c00
 80007d4:	200001ac 	.word	0x200001ac
 80007d8:	20000078 	.word	0x20000078
 80007dc:	40000400 	.word	0x40000400
 80007e0:	2000011c 	.word	0x2000011c
 80007e4:	2000007c 	.word	0x2000007c
 80007e8:	40000800 	.word	0x40000800
 80007ec:	20000164 	.word	0x20000164
 80007f0:	20000080 	.word	0x20000080
 80007f4:	200000d4 	.word	0x200000d4
 80007f8:	20000084 	.word	0x20000084

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b0f6      	sub	sp, #472	; 0x1d8
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000802:	f001 fab3 	bl	8001d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000806:	f000 fa0b 	bl	8000c20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080a:	f7ff feb7 	bl	800057c <MX_GPIO_Init>
  MX_TIM1_Init();
 800080e:	f000 fb39 	bl	8000e84 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000812:	f000 fbfd 	bl	8001010 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000816:	f000 fc4f 	bl	80010b8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800081a:	f000 fca1 	bl	8001160 <MX_TIM4_Init>
  MX_TIM5_Init();
 800081e:	f000 fcf3 	bl	8001208 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000822:	f000 fd45 	bl	80012b0 <MX_TIM8_Init>
  MX_TIM9_Init();
 8000826:	f000 fe09 	bl	800143c <MX_TIM9_Init>
  MX_TIM12_Init();
 800082a:	f000 fe75 	bl	8001518 <MX_TIM12_Init>
  MX_UART4_Init();
 800082e:	f001 f91b 	bl	8001a68 <MX_UART4_Init>
  MX_UART5_Init();
 8000832:	f001 f945 	bl	8001ac0 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8000836:	f001 f96f 	bl	8001b18 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800083a:	2108      	movs	r1, #8
 800083c:	48ca      	ldr	r0, [pc, #808]	; (8000b68 <main+0x36c>)
 800083e:	f002 fbbd 	bl	8002fbc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000842:	210c      	movs	r1, #12
 8000844:	48c8      	ldr	r0, [pc, #800]	; (8000b68 <main+0x36c>)
 8000846:	f002 fbb9 	bl	8002fbc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800084a:	2100      	movs	r1, #0
 800084c:	48c6      	ldr	r0, [pc, #792]	; (8000b68 <main+0x36c>)
 800084e:	f002 fbb5 	bl	8002fbc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000852:	2104      	movs	r1, #4
 8000854:	48c4      	ldr	r0, [pc, #784]	; (8000b68 <main+0x36c>)
 8000856:	f002 fbb1 	bl	8002fbc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800085a:	2108      	movs	r1, #8
 800085c:	48c3      	ldr	r0, [pc, #780]	; (8000b6c <main+0x370>)
 800085e:	f002 fbad 	bl	8002fbc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000862:	210c      	movs	r1, #12
 8000864:	48c1      	ldr	r0, [pc, #772]	; (8000b6c <main+0x370>)
 8000866:	f002 fba9 	bl	8002fbc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800086a:	2100      	movs	r1, #0
 800086c:	48bf      	ldr	r0, [pc, #764]	; (8000b6c <main+0x370>)
 800086e:	f002 fba5 	bl	8002fbc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000872:	2104      	movs	r1, #4
 8000874:	48bd      	ldr	r0, [pc, #756]	; (8000b6c <main+0x370>)
 8000876:	f002 fba1 	bl	8002fbc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 800087a:	2100      	movs	r1, #0
 800087c:	48bc      	ldr	r0, [pc, #752]	; (8000b70 <main+0x374>)
 800087e:	f002 fb9d 	bl	8002fbc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8000882:	2104      	movs	r1, #4
 8000884:	48ba      	ldr	r0, [pc, #744]	; (8000b70 <main+0x374>)
 8000886:	f002 fb99 	bl	8002fbc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 800088a:	2100      	movs	r1, #0
 800088c:	48b9      	ldr	r0, [pc, #740]	; (8000b74 <main+0x378>)
 800088e:	f002 fb95 	bl	8002fbc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8000892:	2104      	movs	r1, #4
 8000894:	48b7      	ldr	r0, [pc, #732]	; (8000b74 <main+0x378>)
 8000896:	f002 fb91 	bl	8002fbc <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_ALL);
 800089a:	213c      	movs	r1, #60	; 0x3c
 800089c:	48b6      	ldr	r0, [pc, #728]	; (8000b78 <main+0x37c>)
 800089e:	f002 fcfb 	bl	8003298 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 80008a2:	48b5      	ldr	r0, [pc, #724]	; (8000b78 <main+0x37c>)
 80008a4:	f002 fac0 	bl	8002e28 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 80008a8:	213c      	movs	r1, #60	; 0x3c
 80008aa:	48b4      	ldr	r0, [pc, #720]	; (8000b7c <main+0x380>)
 80008ac:	f002 fcf4 	bl	8003298 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 80008b0:	48b2      	ldr	r0, [pc, #712]	; (8000b7c <main+0x380>)
 80008b2:	f002 fab9 	bl	8002e28 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 80008b6:	213c      	movs	r1, #60	; 0x3c
 80008b8:	48b1      	ldr	r0, [pc, #708]	; (8000b80 <main+0x384>)
 80008ba:	f002 fced 	bl	8003298 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 80008be:	48b0      	ldr	r0, [pc, #704]	; (8000b80 <main+0x384>)
 80008c0:	f002 fab2 	bl	8002e28 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 80008c4:	213c      	movs	r1, #60	; 0x3c
 80008c6:	48af      	ldr	r0, [pc, #700]	; (8000b84 <main+0x388>)
 80008c8:	f002 fce6 	bl	8003298 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80008cc:	48ad      	ldr	r0, [pc, #692]	; (8000b84 <main+0x388>)
 80008ce:	f002 faab 	bl	8002e28 <HAL_TIM_Base_Start_IT>
  uint32_t cnt3;
  char scnt0[100];
  char scnt1[100];
  char scnt2[100];
  char scnt3[100];
  overflowcnt0 = 0;
 80008d2:	4bad      	ldr	r3, [pc, #692]	; (8000b88 <main+0x38c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
  overflowcnt1 = 0;
 80008d8:	4bac      	ldr	r3, [pc, #688]	; (8000b8c <main+0x390>)
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
  overflowcnt2 = 0;
 80008de:	4bac      	ldr	r3, [pc, #688]	; (8000b90 <main+0x394>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
  overflowcnt3 = 0;
 80008e4:	4bab      	ldr	r3, [pc, #684]	; (8000b94 <main+0x398>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //ENC
	  cnt0 = (long)(overflowcnt0)*0x10000 + (long)TIM5 ->CNT;
 80008ea:	4ba7      	ldr	r3, [pc, #668]	; (8000b88 <main+0x38c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	041b      	lsls	r3, r3, #16
 80008f0:	4aa9      	ldr	r2, [pc, #676]	; (8000b98 <main+0x39c>)
 80008f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80008f4:	4413      	add	r3, r2
 80008f6:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
	  cnt1 = (long)(overflowcnt1)*0x10000 + (long)TIM3 ->CNT;
 80008fa:	4ba4      	ldr	r3, [pc, #656]	; (8000b8c <main+0x390>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	041b      	lsls	r3, r3, #16
 8000900:	4aa6      	ldr	r2, [pc, #664]	; (8000b9c <main+0x3a0>)
 8000902:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000904:	4413      	add	r3, r2
 8000906:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	  cnt2 = (long)(overflowcnt2)*0x10000 + (long)TIM4 ->CNT;
 800090a:	4ba1      	ldr	r3, [pc, #644]	; (8000b90 <main+0x394>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	041b      	lsls	r3, r3, #16
 8000910:	4aa3      	ldr	r2, [pc, #652]	; (8000ba0 <main+0x3a4>)
 8000912:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000914:	4413      	add	r3, r2
 8000916:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	  cnt3 = (long)(overflowcnt3)*0x10000 + (long)TIM2 ->CNT;
 800091a:	4b9e      	ldr	r3, [pc, #632]	; (8000b94 <main+0x398>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	041b      	lsls	r3, r3, #16
 8000920:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000924:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000926:	4413      	add	r3, r2
 8000928:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
	  sprintf(scnt0, "ENC0:%d ", cnt0);
 800092c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8000930:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000934:	499b      	ldr	r1, [pc, #620]	; (8000ba4 <main+0x3a8>)
 8000936:	4618      	mov	r0, r3
 8000938:	f004 f80a 	bl	8004950 <siprintf>
	  sprintf(scnt1, "ENC1:%d ", cnt1);
 800093c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000940:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8000944:	4998      	ldr	r1, [pc, #608]	; (8000ba8 <main+0x3ac>)
 8000946:	4618      	mov	r0, r3
 8000948:	f004 f802 	bl	8004950 <siprintf>
	  sprintf(scnt2, "ENC2:%d ", cnt2);
 800094c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000950:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8000954:	4995      	ldr	r1, [pc, #596]	; (8000bac <main+0x3b0>)
 8000956:	4618      	mov	r0, r3
 8000958:	f003 fffa 	bl	8004950 <siprintf>
	  sprintf(scnt3, "ENC3:%d\r\n", cnt3);
 800095c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000960:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8000964:	4992      	ldr	r1, [pc, #584]	; (8000bb0 <main+0x3b4>)
 8000966:	4618      	mov	r0, r3
 8000968:	f003 fff2 	bl	8004950 <siprintf>
	  HAL_UART_Transmit(&huart4, scnt0, strlen(scnt0) + 1, 0xFFFF);
 800096c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fc2d 	bl	80001d0 <strlen>
 8000976:	4603      	mov	r3, r0
 8000978:	b29b      	uxth	r3, r3
 800097a:	3301      	adds	r3, #1
 800097c:	b29a      	uxth	r2, r3
 800097e:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8000982:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000986:	488b      	ldr	r0, [pc, #556]	; (8000bb4 <main+0x3b8>)
 8000988:	f003 fc27 	bl	80041da <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart4, scnt1, strlen(scnt1) + 1, 0xFFFF);
 800098c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fc1d 	bl	80001d0 <strlen>
 8000996:	4603      	mov	r3, r0
 8000998:	b29b      	uxth	r3, r3
 800099a:	3301      	adds	r3, #1
 800099c:	b29a      	uxth	r2, r3
 800099e:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 80009a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009a6:	4883      	ldr	r0, [pc, #524]	; (8000bb4 <main+0x3b8>)
 80009a8:	f003 fc17 	bl	80041da <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart4, scnt2, strlen(scnt2) + 1, 0xFFFF);
 80009ac:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fc0d 	bl	80001d0 <strlen>
 80009b6:	4603      	mov	r3, r0
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	3301      	adds	r3, #1
 80009bc:	b29a      	uxth	r2, r3
 80009be:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80009c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009c6:	487b      	ldr	r0, [pc, #492]	; (8000bb4 <main+0x3b8>)
 80009c8:	f003 fc07 	bl	80041da <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart4, scnt3, strlen(scnt3) + 1, 0xFFFF);
 80009cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff fbfd 	bl	80001d0 <strlen>
 80009d6:	4603      	mov	r3, r0
 80009d8:	b29b      	uxth	r3, r3
 80009da:	3301      	adds	r3, #1
 80009dc:	b29a      	uxth	r2, r3
 80009de:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80009e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009e6:	4873      	ldr	r0, [pc, #460]	; (8000bb4 <main+0x3b8>)
 80009e8:	f003 fbf7 	bl	80041da <HAL_UART_Transmit>

	  //LED
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2180      	movs	r1, #128	; 0x80
 80009f0:	4871      	ldr	r0, [pc, #452]	; (8000bb8 <main+0x3bc>)
 80009f2:	f001 fd17 	bl	8002424 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80009f6:	2201      	movs	r2, #1
 80009f8:	2140      	movs	r1, #64	; 0x40
 80009fa:	486f      	ldr	r0, [pc, #444]	; (8000bb8 <main+0x3bc>)
 80009fc:	f001 fd12 	bl	8002424 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	2120      	movs	r1, #32
 8000a04:	486c      	ldr	r0, [pc, #432]	; (8000bb8 <main+0x3bc>)
 8000a06:	f001 fd0d 	bl	8002424 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	2110      	movs	r1, #16
 8000a0e:	486a      	ldr	r0, [pc, #424]	; (8000bb8 <main+0x3bc>)
 8000a10:	f001 fd08 	bl	8002424 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000a14:	2201      	movs	r2, #1
 8000a16:	2110      	movs	r1, #16
 8000a18:	4868      	ldr	r0, [pc, #416]	; (8000bbc <main+0x3c0>)
 8000a1a:	f001 fd03 	bl	8002424 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	2108      	movs	r1, #8
 8000a22:	4866      	ldr	r0, [pc, #408]	; (8000bbc <main+0x3c0>)
 8000a24:	f001 fcfe 	bl	8002424 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000a28:	2064      	movs	r0, #100	; 0x64
 8000a2a:	f001 fa11 	bl	8001e50 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2180      	movs	r1, #128	; 0x80
 8000a32:	4861      	ldr	r0, [pc, #388]	; (8000bb8 <main+0x3bc>)
 8000a34:	f001 fcf6 	bl	8002424 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2140      	movs	r1, #64	; 0x40
 8000a3c:	485e      	ldr	r0, [pc, #376]	; (8000bb8 <main+0x3bc>)
 8000a3e:	f001 fcf1 	bl	8002424 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2120      	movs	r1, #32
 8000a46:	485c      	ldr	r0, [pc, #368]	; (8000bb8 <main+0x3bc>)
 8000a48:	f001 fcec 	bl	8002424 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2110      	movs	r1, #16
 8000a50:	4859      	ldr	r0, [pc, #356]	; (8000bb8 <main+0x3bc>)
 8000a52:	f001 fce7 	bl	8002424 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2110      	movs	r1, #16
 8000a5a:	4858      	ldr	r0, [pc, #352]	; (8000bbc <main+0x3c0>)
 8000a5c:	f001 fce2 	bl	8002424 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2108      	movs	r1, #8
 8000a64:	4855      	ldr	r0, [pc, #340]	; (8000bbc <main+0x3c0>)
 8000a66:	f001 fcdd 	bl	8002424 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000a6a:	2064      	movs	r0, #100	; 0x64
 8000a6c:	f001 f9f0 	bl	8001e50 <HAL_Delay>

	  //MD
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,180);
 8000a70:	4b3d      	ldr	r3, [pc, #244]	; (8000b68 <main+0x36c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	22b4      	movs	r2, #180	; 0xb4
 8000a76:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,120);
 8000a78:	4b3b      	ldr	r3, [pc, #236]	; (8000b68 <main+0x36c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2278      	movs	r2, #120	; 0x78
 8000a7e:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,222);
 8000a80:	4b3a      	ldr	r3, [pc, #232]	; (8000b6c <main+0x370>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	22de      	movs	r2, #222	; 0xde
 8000a86:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,10);
 8000a88:	4b38      	ldr	r3, [pc, #224]	; (8000b6c <main+0x370>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	220a      	movs	r2, #10
 8000a8e:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,250);
 8000a90:	4b37      	ldr	r3, [pc, #220]	; (8000b70 <main+0x374>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	22fa      	movs	r2, #250	; 0xfa
 8000a96:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim9,TIM_CHANNEL_1,50);
 8000a98:	4b36      	ldr	r3, [pc, #216]	; (8000b74 <main+0x378>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2232      	movs	r2, #50	; 0x32
 8000a9e:	635a      	str	r2, [r3, #52]	; 0x34

	  //Photo
	  uint8_t p0 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	4847      	ldr	r0, [pc, #284]	; (8000bc0 <main+0x3c4>)
 8000aa4:	f001 fca6 	bl	80023f4 <HAL_GPIO_ReadPin>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7
	  uint8_t p1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 8000aae:	2102      	movs	r1, #2
 8000ab0:	4843      	ldr	r0, [pc, #268]	; (8000bc0 <main+0x3c4>)
 8000ab2:	f001 fc9f 	bl	80023f4 <HAL_GPIO_ReadPin>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	f887 31c6 	strb.w	r3, [r7, #454]	; 0x1c6
	  uint8_t p2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 8000abc:	2104      	movs	r1, #4
 8000abe:	4840      	ldr	r0, [pc, #256]	; (8000bc0 <main+0x3c4>)
 8000ac0:	f001 fc98 	bl	80023f4 <HAL_GPIO_ReadPin>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	f887 31c5 	strb.w	r3, [r7, #453]	; 0x1c5
	  uint8_t p3 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 8000aca:	2110      	movs	r1, #16
 8000acc:	483d      	ldr	r0, [pc, #244]	; (8000bc4 <main+0x3c8>)
 8000ace:	f001 fc91 	bl	80023f4 <HAL_GPIO_ReadPin>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	f887 31c4 	strb.w	r3, [r7, #452]	; 0x1c4
	  char ph0[10];
	  char ph1[10];
	  char ph2[10];
	  char ph3[10];
	  sprintf(ph0, "PHOTO0:%d ",p0);
 8000ad8:	f897 21c7 	ldrb.w	r2, [r7, #455]	; 0x1c7
 8000adc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ae0:	4939      	ldr	r1, [pc, #228]	; (8000bc8 <main+0x3cc>)
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f003 ff34 	bl	8004950 <siprintf>
	  sprintf(ph1, "PHOTO1:%d ",p1);
 8000ae8:	f897 21c6 	ldrb.w	r2, [r7, #454]	; 0x1c6
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	4936      	ldr	r1, [pc, #216]	; (8000bcc <main+0x3d0>)
 8000af2:	4618      	mov	r0, r3
 8000af4:	f003 ff2c 	bl	8004950 <siprintf>
	  sprintf(ph2, "PHOTO2:%d ",p2);
 8000af8:	f897 21c5 	ldrb.w	r2, [r7, #453]	; 0x1c5
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	4933      	ldr	r1, [pc, #204]	; (8000bd0 <main+0x3d4>)
 8000b02:	4618      	mov	r0, r3
 8000b04:	f003 ff24 	bl	8004950 <siprintf>
	  sprintf(ph3, "PHOTO3:%d\r\n",p3);
 8000b08:	f897 21c4 	ldrb.w	r2, [r7, #452]	; 0x1c4
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	4931      	ldr	r1, [pc, #196]	; (8000bd4 <main+0x3d8>)
 8000b10:	4618      	mov	r0, r3
 8000b12:	f003 ff1d 	bl	8004950 <siprintf>
	  HAL_UART_Transmit(&huart4, (uint8_t*)ph0, strlen(ph0), 0xFFFF);
 8000b16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff fb58 	bl	80001d0 <strlen>
 8000b20:	4603      	mov	r3, r0
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000b28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b2c:	4821      	ldr	r0, [pc, #132]	; (8000bb4 <main+0x3b8>)
 8000b2e:	f003 fb54 	bl	80041da <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart4, (uint8_t*)ph1, strlen(ph1), 0xFFFF);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fb4a 	bl	80001d0 <strlen>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	f107 011c 	add.w	r1, r7, #28
 8000b44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b48:	481a      	ldr	r0, [pc, #104]	; (8000bb4 <main+0x3b8>)
 8000b4a:	f003 fb46 	bl	80041da <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart4, (uint8_t*)ph2, strlen(ph2), 0xFFFF);
 8000b4e:	f107 0310 	add.w	r3, r7, #16
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff fb3c 	bl	80001d0 <strlen>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	f107 0110 	add.w	r1, r7, #16
 8000b60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b64:	e038      	b.n	8000bd8 <main+0x3dc>
 8000b66:	bf00      	nop
 8000b68:	2000008c 	.word	0x2000008c
 8000b6c:	200001f4 	.word	0x200001f4
 8000b70:	20000284 	.word	0x20000284
 8000b74:	2000023c 	.word	0x2000023c
 8000b78:	200001ac 	.word	0x200001ac
 8000b7c:	2000011c 	.word	0x2000011c
 8000b80:	20000164 	.word	0x20000164
 8000b84:	200000d4 	.word	0x200000d4
 8000b88:	20000078 	.word	0x20000078
 8000b8c:	2000007c 	.word	0x2000007c
 8000b90:	20000080 	.word	0x20000080
 8000b94:	20000084 	.word	0x20000084
 8000b98:	40000c00 	.word	0x40000c00
 8000b9c:	40000400 	.word	0x40000400
 8000ba0:	40000800 	.word	0x40000800
 8000ba4:	080052b0 	.word	0x080052b0
 8000ba8:	080052bc 	.word	0x080052bc
 8000bac:	080052c8 	.word	0x080052c8
 8000bb0:	080052d4 	.word	0x080052d4
 8000bb4:	200002cc 	.word	0x200002cc
 8000bb8:	40020400 	.word	0x40020400
 8000bbc:	40020c00 	.word	0x40020c00
 8000bc0:	40020800 	.word	0x40020800
 8000bc4:	40020000 	.word	0x40020000
 8000bc8:	080052e0 	.word	0x080052e0
 8000bcc:	080052ec 	.word	0x080052ec
 8000bd0:	080052f8 	.word	0x080052f8
 8000bd4:	08005304 	.word	0x08005304
 8000bd8:	480f      	ldr	r0, [pc, #60]	; (8000c18 <main+0x41c>)
 8000bda:	f003 fafe 	bl	80041da <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart4, (uint8_t*)ph3, strlen(ph3), 0xFFFF);
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff faf5 	bl	80001d0 <strlen>
 8000be6:	4603      	mov	r3, r0
 8000be8:	b29a      	uxth	r2, r3
 8000bea:	1d39      	adds	r1, r7, #4
 8000bec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bf0:	4809      	ldr	r0, [pc, #36]	; (8000c18 <main+0x41c>)
 8000bf2:	f003 faf2 	bl	80041da <HAL_UART_Transmit>

	  //Valve
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	2108      	movs	r1, #8
 8000bfa:	4808      	ldr	r0, [pc, #32]	; (8000c1c <main+0x420>)
 8000bfc:	f001 fc12 	bl	8002424 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000c00:	2201      	movs	r2, #1
 8000c02:	2110      	movs	r1, #16
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <main+0x420>)
 8000c06:	f001 fc0d 	bl	8002424 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	2120      	movs	r1, #32
 8000c0e:	4803      	ldr	r0, [pc, #12]	; (8000c1c <main+0x420>)
 8000c10:	f001 fc08 	bl	8002424 <HAL_GPIO_WritePin>
  {
 8000c14:	e669      	b.n	80008ea <main+0xee>
 8000c16:	bf00      	nop
 8000c18:	200002cc 	.word	0x200002cc
 8000c1c:	40020800 	.word	0x40020800

08000c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b094      	sub	sp, #80	; 0x50
 8000c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c26:	f107 0320 	add.w	r3, r7, #32
 8000c2a:	2230      	movs	r2, #48	; 0x30
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f003 feae 	bl	8004990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c44:	2300      	movs	r3, #0
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	4b28      	ldr	r3, [pc, #160]	; (8000cec <SystemClock_Config+0xcc>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	4a27      	ldr	r2, [pc, #156]	; (8000cec <SystemClock_Config+0xcc>)
 8000c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c52:	6413      	str	r3, [r2, #64]	; 0x40
 8000c54:	4b25      	ldr	r3, [pc, #148]	; (8000cec <SystemClock_Config+0xcc>)
 8000c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c60:	2300      	movs	r3, #0
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <SystemClock_Config+0xd0>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a21      	ldr	r2, [pc, #132]	; (8000cf0 <SystemClock_Config+0xd0>)
 8000c6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6e:	6013      	str	r3, [r2, #0]
 8000c70:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <SystemClock_Config+0xd0>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c86:	2302      	movs	r3, #2
 8000c88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c90:	2308      	movs	r3, #8
 8000c92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c94:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c9e:	2304      	movs	r3, #4
 8000ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca2:	f107 0320 	add.w	r3, r7, #32
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f001 fbd6 	bl	8002458 <HAL_RCC_OscConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000cb2:	f000 f81f 	bl	8000cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb6:	230f      	movs	r3, #15
 8000cb8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cc2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cc6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ccc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	2105      	movs	r1, #5
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f001 fe37 	bl	8002948 <HAL_RCC_ClockConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ce0:	f000 f808 	bl	8000cf4 <Error_Handler>
  }
}
 8000ce4:	bf00      	nop
 8000ce6:	3750      	adds	r7, #80	; 0x50
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40007000 	.word	0x40007000

08000cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf8:	b672      	cpsid	i
}
 8000cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <Error_Handler+0x8>
	...

08000d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	4a0f      	ldr	r2, [pc, #60]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d14:	6453      	str	r3, [r2, #68]	; 0x44
 8000d16:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	603b      	str	r3, [r7, #0]
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	4a08      	ldr	r2, [pc, #32]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d30:	6413      	str	r3, [r2, #64]	; 0x40
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	40023800 	.word	0x40023800

08000d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d54:	e7fe      	b.n	8000d54 <NMI_Handler+0x4>

08000d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <HardFault_Handler+0x4>

08000d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <MemManage_Handler+0x4>

08000d62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <BusFault_Handler+0x4>

08000d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <UsageFault_Handler+0x4>

08000d6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9c:	f001 f838 	bl	8001e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <TIM2_IRQHandler+0x10>)
 8000daa:	f002 fb03 	bl	80033b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200000d4 	.word	0x200000d4

08000db8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <TIM3_IRQHandler+0x10>)
 8000dbe:	f002 faf9 	bl	80033b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	2000011c 	.word	0x2000011c

08000dcc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <TIM4_IRQHandler+0x10>)
 8000dd2:	f002 faef 	bl	80033b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000164 	.word	0x20000164

08000de0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000de4:	4802      	ldr	r0, [pc, #8]	; (8000df0 <TIM5_IRQHandler+0x10>)
 8000de6:	f002 fae5 	bl	80033b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200001ac 	.word	0x200001ac

08000df4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dfc:	4a14      	ldr	r2, [pc, #80]	; (8000e50 <_sbrk+0x5c>)
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <_sbrk+0x60>)
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e08:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d102      	bne.n	8000e16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <_sbrk+0x64>)
 8000e12:	4a12      	ldr	r2, [pc, #72]	; (8000e5c <_sbrk+0x68>)
 8000e14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d207      	bcs.n	8000e34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e24:	f003 fdbc 	bl	80049a0 <__errno>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e32:	e009      	b.n	8000e48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e3a:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <_sbrk+0x64>)
 8000e44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e46:	68fb      	ldr	r3, [r7, #12]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20020000 	.word	0x20020000
 8000e54:	00000400 	.word	0x00000400
 8000e58:	20000088 	.word	0x20000088
 8000e5c:	200004f0 	.word	0x200004f0

08000e60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <SystemInit+0x20>)
 8000e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e6a:	4a05      	ldr	r2, [pc, #20]	; (8000e80 <SystemInit+0x20>)
 8000e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b096      	sub	sp, #88	; 0x58
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
 8000eb0:	611a      	str	r2, [r3, #16]
 8000eb2:	615a      	str	r2, [r3, #20]
 8000eb4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2220      	movs	r2, #32
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f003 fd67 	bl	8004990 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ec2:	4b51      	ldr	r3, [pc, #324]	; (8001008 <MX_TIM1_Init+0x184>)
 8000ec4:	4a51      	ldr	r2, [pc, #324]	; (800100c <MX_TIM1_Init+0x188>)
 8000ec6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 840;
 8000ec8:	4b4f      	ldr	r3, [pc, #316]	; (8001008 <MX_TIM1_Init+0x184>)
 8000eca:	f44f 7252 	mov.w	r2, #840	; 0x348
 8000ece:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed0:	4b4d      	ldr	r3, [pc, #308]	; (8001008 <MX_TIM1_Init+0x184>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000ed6:	4b4c      	ldr	r3, [pc, #304]	; (8001008 <MX_TIM1_Init+0x184>)
 8000ed8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000edc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ede:	4b4a      	ldr	r3, [pc, #296]	; (8001008 <MX_TIM1_Init+0x184>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ee4:	4b48      	ldr	r3, [pc, #288]	; (8001008 <MX_TIM1_Init+0x184>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eea:	4b47      	ldr	r3, [pc, #284]	; (8001008 <MX_TIM1_Init+0x184>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ef0:	4845      	ldr	r0, [pc, #276]	; (8001008 <MX_TIM1_Init+0x184>)
 8000ef2:	f001 ff49 	bl	8002d88 <HAL_TIM_Base_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000efc:	f7ff fefa 	bl	8000cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f04:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	483e      	ldr	r0, [pc, #248]	; (8001008 <MX_TIM1_Init+0x184>)
 8000f0e:	f002 fc03 	bl	8003718 <HAL_TIM_ConfigClockSource>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000f18:	f7ff feec 	bl	8000cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f1c:	483a      	ldr	r0, [pc, #232]	; (8001008 <MX_TIM1_Init+0x184>)
 8000f1e:	f001 fff3 	bl	8002f08 <HAL_TIM_PWM_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000f28:	f7ff fee4 	bl	8000cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4833      	ldr	r0, [pc, #204]	; (8001008 <MX_TIM1_Init+0x184>)
 8000f3c:	f002 fff8 	bl	8003f30 <HAL_TIMEx_MasterConfigSynchronization>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000f46:	f7ff fed5 	bl	8000cf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f4a:	2360      	movs	r3, #96	; 0x60
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f52:	2300      	movs	r3, #0
 8000f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f56:	2300      	movs	r3, #0
 8000f58:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f62:	2300      	movs	r3, #0
 8000f64:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4826      	ldr	r0, [pc, #152]	; (8001008 <MX_TIM1_Init+0x184>)
 8000f70:	f002 fb10 	bl	8003594 <HAL_TIM_PWM_ConfigChannel>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000f7a:	f7ff febb 	bl	8000cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f82:	2204      	movs	r2, #4
 8000f84:	4619      	mov	r1, r3
 8000f86:	4820      	ldr	r0, [pc, #128]	; (8001008 <MX_TIM1_Init+0x184>)
 8000f88:	f002 fb04 	bl	8003594 <HAL_TIM_PWM_ConfigChannel>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000f92:	f7ff feaf 	bl	8000cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9a:	2208      	movs	r2, #8
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	481a      	ldr	r0, [pc, #104]	; (8001008 <MX_TIM1_Init+0x184>)
 8000fa0:	f002 faf8 	bl	8003594 <HAL_TIM_PWM_ConfigChannel>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000faa:	f7ff fea3 	bl	8000cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4814      	ldr	r0, [pc, #80]	; (8001008 <MX_TIM1_Init+0x184>)
 8000fb8:	f002 faec 	bl	8003594 <HAL_TIM_PWM_ConfigChannel>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000fc2:	f7ff fe97 	bl	8000cf4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fde:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4807      	ldr	r0, [pc, #28]	; (8001008 <MX_TIM1_Init+0x184>)
 8000fea:	f003 f81d 	bl	8004028 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8000ff4:	f7ff fe7e 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ff8:	4803      	ldr	r0, [pc, #12]	; (8001008 <MX_TIM1_Init+0x184>)
 8000ffa:	f000 fc83 	bl	8001904 <HAL_TIM_MspPostInit>

}
 8000ffe:	bf00      	nop
 8001000:	3758      	adds	r7, #88	; 0x58
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	2000008c 	.word	0x2000008c
 800100c:	40010000 	.word	0x40010000

08001010 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08c      	sub	sp, #48	; 0x30
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001016:	f107 030c 	add.w	r3, r7, #12
 800101a:	2224      	movs	r2, #36	; 0x24
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f003 fcb6 	bl	8004990 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800102c:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <MX_TIM2_Init+0xa4>)
 800102e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001032:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001034:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <MX_TIM2_Init+0xa4>)
 8001036:	2200      	movs	r2, #0
 8001038:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103a:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <MX_TIM2_Init+0xa4>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001040:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <MX_TIM2_Init+0xa4>)
 8001042:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001046:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001048:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <MX_TIM2_Init+0xa4>)
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800104e:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <MX_TIM2_Init+0xa4>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001054:	2303      	movs	r3, #3
 8001056:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001058:	2300      	movs	r3, #0
 800105a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800105c:	2301      	movs	r3, #1
 800105e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001068:	2300      	movs	r3, #0
 800106a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800106c:	2301      	movs	r3, #1
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	4619      	mov	r1, r3
 800107e:	480d      	ldr	r0, [pc, #52]	; (80010b4 <MX_TIM2_Init+0xa4>)
 8001080:	f002 f864 	bl	800314c <HAL_TIM_Encoder_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800108a:	f7ff fe33 	bl	8000cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	4619      	mov	r1, r3
 800109a:	4806      	ldr	r0, [pc, #24]	; (80010b4 <MX_TIM2_Init+0xa4>)
 800109c:	f002 ff48 	bl	8003f30 <HAL_TIMEx_MasterConfigSynchronization>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80010a6:	f7ff fe25 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	3730      	adds	r7, #48	; 0x30
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200000d4 	.word	0x200000d4

080010b8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08c      	sub	sp, #48	; 0x30
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	2224      	movs	r2, #36	; 0x24
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f003 fc62 	bl	8004990 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010d4:	4b20      	ldr	r3, [pc, #128]	; (8001158 <MX_TIM3_Init+0xa0>)
 80010d6:	4a21      	ldr	r2, [pc, #132]	; (800115c <MX_TIM3_Init+0xa4>)
 80010d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010da:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <MX_TIM3_Init+0xa0>)
 80010dc:	2200      	movs	r2, #0
 80010de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e0:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <MX_TIM3_Init+0xa0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010e6:	4b1c      	ldr	r3, [pc, #112]	; (8001158 <MX_TIM3_Init+0xa0>)
 80010e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ee:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <MX_TIM3_Init+0xa0>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f4:	4b18      	ldr	r3, [pc, #96]	; (8001158 <MX_TIM3_Init+0xa0>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010fa:	2303      	movs	r3, #3
 80010fc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001102:	2301      	movs	r3, #1
 8001104:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001112:	2301      	movs	r3, #1
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001116:	2300      	movs	r3, #0
 8001118:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	4619      	mov	r1, r3
 8001124:	480c      	ldr	r0, [pc, #48]	; (8001158 <MX_TIM3_Init+0xa0>)
 8001126:	f002 f811 	bl	800314c <HAL_TIM_Encoder_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001130:	f7ff fde0 	bl	8000cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001134:	2300      	movs	r3, #0
 8001136:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001138:	2300      	movs	r3, #0
 800113a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	4619      	mov	r1, r3
 8001140:	4805      	ldr	r0, [pc, #20]	; (8001158 <MX_TIM3_Init+0xa0>)
 8001142:	f002 fef5 	bl	8003f30 <HAL_TIMEx_MasterConfigSynchronization>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800114c:	f7ff fdd2 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	3730      	adds	r7, #48	; 0x30
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	2000011c 	.word	0x2000011c
 800115c:	40000400 	.word	0x40000400

08001160 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08c      	sub	sp, #48	; 0x30
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	2224      	movs	r2, #36	; 0x24
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f003 fc0e 	bl	8004990 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800117c:	4b20      	ldr	r3, [pc, #128]	; (8001200 <MX_TIM4_Init+0xa0>)
 800117e:	4a21      	ldr	r2, [pc, #132]	; (8001204 <MX_TIM4_Init+0xa4>)
 8001180:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001182:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <MX_TIM4_Init+0xa0>)
 8001184:	2200      	movs	r2, #0
 8001186:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001188:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <MX_TIM4_Init+0xa0>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800118e:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <MX_TIM4_Init+0xa0>)
 8001190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001194:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001196:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <MX_TIM4_Init+0xa0>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119c:	4b18      	ldr	r3, [pc, #96]	; (8001200 <MX_TIM4_Init+0xa0>)
 800119e:	2200      	movs	r2, #0
 80011a0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011a2:	2303      	movs	r3, #3
 80011a4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011aa:	2301      	movs	r3, #1
 80011ac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011b6:	2300      	movs	r3, #0
 80011b8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011ba:	2301      	movs	r3, #1
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011be:	2300      	movs	r3, #0
 80011c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	4619      	mov	r1, r3
 80011cc:	480c      	ldr	r0, [pc, #48]	; (8001200 <MX_TIM4_Init+0xa0>)
 80011ce:	f001 ffbd 	bl	800314c <HAL_TIM_Encoder_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80011d8:	f7ff fd8c 	bl	8000cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	4619      	mov	r1, r3
 80011e8:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_TIM4_Init+0xa0>)
 80011ea:	f002 fea1 	bl	8003f30 <HAL_TIMEx_MasterConfigSynchronization>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80011f4:	f7ff fd7e 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	3730      	adds	r7, #48	; 0x30
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000164 	.word	0x20000164
 8001204:	40000800 	.word	0x40000800

08001208 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08c      	sub	sp, #48	; 0x30
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	2224      	movs	r2, #36	; 0x24
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f003 fbba 	bl	8004990 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001224:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <MX_TIM5_Init+0xa0>)
 8001226:	4a21      	ldr	r2, [pc, #132]	; (80012ac <MX_TIM5_Init+0xa4>)
 8001228:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800122a:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <MX_TIM5_Init+0xa0>)
 800122c:	2200      	movs	r2, #0
 800122e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001230:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <MX_TIM5_Init+0xa0>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001236:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <MX_TIM5_Init+0xa0>)
 8001238:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800123c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123e:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <MX_TIM5_Init+0xa0>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001244:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <MX_TIM5_Init+0xa0>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800124a:	2303      	movs	r3, #3
 800124c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001252:	2301      	movs	r3, #1
 8001254:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001256:	2300      	movs	r3, #0
 8001258:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800125e:	2300      	movs	r3, #0
 8001260:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001262:	2301      	movs	r3, #1
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	4619      	mov	r1, r3
 8001274:	480c      	ldr	r0, [pc, #48]	; (80012a8 <MX_TIM5_Init+0xa0>)
 8001276:	f001 ff69 	bl	800314c <HAL_TIM_Encoder_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001280:	f7ff fd38 	bl	8000cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001284:	2300      	movs	r3, #0
 8001286:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001288:	2300      	movs	r3, #0
 800128a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	4619      	mov	r1, r3
 8001290:	4805      	ldr	r0, [pc, #20]	; (80012a8 <MX_TIM5_Init+0xa0>)
 8001292:	f002 fe4d 	bl	8003f30 <HAL_TIMEx_MasterConfigSynchronization>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 800129c:	f7ff fd2a 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80012a0:	bf00      	nop
 80012a2:	3730      	adds	r7, #48	; 0x30
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	200001ac 	.word	0x200001ac
 80012ac:	40000c00 	.word	0x40000c00

080012b0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b096      	sub	sp, #88	; 0x58
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
 80012dc:	611a      	str	r2, [r3, #16]
 80012de:	615a      	str	r2, [r3, #20]
 80012e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	2220      	movs	r2, #32
 80012e6:	2100      	movs	r1, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f003 fb51 	bl	8004990 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80012ee:	4b51      	ldr	r3, [pc, #324]	; (8001434 <MX_TIM8_Init+0x184>)
 80012f0:	4a51      	ldr	r2, [pc, #324]	; (8001438 <MX_TIM8_Init+0x188>)
 80012f2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 840;
 80012f4:	4b4f      	ldr	r3, [pc, #316]	; (8001434 <MX_TIM8_Init+0x184>)
 80012f6:	f44f 7252 	mov.w	r2, #840	; 0x348
 80012fa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fc:	4b4d      	ldr	r3, [pc, #308]	; (8001434 <MX_TIM8_Init+0x184>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 8001302:	4b4c      	ldr	r3, [pc, #304]	; (8001434 <MX_TIM8_Init+0x184>)
 8001304:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001308:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130a:	4b4a      	ldr	r3, [pc, #296]	; (8001434 <MX_TIM8_Init+0x184>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001310:	4b48      	ldr	r3, [pc, #288]	; (8001434 <MX_TIM8_Init+0x184>)
 8001312:	2200      	movs	r2, #0
 8001314:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001316:	4b47      	ldr	r3, [pc, #284]	; (8001434 <MX_TIM8_Init+0x184>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800131c:	4845      	ldr	r0, [pc, #276]	; (8001434 <MX_TIM8_Init+0x184>)
 800131e:	f001 fd33 	bl	8002d88 <HAL_TIM_Base_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001328:	f7ff fce4 	bl	8000cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001330:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001332:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001336:	4619      	mov	r1, r3
 8001338:	483e      	ldr	r0, [pc, #248]	; (8001434 <MX_TIM8_Init+0x184>)
 800133a:	f002 f9ed 	bl	8003718 <HAL_TIM_ConfigClockSource>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001344:	f7ff fcd6 	bl	8000cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001348:	483a      	ldr	r0, [pc, #232]	; (8001434 <MX_TIM8_Init+0x184>)
 800134a:	f001 fddd 	bl	8002f08 <HAL_TIM_PWM_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001354:	f7ff fcce 	bl	8000cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001358:	2300      	movs	r3, #0
 800135a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001360:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001364:	4619      	mov	r1, r3
 8001366:	4833      	ldr	r0, [pc, #204]	; (8001434 <MX_TIM8_Init+0x184>)
 8001368:	f002 fde2 	bl	8003f30 <HAL_TIMEx_MasterConfigSynchronization>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8001372:	f7ff fcbf 	bl	8000cf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001376:	2360      	movs	r3, #96	; 0x60
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800137e:	2300      	movs	r3, #0
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001382:	2300      	movs	r3, #0
 8001384:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800138a:	2300      	movs	r3, #0
 800138c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800138e:	2300      	movs	r3, #0
 8001390:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001396:	2200      	movs	r2, #0
 8001398:	4619      	mov	r1, r3
 800139a:	4826      	ldr	r0, [pc, #152]	; (8001434 <MX_TIM8_Init+0x184>)
 800139c:	f002 f8fa 	bl	8003594 <HAL_TIM_PWM_ConfigChannel>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80013a6:	f7ff fca5 	bl	8000cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ae:	2204      	movs	r2, #4
 80013b0:	4619      	mov	r1, r3
 80013b2:	4820      	ldr	r0, [pc, #128]	; (8001434 <MX_TIM8_Init+0x184>)
 80013b4:	f002 f8ee 	bl	8003594 <HAL_TIM_PWM_ConfigChannel>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 80013be:	f7ff fc99 	bl	8000cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c6:	2208      	movs	r2, #8
 80013c8:	4619      	mov	r1, r3
 80013ca:	481a      	ldr	r0, [pc, #104]	; (8001434 <MX_TIM8_Init+0x184>)
 80013cc:	f002 f8e2 	bl	8003594 <HAL_TIM_PWM_ConfigChannel>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 80013d6:	f7ff fc8d 	bl	8000cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013de:	220c      	movs	r2, #12
 80013e0:	4619      	mov	r1, r3
 80013e2:	4814      	ldr	r0, [pc, #80]	; (8001434 <MX_TIM8_Init+0x184>)
 80013e4:	f002 f8d6 	bl	8003594 <HAL_TIM_PWM_ConfigChannel>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80013ee:	f7ff fc81 	bl	8000cf4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001406:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800140a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	4619      	mov	r1, r3
 8001414:	4807      	ldr	r0, [pc, #28]	; (8001434 <MX_TIM8_Init+0x184>)
 8001416:	f002 fe07 	bl	8004028 <HAL_TIMEx_ConfigBreakDeadTime>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM8_Init+0x174>
  {
    Error_Handler();
 8001420:	f7ff fc68 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001424:	4803      	ldr	r0, [pc, #12]	; (8001434 <MX_TIM8_Init+0x184>)
 8001426:	f000 fa6d 	bl	8001904 <HAL_TIM_MspPostInit>

}
 800142a:	bf00      	nop
 800142c:	3758      	adds	r7, #88	; 0x58
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200001f4 	.word	0x200001f4
 8001438:	40010400 	.word	0x40010400

0800143c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08c      	sub	sp, #48	; 0x30
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001442:	f107 0320 	add.w	r3, r7, #32
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
 800145c:	611a      	str	r2, [r3, #16]
 800145e:	615a      	str	r2, [r3, #20]
 8001460:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001462:	4b2b      	ldr	r3, [pc, #172]	; (8001510 <MX_TIM9_Init+0xd4>)
 8001464:	4a2b      	ldr	r2, [pc, #172]	; (8001514 <MX_TIM9_Init+0xd8>)
 8001466:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 840;
 8001468:	4b29      	ldr	r3, [pc, #164]	; (8001510 <MX_TIM9_Init+0xd4>)
 800146a:	f44f 7252 	mov.w	r2, #840	; 0x348
 800146e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001470:	4b27      	ldr	r3, [pc, #156]	; (8001510 <MX_TIM9_Init+0xd4>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000;
 8001476:	4b26      	ldr	r3, [pc, #152]	; (8001510 <MX_TIM9_Init+0xd4>)
 8001478:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800147c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147e:	4b24      	ldr	r3, [pc, #144]	; (8001510 <MX_TIM9_Init+0xd4>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001484:	4b22      	ldr	r3, [pc, #136]	; (8001510 <MX_TIM9_Init+0xd4>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800148a:	4821      	ldr	r0, [pc, #132]	; (8001510 <MX_TIM9_Init+0xd4>)
 800148c:	f001 fc7c 	bl	8002d88 <HAL_TIM_Base_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 8001496:	f7ff fc2d 	bl	8000cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800149a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800149e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80014a0:	f107 0320 	add.w	r3, r7, #32
 80014a4:	4619      	mov	r1, r3
 80014a6:	481a      	ldr	r0, [pc, #104]	; (8001510 <MX_TIM9_Init+0xd4>)
 80014a8:	f002 f936 	bl	8003718 <HAL_TIM_ConfigClockSource>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM9_Init+0x7a>
  {
    Error_Handler();
 80014b2:	f7ff fc1f 	bl	8000cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80014b6:	4816      	ldr	r0, [pc, #88]	; (8001510 <MX_TIM9_Init+0xd4>)
 80014b8:	f001 fd26 	bl	8002f08 <HAL_TIM_PWM_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 80014c2:	f7ff fc17 	bl	8000cf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014c6:	2360      	movs	r3, #96	; 0x60
 80014c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	2200      	movs	r2, #0
 80014da:	4619      	mov	r1, r3
 80014dc:	480c      	ldr	r0, [pc, #48]	; (8001510 <MX_TIM9_Init+0xd4>)
 80014de:	f002 f859 	bl	8003594 <HAL_TIM_PWM_ConfigChannel>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 80014e8:	f7ff fc04 	bl	8000cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	2204      	movs	r2, #4
 80014f0:	4619      	mov	r1, r3
 80014f2:	4807      	ldr	r0, [pc, #28]	; (8001510 <MX_TIM9_Init+0xd4>)
 80014f4:	f002 f84e 	bl	8003594 <HAL_TIM_PWM_ConfigChannel>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM9_Init+0xc6>
  {
    Error_Handler();
 80014fe:	f7ff fbf9 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001502:	4803      	ldr	r0, [pc, #12]	; (8001510 <MX_TIM9_Init+0xd4>)
 8001504:	f000 f9fe 	bl	8001904 <HAL_TIM_MspPostInit>

}
 8001508:	bf00      	nop
 800150a:	3730      	adds	r7, #48	; 0x30
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	2000023c 	.word	0x2000023c
 8001514:	40014000 	.word	0x40014000

08001518 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08c      	sub	sp, #48	; 0x30
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800151e:	f107 0320 	add.w	r3, r7, #32
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
 8001538:	611a      	str	r2, [r3, #16]
 800153a:	615a      	str	r2, [r3, #20]
 800153c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800153e:	4b2b      	ldr	r3, [pc, #172]	; (80015ec <MX_TIM12_Init+0xd4>)
 8001540:	4a2b      	ldr	r2, [pc, #172]	; (80015f0 <MX_TIM12_Init+0xd8>)
 8001542:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 840;
 8001544:	4b29      	ldr	r3, [pc, #164]	; (80015ec <MX_TIM12_Init+0xd4>)
 8001546:	f44f 7252 	mov.w	r2, #840	; 0x348
 800154a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154c:	4b27      	ldr	r3, [pc, #156]	; (80015ec <MX_TIM12_Init+0xd4>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000;
 8001552:	4b26      	ldr	r3, [pc, #152]	; (80015ec <MX_TIM12_Init+0xd4>)
 8001554:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001558:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800155a:	4b24      	ldr	r3, [pc, #144]	; (80015ec <MX_TIM12_Init+0xd4>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001560:	4b22      	ldr	r3, [pc, #136]	; (80015ec <MX_TIM12_Init+0xd4>)
 8001562:	2200      	movs	r2, #0
 8001564:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001566:	4821      	ldr	r0, [pc, #132]	; (80015ec <MX_TIM12_Init+0xd4>)
 8001568:	f001 fc0e 	bl	8002d88 <HAL_TIM_Base_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 8001572:	f7ff fbbf 	bl	8000cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800157a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800157c:	f107 0320 	add.w	r3, r7, #32
 8001580:	4619      	mov	r1, r3
 8001582:	481a      	ldr	r0, [pc, #104]	; (80015ec <MX_TIM12_Init+0xd4>)
 8001584:	f002 f8c8 	bl	8003718 <HAL_TIM_ConfigClockSource>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 800158e:	f7ff fbb1 	bl	8000cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001592:	4816      	ldr	r0, [pc, #88]	; (80015ec <MX_TIM12_Init+0xd4>)
 8001594:	f001 fcb8 	bl	8002f08 <HAL_TIM_PWM_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 800159e:	f7ff fba9 	bl	8000cf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a2:	2360      	movs	r3, #96	; 0x60
 80015a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	2200      	movs	r2, #0
 80015b6:	4619      	mov	r1, r3
 80015b8:	480c      	ldr	r0, [pc, #48]	; (80015ec <MX_TIM12_Init+0xd4>)
 80015ba:	f001 ffeb 	bl	8003594 <HAL_TIM_PWM_ConfigChannel>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 80015c4:	f7ff fb96 	bl	8000cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	2204      	movs	r2, #4
 80015cc:	4619      	mov	r1, r3
 80015ce:	4807      	ldr	r0, [pc, #28]	; (80015ec <MX_TIM12_Init+0xd4>)
 80015d0:	f001 ffe0 	bl	8003594 <HAL_TIM_PWM_ConfigChannel>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM12_Init+0xc6>
  {
    Error_Handler();
 80015da:	f7ff fb8b 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80015de:	4803      	ldr	r0, [pc, #12]	; (80015ec <MX_TIM12_Init+0xd4>)
 80015e0:	f000 f990 	bl	8001904 <HAL_TIM_MspPostInit>

}
 80015e4:	bf00      	nop
 80015e6:	3730      	adds	r7, #48	; 0x30
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000284 	.word	0x20000284
 80015f0:	40001800 	.word	0x40001800

080015f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b087      	sub	sp, #28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a29      	ldr	r2, [pc, #164]	; (80016a8 <HAL_TIM_Base_MspInit+0xb4>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d10e      	bne.n	8001624 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	4b28      	ldr	r3, [pc, #160]	; (80016ac <HAL_TIM_Base_MspInit+0xb8>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	4a27      	ldr	r2, [pc, #156]	; (80016ac <HAL_TIM_Base_MspInit+0xb8>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6453      	str	r3, [r2, #68]	; 0x44
 8001616:	4b25      	ldr	r3, [pc, #148]	; (80016ac <HAL_TIM_Base_MspInit+0xb8>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001622:	e03a      	b.n	800169a <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM8)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a21      	ldr	r2, [pc, #132]	; (80016b0 <HAL_TIM_Base_MspInit+0xbc>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d10e      	bne.n	800164c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <HAL_TIM_Base_MspInit+0xb8>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	4a1d      	ldr	r2, [pc, #116]	; (80016ac <HAL_TIM_Base_MspInit+0xb8>)
 8001638:	f043 0302 	orr.w	r3, r3, #2
 800163c:	6453      	str	r3, [r2, #68]	; 0x44
 800163e:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <HAL_TIM_Base_MspInit+0xb8>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	693b      	ldr	r3, [r7, #16]
}
 800164a:	e026      	b.n	800169a <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM9)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a18      	ldr	r2, [pc, #96]	; (80016b4 <HAL_TIM_Base_MspInit+0xc0>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d10e      	bne.n	8001674 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4b14      	ldr	r3, [pc, #80]	; (80016ac <HAL_TIM_Base_MspInit+0xb8>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	4a13      	ldr	r2, [pc, #76]	; (80016ac <HAL_TIM_Base_MspInit+0xb8>)
 8001660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001664:	6453      	str	r3, [r2, #68]	; 0x44
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <HAL_TIM_Base_MspInit+0xb8>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
}
 8001672:	e012      	b.n	800169a <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM12)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0f      	ldr	r2, [pc, #60]	; (80016b8 <HAL_TIM_Base_MspInit+0xc4>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d10d      	bne.n	800169a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <HAL_TIM_Base_MspInit+0xb8>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	4a09      	ldr	r2, [pc, #36]	; (80016ac <HAL_TIM_Base_MspInit+0xb8>)
 8001688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800168c:	6413      	str	r3, [r2, #64]	; 0x40
 800168e:	4b07      	ldr	r3, [pc, #28]	; (80016ac <HAL_TIM_Base_MspInit+0xb8>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
}
 800169a:	bf00      	nop
 800169c:	371c      	adds	r7, #28
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40010000 	.word	0x40010000
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40010400 	.word	0x40010400
 80016b4:	40014000 	.word	0x40014000
 80016b8:	40001800 	.word	0x40001800

080016bc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b090      	sub	sp, #64	; 0x40
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016dc:	d152      	bne.n	8001784 <HAL_TIM_Encoder_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80016e2:	4b81      	ldr	r3, [pc, #516]	; (80018e8 <HAL_TIM_Encoder_MspInit+0x22c>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	4a80      	ldr	r2, [pc, #512]	; (80018e8 <HAL_TIM_Encoder_MspInit+0x22c>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6413      	str	r3, [r2, #64]	; 0x40
 80016ee:	4b7e      	ldr	r3, [pc, #504]	; (80018e8 <HAL_TIM_Encoder_MspInit+0x22c>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80016f8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
 80016fe:	4b7a      	ldr	r3, [pc, #488]	; (80018e8 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4a79      	ldr	r2, [pc, #484]	; (80018e8 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b77      	ldr	r3, [pc, #476]	; (80018e8 <HAL_TIM_Encoder_MspInit+0x22c>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	623b      	str	r3, [r7, #32]
 800171a:	4b73      	ldr	r3, [pc, #460]	; (80018e8 <HAL_TIM_Encoder_MspInit+0x22c>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a72      	ldr	r2, [pc, #456]	; (80018e8 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b70      	ldr	r3, [pc, #448]	; (80018e8 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	623b      	str	r3, [r7, #32]
 8001730:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC3_T_Pin;
 8001732:	2320      	movs	r3, #32
 8001734:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001736:	2302      	movs	r3, #2
 8001738:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173e:	2300      	movs	r3, #0
 8001740:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001742:	2301      	movs	r3, #1
 8001744:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC3_T_GPIO_Port, &GPIO_InitStruct);
 8001746:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800174a:	4619      	mov	r1, r3
 800174c:	4867      	ldr	r0, [pc, #412]	; (80018ec <HAL_TIM_Encoder_MspInit+0x230>)
 800174e:	f000 fcb5 	bl	80020bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC3_R_Pin;
 8001752:	2308      	movs	r3, #8
 8001754:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001762:	2301      	movs	r3, #1
 8001764:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC3_R_GPIO_Port, &GPIO_InitStruct);
 8001766:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800176a:	4619      	mov	r1, r3
 800176c:	4860      	ldr	r0, [pc, #384]	; (80018f0 <HAL_TIM_Encoder_MspInit+0x234>)
 800176e:	f000 fca5 	bl	80020bc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2100      	movs	r1, #0
 8001776:	201c      	movs	r0, #28
 8001778:	f000 fc69 	bl	800204e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800177c:	201c      	movs	r0, #28
 800177e:	f000 fc82 	bl	8002086 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001782:	e0ad      	b.n	80018e0 <HAL_TIM_Encoder_MspInit+0x224>
  else if(tim_encoderHandle->Instance==TIM3)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a5a      	ldr	r2, [pc, #360]	; (80018f4 <HAL_TIM_Encoder_MspInit+0x238>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d134      	bne.n	80017f8 <HAL_TIM_Encoder_MspInit+0x13c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
 8001792:	4b55      	ldr	r3, [pc, #340]	; (80018e8 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	4a54      	ldr	r2, [pc, #336]	; (80018e8 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	6413      	str	r3, [r2, #64]	; 0x40
 800179e:	4b52      	ldr	r3, [pc, #328]	; (80018e8 <HAL_TIM_Encoder_MspInit+0x22c>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	61fb      	str	r3, [r7, #28]
 80017a8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	61bb      	str	r3, [r7, #24]
 80017ae:	4b4e      	ldr	r3, [pc, #312]	; (80018e8 <HAL_TIM_Encoder_MspInit+0x22c>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a4d      	ldr	r2, [pc, #308]	; (80018e8 <HAL_TIM_Encoder_MspInit+0x22c>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b4b      	ldr	r3, [pc, #300]	; (80018e8 <HAL_TIM_Encoder_MspInit+0x22c>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	61bb      	str	r3, [r7, #24]
 80017c4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENC1_T_Pin|ENC1_R_Pin;
 80017c6:	23c0      	movs	r3, #192	; 0xc0
 80017c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ca:	2302      	movs	r3, #2
 80017cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d2:	2300      	movs	r3, #0
 80017d4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017d6:	2302      	movs	r3, #2
 80017d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017de:	4619      	mov	r1, r3
 80017e0:	4842      	ldr	r0, [pc, #264]	; (80018ec <HAL_TIM_Encoder_MspInit+0x230>)
 80017e2:	f000 fc6b 	bl	80020bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2100      	movs	r1, #0
 80017ea:	201d      	movs	r0, #29
 80017ec:	f000 fc2f 	bl	800204e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017f0:	201d      	movs	r0, #29
 80017f2:	f000 fc48 	bl	8002086 <HAL_NVIC_EnableIRQ>
}
 80017f6:	e073      	b.n	80018e0 <HAL_TIM_Encoder_MspInit+0x224>
  else if(tim_encoderHandle->Instance==TIM4)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a3e      	ldr	r2, [pc, #248]	; (80018f8 <HAL_TIM_Encoder_MspInit+0x23c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d135      	bne.n	800186e <HAL_TIM_Encoder_MspInit+0x1b2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	4b38      	ldr	r3, [pc, #224]	; (80018e8 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	4a37      	ldr	r2, [pc, #220]	; (80018e8 <HAL_TIM_Encoder_MspInit+0x22c>)
 800180c:	f043 0304 	orr.w	r3, r3, #4
 8001810:	6413      	str	r3, [r2, #64]	; 0x40
 8001812:	4b35      	ldr	r3, [pc, #212]	; (80018e8 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	4b31      	ldr	r3, [pc, #196]	; (80018e8 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a30      	ldr	r2, [pc, #192]	; (80018e8 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001828:	f043 0308 	orr.w	r3, r3, #8
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b2e      	ldr	r3, [pc, #184]	; (80018e8 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC2_T_Pin|ENC2_R_Pin;
 800183a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	2302      	movs	r3, #2
 8001842:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	2300      	movs	r3, #0
 800184a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800184c:	2302      	movs	r3, #2
 800184e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001850:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001854:	4619      	mov	r1, r3
 8001856:	4829      	ldr	r0, [pc, #164]	; (80018fc <HAL_TIM_Encoder_MspInit+0x240>)
 8001858:	f000 fc30 	bl	80020bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800185c:	2200      	movs	r2, #0
 800185e:	2100      	movs	r1, #0
 8001860:	201e      	movs	r0, #30
 8001862:	f000 fbf4 	bl	800204e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001866:	201e      	movs	r0, #30
 8001868:	f000 fc0d 	bl	8002086 <HAL_NVIC_EnableIRQ>
}
 800186c:	e038      	b.n	80018e0 <HAL_TIM_Encoder_MspInit+0x224>
  else if(tim_encoderHandle->Instance==TIM5)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a23      	ldr	r2, [pc, #140]	; (8001900 <HAL_TIM_Encoder_MspInit+0x244>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d133      	bne.n	80018e0 <HAL_TIM_Encoder_MspInit+0x224>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <HAL_TIM_Encoder_MspInit+0x22c>)
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	4a19      	ldr	r2, [pc, #100]	; (80018e8 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001882:	f043 0308 	orr.w	r3, r3, #8
 8001886:	6413      	str	r3, [r2, #64]	; 0x40
 8001888:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <HAL_TIM_Encoder_MspInit+0x22c>)
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	f003 0308 	and.w	r3, r3, #8
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001894:	2300      	movs	r3, #0
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <HAL_TIM_Encoder_MspInit+0x22c>)
 800189a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189c:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <HAL_TIM_Encoder_MspInit+0x22c>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	6313      	str	r3, [r2, #48]	; 0x30
 80018a4:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <HAL_TIM_Encoder_MspInit+0x22c>)
 80018a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC0_T_Pin|ENC0_R_Pin;
 80018b0:	2303      	movs	r3, #3
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b4:	2302      	movs	r3, #2
 80018b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2300      	movs	r3, #0
 80018be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80018c0:	2302      	movs	r3, #2
 80018c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c8:	4619      	mov	r1, r3
 80018ca:	4808      	ldr	r0, [pc, #32]	; (80018ec <HAL_TIM_Encoder_MspInit+0x230>)
 80018cc:	f000 fbf6 	bl	80020bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80018d0:	2200      	movs	r2, #0
 80018d2:	2100      	movs	r1, #0
 80018d4:	2032      	movs	r0, #50	; 0x32
 80018d6:	f000 fbba 	bl	800204e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80018da:	2032      	movs	r0, #50	; 0x32
 80018dc:	f000 fbd3 	bl	8002086 <HAL_NVIC_EnableIRQ>
}
 80018e0:	bf00      	nop
 80018e2:	3740      	adds	r7, #64	; 0x40
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40020000 	.word	0x40020000
 80018f0:	40020400 	.word	0x40020400
 80018f4:	40000400 	.word	0x40000400
 80018f8:	40000800 	.word	0x40000800
 80018fc:	40020c00 	.word	0x40020c00
 8001900:	40000c00 	.word	0x40000c00

08001904 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08c      	sub	sp, #48	; 0x30
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190c:	f107 031c 	add.w	r3, r7, #28
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a49      	ldr	r2, [pc, #292]	; (8001a48 <HAL_TIM_MspPostInit+0x144>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d11f      	bne.n	8001966 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	61bb      	str	r3, [r7, #24]
 800192a:	4b48      	ldr	r3, [pc, #288]	; (8001a4c <HAL_TIM_MspPostInit+0x148>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4a47      	ldr	r2, [pc, #284]	; (8001a4c <HAL_TIM_MspPostInit+0x148>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4b45      	ldr	r3, [pc, #276]	; (8001a4c <HAL_TIM_MspPostInit+0x148>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	61bb      	str	r3, [r7, #24]
 8001940:	69bb      	ldr	r3, [r7, #24]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR1_T_Pin|MOTOR1_R_Pin|MOTOR0_T_Pin|MOTOR0_R_Pin;
 8001942:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001948:	2302      	movs	r3, #2
 800194a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001950:	2300      	movs	r3, #0
 8001952:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001954:	2301      	movs	r3, #1
 8001956:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001958:	f107 031c 	add.w	r3, r7, #28
 800195c:	4619      	mov	r1, r3
 800195e:	483c      	ldr	r0, [pc, #240]	; (8001a50 <HAL_TIM_MspPostInit+0x14c>)
 8001960:	f000 fbac 	bl	80020bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001964:	e06c      	b.n	8001a40 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM8)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a3a      	ldr	r2, [pc, #232]	; (8001a54 <HAL_TIM_MspPostInit+0x150>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d11f      	bne.n	80019b0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	4b35      	ldr	r3, [pc, #212]	; (8001a4c <HAL_TIM_MspPostInit+0x148>)
 8001976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001978:	4a34      	ldr	r2, [pc, #208]	; (8001a4c <HAL_TIM_MspPostInit+0x148>)
 800197a:	f043 0304 	orr.w	r3, r3, #4
 800197e:	6313      	str	r3, [r2, #48]	; 0x30
 8001980:	4b32      	ldr	r3, [pc, #200]	; (8001a4c <HAL_TIM_MspPostInit+0x148>)
 8001982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MOTOR3_T_Pin|MOTOR3_R_Pin|MOTOR2_T_Pin|MOTOR2_R_Pin;
 800198c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001992:	2302      	movs	r3, #2
 8001994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199a:	2300      	movs	r3, #0
 800199c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800199e:	2303      	movs	r3, #3
 80019a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a2:	f107 031c 	add.w	r3, r7, #28
 80019a6:	4619      	mov	r1, r3
 80019a8:	482b      	ldr	r0, [pc, #172]	; (8001a58 <HAL_TIM_MspPostInit+0x154>)
 80019aa:	f000 fb87 	bl	80020bc <HAL_GPIO_Init>
}
 80019ae:	e047      	b.n	8001a40 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM9)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a29      	ldr	r2, [pc, #164]	; (8001a5c <HAL_TIM_MspPostInit+0x158>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d11e      	bne.n	80019f8 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <HAL_TIM_MspPostInit+0x148>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a22      	ldr	r2, [pc, #136]	; (8001a4c <HAL_TIM_MspPostInit+0x148>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b20      	ldr	r3, [pc, #128]	; (8001a4c <HAL_TIM_MspPostInit+0x148>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MOTOR5_T_Pin|MOTOR5_R_Pin;
 80019d6:	230c      	movs	r3, #12
 80019d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019da:	2302      	movs	r3, #2
 80019dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e2:	2300      	movs	r3, #0
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80019e6:	2303      	movs	r3, #3
 80019e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ea:	f107 031c 	add.w	r3, r7, #28
 80019ee:	4619      	mov	r1, r3
 80019f0:	4817      	ldr	r0, [pc, #92]	; (8001a50 <HAL_TIM_MspPostInit+0x14c>)
 80019f2:	f000 fb63 	bl	80020bc <HAL_GPIO_Init>
}
 80019f6:	e023      	b.n	8001a40 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM12)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a18      	ldr	r2, [pc, #96]	; (8001a60 <HAL_TIM_MspPostInit+0x15c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d11e      	bne.n	8001a40 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <HAL_TIM_MspPostInit+0x148>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a10      	ldr	r2, [pc, #64]	; (8001a4c <HAL_TIM_MspPostInit+0x148>)
 8001a0c:	f043 0302 	orr.w	r3, r3, #2
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <HAL_TIM_MspPostInit+0x148>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR4_T_Pin|MOTOR4_R_Pin;
 8001a1e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a24:	2302      	movs	r3, #2
 8001a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001a30:	2309      	movs	r3, #9
 8001a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a34:	f107 031c 	add.w	r3, r7, #28
 8001a38:	4619      	mov	r1, r3
 8001a3a:	480a      	ldr	r0, [pc, #40]	; (8001a64 <HAL_TIM_MspPostInit+0x160>)
 8001a3c:	f000 fb3e 	bl	80020bc <HAL_GPIO_Init>
}
 8001a40:	bf00      	nop
 8001a42:	3730      	adds	r7, #48	; 0x30
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40010000 	.word	0x40010000
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40020000 	.word	0x40020000
 8001a54:	40010400 	.word	0x40010400
 8001a58:	40020800 	.word	0x40020800
 8001a5c:	40014000 	.word	0x40014000
 8001a60:	40001800 	.word	0x40001800
 8001a64:	40020400 	.word	0x40020400

08001a68 <MX_UART4_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <MX_UART4_Init+0x50>)
 8001a6e:	4a13      	ldr	r2, [pc, #76]	; (8001abc <MX_UART4_Init+0x54>)
 8001a70:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001a72:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <MX_UART4_Init+0x50>)
 8001a74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a78:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <MX_UART4_Init+0x50>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001a80:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <MX_UART4_Init+0x50>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001a86:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <MX_UART4_Init+0x50>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001a8c:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <MX_UART4_Init+0x50>)
 8001a8e:	220c      	movs	r2, #12
 8001a90:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <MX_UART4_Init+0x50>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a98:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <MX_UART4_Init+0x50>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	61da      	str	r2, [r3, #28]
  if (HAL_MultiProcessor_Init(&huart4, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <MX_UART4_Init+0x50>)
 8001aa4:	f002 fb26 	bl	80040f4 <HAL_MultiProcessor_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_UART4_Init+0x4a>
  {
    Error_Handler();
 8001aae:	f7ff f921 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200002cc 	.word	0x200002cc
 8001abc:	40004c00 	.word	0x40004c00

08001ac0 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001ac4:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <MX_UART5_Init+0x50>)
 8001ac6:	4a13      	ldr	r2, [pc, #76]	; (8001b14 <MX_UART5_Init+0x54>)
 8001ac8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001aca:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <MX_UART5_Init+0x50>)
 8001acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ad0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <MX_UART5_Init+0x50>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001ad8:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <MX_UART5_Init+0x50>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001ade:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <MX_UART5_Init+0x50>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001ae4:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <MX_UART5_Init+0x50>)
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aea:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <MX_UART5_Init+0x50>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af0:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <MX_UART5_Init+0x50>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	61da      	str	r2, [r3, #28]
  if (HAL_MultiProcessor_Init(&huart5, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8001af6:	2200      	movs	r2, #0
 8001af8:	2100      	movs	r1, #0
 8001afa:	4805      	ldr	r0, [pc, #20]	; (8001b10 <MX_UART5_Init+0x50>)
 8001afc:	f002 fafa 	bl	80040f4 <HAL_MultiProcessor_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_UART5_Init+0x4a>
  {
    Error_Handler();
 8001b06:	f7ff f8f5 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000314 	.word	0x20000314
 8001b14:	40005000 	.word	0x40005000

08001b18 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <MX_USART3_UART_Init+0x50>)
 8001b1e:	4a13      	ldr	r2, [pc, #76]	; (8001b6c <MX_USART3_UART_Init+0x54>)
 8001b20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b22:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <MX_USART3_UART_Init+0x50>)
 8001b24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <MX_USART3_UART_Init+0x50>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b30:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <MX_USART3_UART_Init+0x50>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <MX_USART3_UART_Init+0x50>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <MX_USART3_UART_Init+0x50>)
 8001b3e:	220c      	movs	r2, #12
 8001b40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <MX_USART3_UART_Init+0x50>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b48:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <MX_USART3_UART_Init+0x50>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	61da      	str	r2, [r3, #28]
  if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2100      	movs	r1, #0
 8001b52:	4805      	ldr	r0, [pc, #20]	; (8001b68 <MX_USART3_UART_Init+0x50>)
 8001b54:	f002 face 	bl	80040f4 <HAL_MultiProcessor_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_USART3_UART_Init+0x4a>
  {
    Error_Handler();
 8001b5e:	f7ff f8c9 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	2000035c 	.word	0x2000035c
 8001b6c:	40004800 	.word	0x40004800

08001b70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08e      	sub	sp, #56	; 0x38
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a5b      	ldr	r2, [pc, #364]	; (8001cfc <HAL_UART_MspInit+0x18c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d12d      	bne.n	8001bee <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	623b      	str	r3, [r7, #32]
 8001b96:	4b5a      	ldr	r3, [pc, #360]	; (8001d00 <HAL_UART_MspInit+0x190>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	4a59      	ldr	r2, [pc, #356]	; (8001d00 <HAL_UART_MspInit+0x190>)
 8001b9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba2:	4b57      	ldr	r3, [pc, #348]	; (8001d00 <HAL_UART_MspInit+0x190>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001baa:	623b      	str	r3, [r7, #32]
 8001bac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
 8001bb2:	4b53      	ldr	r3, [pc, #332]	; (8001d00 <HAL_UART_MspInit+0x190>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	4a52      	ldr	r2, [pc, #328]	; (8001d00 <HAL_UART_MspInit+0x190>)
 8001bb8:	f043 0304 	orr.w	r3, r3, #4
 8001bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbe:	4b50      	ldr	r3, [pc, #320]	; (8001d00 <HAL_UART_MspInit+0x190>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	61fb      	str	r3, [r7, #28]
 8001bc8:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = SERIAL0_T_Pin|SERIAL0_R_Pin;
 8001bca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001bdc:	2308      	movs	r3, #8
 8001bde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be4:	4619      	mov	r1, r3
 8001be6:	4847      	ldr	r0, [pc, #284]	; (8001d04 <HAL_UART_MspInit+0x194>)
 8001be8:	f000 fa68 	bl	80020bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001bec:	e082      	b.n	8001cf4 <HAL_UART_MspInit+0x184>
  else if(uartHandle->Instance==UART5)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a45      	ldr	r2, [pc, #276]	; (8001d08 <HAL_UART_MspInit+0x198>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d14b      	bne.n	8001c90 <HAL_UART_MspInit+0x120>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61bb      	str	r3, [r7, #24]
 8001bfc:	4b40      	ldr	r3, [pc, #256]	; (8001d00 <HAL_UART_MspInit+0x190>)
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	4a3f      	ldr	r2, [pc, #252]	; (8001d00 <HAL_UART_MspInit+0x190>)
 8001c02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c06:	6413      	str	r3, [r2, #64]	; 0x40
 8001c08:	4b3d      	ldr	r3, [pc, #244]	; (8001d00 <HAL_UART_MspInit+0x190>)
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c10:	61bb      	str	r3, [r7, #24]
 8001c12:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	4b39      	ldr	r3, [pc, #228]	; (8001d00 <HAL_UART_MspInit+0x190>)
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	4a38      	ldr	r2, [pc, #224]	; (8001d00 <HAL_UART_MspInit+0x190>)
 8001c1e:	f043 0304 	orr.w	r3, r3, #4
 8001c22:	6313      	str	r3, [r2, #48]	; 0x30
 8001c24:	4b36      	ldr	r3, [pc, #216]	; (8001d00 <HAL_UART_MspInit+0x190>)
 8001c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c30:	2300      	movs	r3, #0
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	4b32      	ldr	r3, [pc, #200]	; (8001d00 <HAL_UART_MspInit+0x190>)
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c38:	4a31      	ldr	r2, [pc, #196]	; (8001d00 <HAL_UART_MspInit+0x190>)
 8001c3a:	f043 0308 	orr.w	r3, r3, #8
 8001c3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c40:	4b2f      	ldr	r3, [pc, #188]	; (8001d00 <HAL_UART_MspInit+0x190>)
 8001c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERIAL2_T_Pin;
 8001c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	2302      	movs	r3, #2
 8001c54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001c5e:	2308      	movs	r3, #8
 8001c60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SERIAL2_T_GPIO_Port, &GPIO_InitStruct);
 8001c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c66:	4619      	mov	r1, r3
 8001c68:	4826      	ldr	r0, [pc, #152]	; (8001d04 <HAL_UART_MspInit+0x194>)
 8001c6a:	f000 fa27 	bl	80020bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SERIAL2_R_Pin;
 8001c6e:	2304      	movs	r3, #4
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c72:	2302      	movs	r3, #2
 8001c74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001c7e:	2308      	movs	r3, #8
 8001c80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SERIAL2_R_GPIO_Port, &GPIO_InitStruct);
 8001c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c86:	4619      	mov	r1, r3
 8001c88:	4820      	ldr	r0, [pc, #128]	; (8001d0c <HAL_UART_MspInit+0x19c>)
 8001c8a:	f000 fa17 	bl	80020bc <HAL_GPIO_Init>
}
 8001c8e:	e031      	b.n	8001cf4 <HAL_UART_MspInit+0x184>
  else if(uartHandle->Instance==USART3)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a1e      	ldr	r2, [pc, #120]	; (8001d10 <HAL_UART_MspInit+0x1a0>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d12c      	bne.n	8001cf4 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <HAL_UART_MspInit+0x190>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	4a17      	ldr	r2, [pc, #92]	; (8001d00 <HAL_UART_MspInit+0x190>)
 8001ca4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8001caa:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <HAL_UART_MspInit+0x190>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <HAL_UART_MspInit+0x190>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	4a10      	ldr	r2, [pc, #64]	; (8001d00 <HAL_UART_MspInit+0x190>)
 8001cc0:	f043 0302 	orr.w	r3, r3, #2
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <HAL_UART_MspInit+0x190>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SERIAL1_T_Pin|SERIAL1_R_Pin;
 8001cd2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ce4:	2307      	movs	r3, #7
 8001ce6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cec:	4619      	mov	r1, r3
 8001cee:	4809      	ldr	r0, [pc, #36]	; (8001d14 <HAL_UART_MspInit+0x1a4>)
 8001cf0:	f000 f9e4 	bl	80020bc <HAL_GPIO_Init>
}
 8001cf4:	bf00      	nop
 8001cf6:	3738      	adds	r7, #56	; 0x38
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40004c00 	.word	0x40004c00
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40020800 	.word	0x40020800
 8001d08:	40005000 	.word	0x40005000
 8001d0c:	40020c00 	.word	0x40020c00
 8001d10:	40004800 	.word	0x40004800
 8001d14:	40020400 	.word	0x40020400

08001d18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d50 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d1c:	f7ff f8a0 	bl	8000e60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d20:	480c      	ldr	r0, [pc, #48]	; (8001d54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d22:	490d      	ldr	r1, [pc, #52]	; (8001d58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d24:	4a0d      	ldr	r2, [pc, #52]	; (8001d5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d28:	e002      	b.n	8001d30 <LoopCopyDataInit>

08001d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d2e:	3304      	adds	r3, #4

08001d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d34:	d3f9      	bcc.n	8001d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d36:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d38:	4c0a      	ldr	r4, [pc, #40]	; (8001d64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d3c:	e001      	b.n	8001d42 <LoopFillZerobss>

08001d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d40:	3204      	adds	r2, #4

08001d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d44:	d3fb      	bcc.n	8001d3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d46:	f002 fe31 	bl	80049ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d4a:	f7fe fd57 	bl	80007fc <main>
  bx  lr    
 8001d4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d58:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001d5c:	0800536c 	.word	0x0800536c
  ldr r2, =_sbss
 8001d60:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001d64:	200004f0 	.word	0x200004f0

08001d68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d68:	e7fe      	b.n	8001d68 <ADC_IRQHandler>
	...

08001d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d70:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <HAL_Init+0x40>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0d      	ldr	r2, [pc, #52]	; (8001dac <HAL_Init+0x40>)
 8001d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <HAL_Init+0x40>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <HAL_Init+0x40>)
 8001d82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <HAL_Init+0x40>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a07      	ldr	r2, [pc, #28]	; (8001dac <HAL_Init+0x40>)
 8001d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d94:	2003      	movs	r0, #3
 8001d96:	f000 f94f 	bl	8002038 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d9a:	200f      	movs	r0, #15
 8001d9c:	f000 f808 	bl	8001db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001da0:	f7fe ffae 	bl	8000d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40023c00 	.word	0x40023c00

08001db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001db8:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_InitTick+0x54>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <HAL_InitTick+0x58>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 f967 	bl	80020a2 <HAL_SYSTICK_Config>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e00e      	b.n	8001dfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b0f      	cmp	r3, #15
 8001de2:	d80a      	bhi.n	8001dfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de4:	2200      	movs	r2, #0
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dec:	f000 f92f 	bl	800204e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df0:	4a06      	ldr	r2, [pc, #24]	; (8001e0c <HAL_InitTick+0x5c>)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	e000      	b.n	8001dfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000000 	.word	0x20000000
 8001e08:	20000008 	.word	0x20000008
 8001e0c:	20000004 	.word	0x20000004

08001e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_IncTick+0x20>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_IncTick+0x24>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <HAL_IncTick+0x24>)
 8001e22:	6013      	str	r3, [r2, #0]
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000008 	.word	0x20000008
 8001e34:	200003a4 	.word	0x200003a4

08001e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <HAL_GetTick+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	200003a4 	.word	0x200003a4

08001e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e58:	f7ff ffee 	bl	8001e38 <HAL_GetTick>
 8001e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e68:	d005      	beq.n	8001e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <HAL_Delay+0x44>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4413      	add	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e76:	bf00      	nop
 8001e78:	f7ff ffde 	bl	8001e38 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d8f7      	bhi.n	8001e78 <HAL_Delay+0x28>
  {
  }
}
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000008 	.word	0x20000008

08001e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <__NVIC_SetPriorityGrouping+0x44>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eca:	4a04      	ldr	r2, [pc, #16]	; (8001edc <__NVIC_SetPriorityGrouping+0x44>)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	60d3      	str	r3, [r2, #12]
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee4:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	0a1b      	lsrs	r3, r3, #8
 8001eea:	f003 0307 	and.w	r3, r3, #7
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	db0b      	blt.n	8001f26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	f003 021f 	and.w	r2, r3, #31
 8001f14:	4907      	ldr	r1, [pc, #28]	; (8001f34 <__NVIC_EnableIRQ+0x38>)
 8001f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1a:	095b      	lsrs	r3, r3, #5
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	e000e100 	.word	0xe000e100

08001f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	6039      	str	r1, [r7, #0]
 8001f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	db0a      	blt.n	8001f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	490c      	ldr	r1, [pc, #48]	; (8001f84 <__NVIC_SetPriority+0x4c>)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	0112      	lsls	r2, r2, #4
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f60:	e00a      	b.n	8001f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4908      	ldr	r1, [pc, #32]	; (8001f88 <__NVIC_SetPriority+0x50>)
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	3b04      	subs	r3, #4
 8001f70:	0112      	lsls	r2, r2, #4
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	440b      	add	r3, r1
 8001f76:	761a      	strb	r2, [r3, #24]
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	e000e100 	.word	0xe000e100
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	; 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f1c3 0307 	rsb	r3, r3, #7
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	bf28      	it	cs
 8001faa:	2304      	movcs	r3, #4
 8001fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	2b06      	cmp	r3, #6
 8001fb4:	d902      	bls.n	8001fbc <NVIC_EncodePriority+0x30>
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3b03      	subs	r3, #3
 8001fba:	e000      	b.n	8001fbe <NVIC_EncodePriority+0x32>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43da      	mvns	r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	401a      	ands	r2, r3
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	fa01 f303 	lsl.w	r3, r1, r3
 8001fde:	43d9      	mvns	r1, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	4313      	orrs	r3, r2
         );
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3724      	adds	r7, #36	; 0x24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
	...

08001ff4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002004:	d301      	bcc.n	800200a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002006:	2301      	movs	r3, #1
 8002008:	e00f      	b.n	800202a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800200a:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <SysTick_Config+0x40>)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3b01      	subs	r3, #1
 8002010:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002012:	210f      	movs	r1, #15
 8002014:	f04f 30ff 	mov.w	r0, #4294967295
 8002018:	f7ff ff8e 	bl	8001f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800201c:	4b05      	ldr	r3, [pc, #20]	; (8002034 <SysTick_Config+0x40>)
 800201e:	2200      	movs	r2, #0
 8002020:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002022:	4b04      	ldr	r3, [pc, #16]	; (8002034 <SysTick_Config+0x40>)
 8002024:	2207      	movs	r2, #7
 8002026:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	e000e010 	.word	0xe000e010

08002038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff ff29 	bl	8001e98 <__NVIC_SetPriorityGrouping>
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800204e:	b580      	push	{r7, lr}
 8002050:	b086      	sub	sp, #24
 8002052:	af00      	add	r7, sp, #0
 8002054:	4603      	mov	r3, r0
 8002056:	60b9      	str	r1, [r7, #8]
 8002058:	607a      	str	r2, [r7, #4]
 800205a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002060:	f7ff ff3e 	bl	8001ee0 <__NVIC_GetPriorityGrouping>
 8002064:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	68b9      	ldr	r1, [r7, #8]
 800206a:	6978      	ldr	r0, [r7, #20]
 800206c:	f7ff ff8e 	bl	8001f8c <NVIC_EncodePriority>
 8002070:	4602      	mov	r2, r0
 8002072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002076:	4611      	mov	r1, r2
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ff5d 	bl	8001f38 <__NVIC_SetPriority>
}
 800207e:	bf00      	nop
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	4603      	mov	r3, r0
 800208e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff ff31 	bl	8001efc <__NVIC_EnableIRQ>
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff ffa2 	bl	8001ff4 <SysTick_Config>
 80020b0:	4603      	mov	r3, r0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020bc:	b480      	push	{r7}
 80020be:	b089      	sub	sp, #36	; 0x24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
 80020d6:	e16b      	b.n	80023b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020d8:	2201      	movs	r2, #1
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	4013      	ands	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	f040 815a 	bne.w	80023aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d005      	beq.n	800210e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800210a:	2b02      	cmp	r3, #2
 800210c:	d130      	bne.n	8002170 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	2203      	movs	r2, #3
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43db      	mvns	r3, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4013      	ands	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4313      	orrs	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002144:	2201      	movs	r2, #1
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	091b      	lsrs	r3, r3, #4
 800215a:	f003 0201 	and.w	r2, r3, #1
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4313      	orrs	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	2b03      	cmp	r3, #3
 800217a:	d017      	beq.n	80021ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	2203      	movs	r2, #3
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d123      	bne.n	8002200 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	08da      	lsrs	r2, r3, #3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3208      	adds	r2, #8
 80021c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	220f      	movs	r2, #15
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4013      	ands	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	08da      	lsrs	r2, r3, #3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3208      	adds	r2, #8
 80021fa:	69b9      	ldr	r1, [r7, #24]
 80021fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	2203      	movs	r2, #3
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 0203 	and.w	r2, r3, #3
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 80b4 	beq.w	80023aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	4b60      	ldr	r3, [pc, #384]	; (80023c8 <HAL_GPIO_Init+0x30c>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224a:	4a5f      	ldr	r2, [pc, #380]	; (80023c8 <HAL_GPIO_Init+0x30c>)
 800224c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002250:	6453      	str	r3, [r2, #68]	; 0x44
 8002252:	4b5d      	ldr	r3, [pc, #372]	; (80023c8 <HAL_GPIO_Init+0x30c>)
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800225e:	4a5b      	ldr	r2, [pc, #364]	; (80023cc <HAL_GPIO_Init+0x310>)
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	089b      	lsrs	r3, r3, #2
 8002264:	3302      	adds	r3, #2
 8002266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800226a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	220f      	movs	r2, #15
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a52      	ldr	r2, [pc, #328]	; (80023d0 <HAL_GPIO_Init+0x314>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d02b      	beq.n	80022e2 <HAL_GPIO_Init+0x226>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a51      	ldr	r2, [pc, #324]	; (80023d4 <HAL_GPIO_Init+0x318>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d025      	beq.n	80022de <HAL_GPIO_Init+0x222>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a50      	ldr	r2, [pc, #320]	; (80023d8 <HAL_GPIO_Init+0x31c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d01f      	beq.n	80022da <HAL_GPIO_Init+0x21e>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a4f      	ldr	r2, [pc, #316]	; (80023dc <HAL_GPIO_Init+0x320>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d019      	beq.n	80022d6 <HAL_GPIO_Init+0x21a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a4e      	ldr	r2, [pc, #312]	; (80023e0 <HAL_GPIO_Init+0x324>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d013      	beq.n	80022d2 <HAL_GPIO_Init+0x216>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a4d      	ldr	r2, [pc, #308]	; (80023e4 <HAL_GPIO_Init+0x328>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d00d      	beq.n	80022ce <HAL_GPIO_Init+0x212>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a4c      	ldr	r2, [pc, #304]	; (80023e8 <HAL_GPIO_Init+0x32c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d007      	beq.n	80022ca <HAL_GPIO_Init+0x20e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a4b      	ldr	r2, [pc, #300]	; (80023ec <HAL_GPIO_Init+0x330>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d101      	bne.n	80022c6 <HAL_GPIO_Init+0x20a>
 80022c2:	2307      	movs	r3, #7
 80022c4:	e00e      	b.n	80022e4 <HAL_GPIO_Init+0x228>
 80022c6:	2308      	movs	r3, #8
 80022c8:	e00c      	b.n	80022e4 <HAL_GPIO_Init+0x228>
 80022ca:	2306      	movs	r3, #6
 80022cc:	e00a      	b.n	80022e4 <HAL_GPIO_Init+0x228>
 80022ce:	2305      	movs	r3, #5
 80022d0:	e008      	b.n	80022e4 <HAL_GPIO_Init+0x228>
 80022d2:	2304      	movs	r3, #4
 80022d4:	e006      	b.n	80022e4 <HAL_GPIO_Init+0x228>
 80022d6:	2303      	movs	r3, #3
 80022d8:	e004      	b.n	80022e4 <HAL_GPIO_Init+0x228>
 80022da:	2302      	movs	r3, #2
 80022dc:	e002      	b.n	80022e4 <HAL_GPIO_Init+0x228>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <HAL_GPIO_Init+0x228>
 80022e2:	2300      	movs	r3, #0
 80022e4:	69fa      	ldr	r2, [r7, #28]
 80022e6:	f002 0203 	and.w	r2, r2, #3
 80022ea:	0092      	lsls	r2, r2, #2
 80022ec:	4093      	lsls	r3, r2
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022f4:	4935      	ldr	r1, [pc, #212]	; (80023cc <HAL_GPIO_Init+0x310>)
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	089b      	lsrs	r3, r3, #2
 80022fa:	3302      	adds	r3, #2
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002302:	4b3b      	ldr	r3, [pc, #236]	; (80023f0 <HAL_GPIO_Init+0x334>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	43db      	mvns	r3, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4013      	ands	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002326:	4a32      	ldr	r2, [pc, #200]	; (80023f0 <HAL_GPIO_Init+0x334>)
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800232c:	4b30      	ldr	r3, [pc, #192]	; (80023f0 <HAL_GPIO_Init+0x334>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002350:	4a27      	ldr	r2, [pc, #156]	; (80023f0 <HAL_GPIO_Init+0x334>)
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002356:	4b26      	ldr	r3, [pc, #152]	; (80023f0 <HAL_GPIO_Init+0x334>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	43db      	mvns	r3, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800237a:	4a1d      	ldr	r2, [pc, #116]	; (80023f0 <HAL_GPIO_Init+0x334>)
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002380:	4b1b      	ldr	r3, [pc, #108]	; (80023f0 <HAL_GPIO_Init+0x334>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023a4:	4a12      	ldr	r2, [pc, #72]	; (80023f0 <HAL_GPIO_Init+0x334>)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3301      	adds	r3, #1
 80023ae:	61fb      	str	r3, [r7, #28]
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	2b0f      	cmp	r3, #15
 80023b4:	f67f ae90 	bls.w	80020d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	3724      	adds	r7, #36	; 0x24
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40013800 	.word	0x40013800
 80023d0:	40020000 	.word	0x40020000
 80023d4:	40020400 	.word	0x40020400
 80023d8:	40020800 	.word	0x40020800
 80023dc:	40020c00 	.word	0x40020c00
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40021400 	.word	0x40021400
 80023e8:	40021800 	.word	0x40021800
 80023ec:	40021c00 	.word	0x40021c00
 80023f0:	40013c00 	.word	0x40013c00

080023f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	887b      	ldrh	r3, [r7, #2]
 8002406:	4013      	ands	r3, r2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d002      	beq.n	8002412 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800240c:	2301      	movs	r3, #1
 800240e:	73fb      	strb	r3, [r7, #15]
 8002410:	e001      	b.n	8002416 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002412:	2300      	movs	r3, #0
 8002414:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002416:	7bfb      	ldrb	r3, [r7, #15]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	807b      	strh	r3, [r7, #2]
 8002430:	4613      	mov	r3, r2
 8002432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002434:	787b      	ldrb	r3, [r7, #1]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800243a:	887a      	ldrh	r2, [r7, #2]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002440:	e003      	b.n	800244a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002442:	887b      	ldrh	r3, [r7, #2]
 8002444:	041a      	lsls	r2, r3, #16
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	619a      	str	r2, [r3, #24]
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e267      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d075      	beq.n	8002562 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002476:	4b88      	ldr	r3, [pc, #544]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 030c 	and.w	r3, r3, #12
 800247e:	2b04      	cmp	r3, #4
 8002480:	d00c      	beq.n	800249c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002482:	4b85      	ldr	r3, [pc, #532]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800248a:	2b08      	cmp	r3, #8
 800248c:	d112      	bne.n	80024b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800248e:	4b82      	ldr	r3, [pc, #520]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002496:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800249a:	d10b      	bne.n	80024b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800249c:	4b7e      	ldr	r3, [pc, #504]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d05b      	beq.n	8002560 <HAL_RCC_OscConfig+0x108>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d157      	bne.n	8002560 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e242      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024bc:	d106      	bne.n	80024cc <HAL_RCC_OscConfig+0x74>
 80024be:	4b76      	ldr	r3, [pc, #472]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a75      	ldr	r2, [pc, #468]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 80024c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	e01d      	b.n	8002508 <HAL_RCC_OscConfig+0xb0>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024d4:	d10c      	bne.n	80024f0 <HAL_RCC_OscConfig+0x98>
 80024d6:	4b70      	ldr	r3, [pc, #448]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a6f      	ldr	r2, [pc, #444]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 80024dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	4b6d      	ldr	r3, [pc, #436]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a6c      	ldr	r2, [pc, #432]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 80024e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	e00b      	b.n	8002508 <HAL_RCC_OscConfig+0xb0>
 80024f0:	4b69      	ldr	r3, [pc, #420]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a68      	ldr	r2, [pc, #416]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 80024f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024fa:	6013      	str	r3, [r2, #0]
 80024fc:	4b66      	ldr	r3, [pc, #408]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a65      	ldr	r2, [pc, #404]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 8002502:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002506:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d013      	beq.n	8002538 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7ff fc92 	bl	8001e38 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002518:	f7ff fc8e 	bl	8001e38 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b64      	cmp	r3, #100	; 0x64
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e207      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252a:	4b5b      	ldr	r3, [pc, #364]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0f0      	beq.n	8002518 <HAL_RCC_OscConfig+0xc0>
 8002536:	e014      	b.n	8002562 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002538:	f7ff fc7e 	bl	8001e38 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002540:	f7ff fc7a 	bl	8001e38 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b64      	cmp	r3, #100	; 0x64
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e1f3      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002552:	4b51      	ldr	r3, [pc, #324]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0xe8>
 800255e:	e000      	b.n	8002562 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d063      	beq.n	8002636 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800256e:	4b4a      	ldr	r3, [pc, #296]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 030c 	and.w	r3, r3, #12
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00b      	beq.n	8002592 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800257a:	4b47      	ldr	r3, [pc, #284]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002582:	2b08      	cmp	r3, #8
 8002584:	d11c      	bne.n	80025c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002586:	4b44      	ldr	r3, [pc, #272]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d116      	bne.n	80025c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002592:	4b41      	ldr	r3, [pc, #260]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d005      	beq.n	80025aa <HAL_RCC_OscConfig+0x152>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d001      	beq.n	80025aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e1c7      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025aa:	4b3b      	ldr	r3, [pc, #236]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	4937      	ldr	r1, [pc, #220]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025be:	e03a      	b.n	8002636 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d020      	beq.n	800260a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c8:	4b34      	ldr	r3, [pc, #208]	; (800269c <HAL_RCC_OscConfig+0x244>)
 80025ca:	2201      	movs	r2, #1
 80025cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ce:	f7ff fc33 	bl	8001e38 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025d6:	f7ff fc2f 	bl	8001e38 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e1a8      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e8:	4b2b      	ldr	r3, [pc, #172]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0f0      	beq.n	80025d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f4:	4b28      	ldr	r3, [pc, #160]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	4925      	ldr	r1, [pc, #148]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 8002604:	4313      	orrs	r3, r2
 8002606:	600b      	str	r3, [r1, #0]
 8002608:	e015      	b.n	8002636 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800260a:	4b24      	ldr	r3, [pc, #144]	; (800269c <HAL_RCC_OscConfig+0x244>)
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002610:	f7ff fc12 	bl	8001e38 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002618:	f7ff fc0e 	bl	8001e38 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e187      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800262a:	4b1b      	ldr	r3, [pc, #108]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b00      	cmp	r3, #0
 8002640:	d036      	beq.n	80026b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d016      	beq.n	8002678 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <HAL_RCC_OscConfig+0x248>)
 800264c:	2201      	movs	r2, #1
 800264e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002650:	f7ff fbf2 	bl	8001e38 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002658:	f7ff fbee 	bl	8001e38 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e167      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800266a:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 800266c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f0      	beq.n	8002658 <HAL_RCC_OscConfig+0x200>
 8002676:	e01b      	b.n	80026b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002678:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <HAL_RCC_OscConfig+0x248>)
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267e:	f7ff fbdb 	bl	8001e38 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002684:	e00e      	b.n	80026a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002686:	f7ff fbd7 	bl	8001e38 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d907      	bls.n	80026a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e150      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
 8002698:	40023800 	.word	0x40023800
 800269c:	42470000 	.word	0x42470000
 80026a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a4:	4b88      	ldr	r3, [pc, #544]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 80026a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1ea      	bne.n	8002686 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 8097 	beq.w	80027ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026be:	2300      	movs	r3, #0
 80026c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026c2:	4b81      	ldr	r3, [pc, #516]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10f      	bne.n	80026ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	4b7d      	ldr	r3, [pc, #500]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	4a7c      	ldr	r2, [pc, #496]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 80026d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026dc:	6413      	str	r3, [r2, #64]	; 0x40
 80026de:	4b7a      	ldr	r3, [pc, #488]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ea:	2301      	movs	r3, #1
 80026ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ee:	4b77      	ldr	r3, [pc, #476]	; (80028cc <HAL_RCC_OscConfig+0x474>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d118      	bne.n	800272c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026fa:	4b74      	ldr	r3, [pc, #464]	; (80028cc <HAL_RCC_OscConfig+0x474>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a73      	ldr	r2, [pc, #460]	; (80028cc <HAL_RCC_OscConfig+0x474>)
 8002700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002704:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002706:	f7ff fb97 	bl	8001e38 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800270e:	f7ff fb93 	bl	8001e38 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e10c      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002720:	4b6a      	ldr	r3, [pc, #424]	; (80028cc <HAL_RCC_OscConfig+0x474>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0f0      	beq.n	800270e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d106      	bne.n	8002742 <HAL_RCC_OscConfig+0x2ea>
 8002734:	4b64      	ldr	r3, [pc, #400]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 8002736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002738:	4a63      	ldr	r2, [pc, #396]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	6713      	str	r3, [r2, #112]	; 0x70
 8002740:	e01c      	b.n	800277c <HAL_RCC_OscConfig+0x324>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2b05      	cmp	r3, #5
 8002748:	d10c      	bne.n	8002764 <HAL_RCC_OscConfig+0x30c>
 800274a:	4b5f      	ldr	r3, [pc, #380]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 800274c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274e:	4a5e      	ldr	r2, [pc, #376]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 8002750:	f043 0304 	orr.w	r3, r3, #4
 8002754:	6713      	str	r3, [r2, #112]	; 0x70
 8002756:	4b5c      	ldr	r3, [pc, #368]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 8002758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275a:	4a5b      	ldr	r2, [pc, #364]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	6713      	str	r3, [r2, #112]	; 0x70
 8002762:	e00b      	b.n	800277c <HAL_RCC_OscConfig+0x324>
 8002764:	4b58      	ldr	r3, [pc, #352]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 8002766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002768:	4a57      	ldr	r2, [pc, #348]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 800276a:	f023 0301 	bic.w	r3, r3, #1
 800276e:	6713      	str	r3, [r2, #112]	; 0x70
 8002770:	4b55      	ldr	r3, [pc, #340]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 8002772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002774:	4a54      	ldr	r2, [pc, #336]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 8002776:	f023 0304 	bic.w	r3, r3, #4
 800277a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d015      	beq.n	80027b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002784:	f7ff fb58 	bl	8001e38 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278a:	e00a      	b.n	80027a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800278c:	f7ff fb54 	bl	8001e38 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	f241 3288 	movw	r2, #5000	; 0x1388
 800279a:	4293      	cmp	r3, r2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e0cb      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a2:	4b49      	ldr	r3, [pc, #292]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 80027a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0ee      	beq.n	800278c <HAL_RCC_OscConfig+0x334>
 80027ae:	e014      	b.n	80027da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b0:	f7ff fb42 	bl	8001e38 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b6:	e00a      	b.n	80027ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b8:	f7ff fb3e 	bl	8001e38 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e0b5      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ce:	4b3e      	ldr	r3, [pc, #248]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 80027d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1ee      	bne.n	80027b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027da:	7dfb      	ldrb	r3, [r7, #23]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d105      	bne.n	80027ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e0:	4b39      	ldr	r3, [pc, #228]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	4a38      	ldr	r2, [pc, #224]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 80027e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 80a1 	beq.w	8002938 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027f6:	4b34      	ldr	r3, [pc, #208]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 030c 	and.w	r3, r3, #12
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d05c      	beq.n	80028bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	2b02      	cmp	r3, #2
 8002808:	d141      	bne.n	800288e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280a:	4b31      	ldr	r3, [pc, #196]	; (80028d0 <HAL_RCC_OscConfig+0x478>)
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002810:	f7ff fb12 	bl	8001e38 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002818:	f7ff fb0e 	bl	8001e38 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e087      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282a:	4b27      	ldr	r3, [pc, #156]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f0      	bne.n	8002818 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69da      	ldr	r2, [r3, #28]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	019b      	lsls	r3, r3, #6
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284c:	085b      	lsrs	r3, r3, #1
 800284e:	3b01      	subs	r3, #1
 8002850:	041b      	lsls	r3, r3, #16
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002858:	061b      	lsls	r3, r3, #24
 800285a:	491b      	ldr	r1, [pc, #108]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 800285c:	4313      	orrs	r3, r2
 800285e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002860:	4b1b      	ldr	r3, [pc, #108]	; (80028d0 <HAL_RCC_OscConfig+0x478>)
 8002862:	2201      	movs	r2, #1
 8002864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002866:	f7ff fae7 	bl	8001e38 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800286e:	f7ff fae3 	bl	8001e38 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e05c      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002880:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0f0      	beq.n	800286e <HAL_RCC_OscConfig+0x416>
 800288c:	e054      	b.n	8002938 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288e:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <HAL_RCC_OscConfig+0x478>)
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002894:	f7ff fad0 	bl	8001e38 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800289c:	f7ff facc 	bl	8001e38 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e045      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ae:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0x444>
 80028ba:	e03d      	b.n	8002938 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d107      	bne.n	80028d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e038      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40007000 	.word	0x40007000
 80028d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028d4:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <HAL_RCC_OscConfig+0x4ec>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d028      	beq.n	8002934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d121      	bne.n	8002934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d11a      	bne.n	8002934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002904:	4013      	ands	r3, r2
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800290a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800290c:	4293      	cmp	r3, r2
 800290e:	d111      	bne.n	8002934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291a:	085b      	lsrs	r3, r3, #1
 800291c:	3b01      	subs	r3, #1
 800291e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002920:	429a      	cmp	r2, r3
 8002922:	d107      	bne.n	8002934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002930:	429a      	cmp	r2, r3
 8002932:	d001      	beq.n	8002938 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e000      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40023800 	.word	0x40023800

08002948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e0cc      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800295c:	4b68      	ldr	r3, [pc, #416]	; (8002b00 <HAL_RCC_ClockConfig+0x1b8>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	d90c      	bls.n	8002984 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800296a:	4b65      	ldr	r3, [pc, #404]	; (8002b00 <HAL_RCC_ClockConfig+0x1b8>)
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002972:	4b63      	ldr	r3, [pc, #396]	; (8002b00 <HAL_RCC_ClockConfig+0x1b8>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d001      	beq.n	8002984 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e0b8      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d020      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800299c:	4b59      	ldr	r3, [pc, #356]	; (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	4a58      	ldr	r2, [pc, #352]	; (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d005      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029b4:	4b53      	ldr	r3, [pc, #332]	; (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	4a52      	ldr	r2, [pc, #328]	; (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029c0:	4b50      	ldr	r3, [pc, #320]	; (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	494d      	ldr	r1, [pc, #308]	; (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d044      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d107      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e6:	4b47      	ldr	r3, [pc, #284]	; (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d119      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e07f      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d003      	beq.n	8002a06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	d107      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a06:	4b3f      	ldr	r3, [pc, #252]	; (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d109      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e06f      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a16:	4b3b      	ldr	r3, [pc, #236]	; (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e067      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a26:	4b37      	ldr	r3, [pc, #220]	; (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f023 0203 	bic.w	r2, r3, #3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	4934      	ldr	r1, [pc, #208]	; (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a38:	f7ff f9fe 	bl	8001e38 <HAL_GetTick>
 8002a3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3e:	e00a      	b.n	8002a56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a40:	f7ff f9fa 	bl	8001e38 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e04f      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a56:	4b2b      	ldr	r3, [pc, #172]	; (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 020c 	and.w	r2, r3, #12
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d1eb      	bne.n	8002a40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a68:	4b25      	ldr	r3, [pc, #148]	; (8002b00 <HAL_RCC_ClockConfig+0x1b8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d20c      	bcs.n	8002a90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a76:	4b22      	ldr	r3, [pc, #136]	; (8002b00 <HAL_RCC_ClockConfig+0x1b8>)
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7e:	4b20      	ldr	r3, [pc, #128]	; (8002b00 <HAL_RCC_ClockConfig+0x1b8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e032      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d008      	beq.n	8002aae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a9c:	4b19      	ldr	r3, [pc, #100]	; (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	4916      	ldr	r1, [pc, #88]	; (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d009      	beq.n	8002ace <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aba:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	490e      	ldr	r1, [pc, #56]	; (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ace:	f000 f821 	bl	8002b14 <HAL_RCC_GetSysClockFreq>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	091b      	lsrs	r3, r3, #4
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	490a      	ldr	r1, [pc, #40]	; (8002b08 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae0:	5ccb      	ldrb	r3, [r1, r3]
 8002ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae6:	4a09      	ldr	r2, [pc, #36]	; (8002b0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002aea:	4b09      	ldr	r3, [pc, #36]	; (8002b10 <HAL_RCC_ClockConfig+0x1c8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff f95e 	bl	8001db0 <HAL_InitTick>

  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40023c00 	.word	0x40023c00
 8002b04:	40023800 	.word	0x40023800
 8002b08:	08005310 	.word	0x08005310
 8002b0c:	20000000 	.word	0x20000000
 8002b10:	20000004 	.word	0x20000004

08002b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b18:	b094      	sub	sp, #80	; 0x50
 8002b1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	647b      	str	r3, [r7, #68]	; 0x44
 8002b20:	2300      	movs	r3, #0
 8002b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b24:	2300      	movs	r3, #0
 8002b26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b2c:	4b79      	ldr	r3, [pc, #484]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 030c 	and.w	r3, r3, #12
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	d00d      	beq.n	8002b54 <HAL_RCC_GetSysClockFreq+0x40>
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	f200 80e1 	bhi.w	8002d00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d002      	beq.n	8002b48 <HAL_RCC_GetSysClockFreq+0x34>
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d003      	beq.n	8002b4e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b46:	e0db      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b48:	4b73      	ldr	r3, [pc, #460]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b4a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b4c:	e0db      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b4e:	4b73      	ldr	r3, [pc, #460]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x208>)
 8002b50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b52:	e0d8      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b54:	4b6f      	ldr	r3, [pc, #444]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b5c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b5e:	4b6d      	ldr	r3, [pc, #436]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d063      	beq.n	8002c32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b6a:	4b6a      	ldr	r3, [pc, #424]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	099b      	lsrs	r3, r3, #6
 8002b70:	2200      	movs	r2, #0
 8002b72:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b7c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b7e:	2300      	movs	r3, #0
 8002b80:	637b      	str	r3, [r7, #52]	; 0x34
 8002b82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b86:	4622      	mov	r2, r4
 8002b88:	462b      	mov	r3, r5
 8002b8a:	f04f 0000 	mov.w	r0, #0
 8002b8e:	f04f 0100 	mov.w	r1, #0
 8002b92:	0159      	lsls	r1, r3, #5
 8002b94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b98:	0150      	lsls	r0, r2, #5
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4621      	mov	r1, r4
 8002ba0:	1a51      	subs	r1, r2, r1
 8002ba2:	6139      	str	r1, [r7, #16]
 8002ba4:	4629      	mov	r1, r5
 8002ba6:	eb63 0301 	sbc.w	r3, r3, r1
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bb8:	4659      	mov	r1, fp
 8002bba:	018b      	lsls	r3, r1, #6
 8002bbc:	4651      	mov	r1, sl
 8002bbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bc2:	4651      	mov	r1, sl
 8002bc4:	018a      	lsls	r2, r1, #6
 8002bc6:	4651      	mov	r1, sl
 8002bc8:	ebb2 0801 	subs.w	r8, r2, r1
 8002bcc:	4659      	mov	r1, fp
 8002bce:	eb63 0901 	sbc.w	r9, r3, r1
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	f04f 0300 	mov.w	r3, #0
 8002bda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002be2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002be6:	4690      	mov	r8, r2
 8002be8:	4699      	mov	r9, r3
 8002bea:	4623      	mov	r3, r4
 8002bec:	eb18 0303 	adds.w	r3, r8, r3
 8002bf0:	60bb      	str	r3, [r7, #8]
 8002bf2:	462b      	mov	r3, r5
 8002bf4:	eb49 0303 	adc.w	r3, r9, r3
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c06:	4629      	mov	r1, r5
 8002c08:	024b      	lsls	r3, r1, #9
 8002c0a:	4621      	mov	r1, r4
 8002c0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c10:	4621      	mov	r1, r4
 8002c12:	024a      	lsls	r2, r1, #9
 8002c14:	4610      	mov	r0, r2
 8002c16:	4619      	mov	r1, r3
 8002c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c24:	f7fd fb2c 	bl	8000280 <__aeabi_uldivmod>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c30:	e058      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c32:	4b38      	ldr	r3, [pc, #224]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	099b      	lsrs	r3, r3, #6
 8002c38:	2200      	movs	r2, #0
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c42:	623b      	str	r3, [r7, #32]
 8002c44:	2300      	movs	r3, #0
 8002c46:	627b      	str	r3, [r7, #36]	; 0x24
 8002c48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c4c:	4642      	mov	r2, r8
 8002c4e:	464b      	mov	r3, r9
 8002c50:	f04f 0000 	mov.w	r0, #0
 8002c54:	f04f 0100 	mov.w	r1, #0
 8002c58:	0159      	lsls	r1, r3, #5
 8002c5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c5e:	0150      	lsls	r0, r2, #5
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4641      	mov	r1, r8
 8002c66:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c6a:	4649      	mov	r1, r9
 8002c6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c84:	ebb2 040a 	subs.w	r4, r2, sl
 8002c88:	eb63 050b 	sbc.w	r5, r3, fp
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	00eb      	lsls	r3, r5, #3
 8002c96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c9a:	00e2      	lsls	r2, r4, #3
 8002c9c:	4614      	mov	r4, r2
 8002c9e:	461d      	mov	r5, r3
 8002ca0:	4643      	mov	r3, r8
 8002ca2:	18e3      	adds	r3, r4, r3
 8002ca4:	603b      	str	r3, [r7, #0]
 8002ca6:	464b      	mov	r3, r9
 8002ca8:	eb45 0303 	adc.w	r3, r5, r3
 8002cac:	607b      	str	r3, [r7, #4]
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	f04f 0300 	mov.w	r3, #0
 8002cb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cba:	4629      	mov	r1, r5
 8002cbc:	028b      	lsls	r3, r1, #10
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cc4:	4621      	mov	r1, r4
 8002cc6:	028a      	lsls	r2, r1, #10
 8002cc8:	4610      	mov	r0, r2
 8002cca:	4619      	mov	r1, r3
 8002ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cce:	2200      	movs	r2, #0
 8002cd0:	61bb      	str	r3, [r7, #24]
 8002cd2:	61fa      	str	r2, [r7, #28]
 8002cd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cd8:	f7fd fad2 	bl	8000280 <__aeabi_uldivmod>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	0c1b      	lsrs	r3, r3, #16
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	3301      	adds	r3, #1
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002cf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cfe:	e002      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d00:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3750      	adds	r7, #80	; 0x50
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d12:	bf00      	nop
 8002d14:	40023800 	.word	0x40023800
 8002d18:	00f42400 	.word	0x00f42400
 8002d1c:	007a1200 	.word	0x007a1200

08002d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d24:	4b03      	ldr	r3, [pc, #12]	; (8002d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d26:	681b      	ldr	r3, [r3, #0]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	20000000 	.word	0x20000000

08002d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d3c:	f7ff fff0 	bl	8002d20 <HAL_RCC_GetHCLKFreq>
 8002d40:	4602      	mov	r2, r0
 8002d42:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	0a9b      	lsrs	r3, r3, #10
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	4903      	ldr	r1, [pc, #12]	; (8002d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d4e:	5ccb      	ldrb	r3, [r1, r3]
 8002d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	08005320 	.word	0x08005320

08002d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d64:	f7ff ffdc 	bl	8002d20 <HAL_RCC_GetHCLKFreq>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	0b5b      	lsrs	r3, r3, #13
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	4903      	ldr	r1, [pc, #12]	; (8002d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d76:	5ccb      	ldrb	r3, [r1, r3]
 8002d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40023800 	.word	0x40023800
 8002d84:	08005320 	.word	0x08005320

08002d88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e041      	b.n	8002e1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d106      	bne.n	8002db4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7fe fc20 	bl	80015f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	f000 fd96 	bl	80038f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d001      	beq.n	8002e40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e04e      	b.n	8002ede <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0201 	orr.w	r2, r2, #1
 8002e56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a23      	ldr	r2, [pc, #140]	; (8002eec <HAL_TIM_Base_Start_IT+0xc4>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d022      	beq.n	8002ea8 <HAL_TIM_Base_Start_IT+0x80>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e6a:	d01d      	beq.n	8002ea8 <HAL_TIM_Base_Start_IT+0x80>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a1f      	ldr	r2, [pc, #124]	; (8002ef0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d018      	beq.n	8002ea8 <HAL_TIM_Base_Start_IT+0x80>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a1e      	ldr	r2, [pc, #120]	; (8002ef4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d013      	beq.n	8002ea8 <HAL_TIM_Base_Start_IT+0x80>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a1c      	ldr	r2, [pc, #112]	; (8002ef8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d00e      	beq.n	8002ea8 <HAL_TIM_Base_Start_IT+0x80>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a1b      	ldr	r2, [pc, #108]	; (8002efc <HAL_TIM_Base_Start_IT+0xd4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d009      	beq.n	8002ea8 <HAL_TIM_Base_Start_IT+0x80>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a19      	ldr	r2, [pc, #100]	; (8002f00 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d004      	beq.n	8002ea8 <HAL_TIM_Base_Start_IT+0x80>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a18      	ldr	r2, [pc, #96]	; (8002f04 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d111      	bne.n	8002ecc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2b06      	cmp	r3, #6
 8002eb8:	d010      	beq.n	8002edc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f042 0201 	orr.w	r2, r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eca:	e007      	b.n	8002edc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0201 	orr.w	r2, r2, #1
 8002eda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40010000 	.word	0x40010000
 8002ef0:	40000400 	.word	0x40000400
 8002ef4:	40000800 	.word	0x40000800
 8002ef8:	40000c00 	.word	0x40000c00
 8002efc:	40010400 	.word	0x40010400
 8002f00:	40014000 	.word	0x40014000
 8002f04:	40001800 	.word	0x40001800

08002f08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e041      	b.n	8002f9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d106      	bne.n	8002f34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f839 	bl	8002fa6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3304      	adds	r3, #4
 8002f44:	4619      	mov	r1, r3
 8002f46:	4610      	mov	r0, r2
 8002f48:	f000 fcd6 	bl	80038f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
	...

08002fbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d109      	bne.n	8002fe0 <HAL_TIM_PWM_Start+0x24>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	bf14      	ite	ne
 8002fd8:	2301      	movne	r3, #1
 8002fda:	2300      	moveq	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	e022      	b.n	8003026 <HAL_TIM_PWM_Start+0x6a>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d109      	bne.n	8002ffa <HAL_TIM_PWM_Start+0x3e>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	bf14      	ite	ne
 8002ff2:	2301      	movne	r3, #1
 8002ff4:	2300      	moveq	r3, #0
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	e015      	b.n	8003026 <HAL_TIM_PWM_Start+0x6a>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d109      	bne.n	8003014 <HAL_TIM_PWM_Start+0x58>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b01      	cmp	r3, #1
 800300a:	bf14      	ite	ne
 800300c:	2301      	movne	r3, #1
 800300e:	2300      	moveq	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	e008      	b.n	8003026 <HAL_TIM_PWM_Start+0x6a>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b01      	cmp	r3, #1
 800301e:	bf14      	ite	ne
 8003020:	2301      	movne	r3, #1
 8003022:	2300      	moveq	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e07c      	b.n	8003128 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d104      	bne.n	800303e <HAL_TIM_PWM_Start+0x82>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800303c:	e013      	b.n	8003066 <HAL_TIM_PWM_Start+0xaa>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	2b04      	cmp	r3, #4
 8003042:	d104      	bne.n	800304e <HAL_TIM_PWM_Start+0x92>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800304c:	e00b      	b.n	8003066 <HAL_TIM_PWM_Start+0xaa>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b08      	cmp	r3, #8
 8003052:	d104      	bne.n	800305e <HAL_TIM_PWM_Start+0xa2>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800305c:	e003      	b.n	8003066 <HAL_TIM_PWM_Start+0xaa>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2202      	movs	r2, #2
 8003062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2201      	movs	r2, #1
 800306c:	6839      	ldr	r1, [r7, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f000 ff38 	bl	8003ee4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a2d      	ldr	r2, [pc, #180]	; (8003130 <HAL_TIM_PWM_Start+0x174>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d004      	beq.n	8003088 <HAL_TIM_PWM_Start+0xcc>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a2c      	ldr	r2, [pc, #176]	; (8003134 <HAL_TIM_PWM_Start+0x178>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d101      	bne.n	800308c <HAL_TIM_PWM_Start+0xd0>
 8003088:	2301      	movs	r3, #1
 800308a:	e000      	b.n	800308e <HAL_TIM_PWM_Start+0xd2>
 800308c:	2300      	movs	r3, #0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d007      	beq.n	80030a2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a22      	ldr	r2, [pc, #136]	; (8003130 <HAL_TIM_PWM_Start+0x174>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d022      	beq.n	80030f2 <HAL_TIM_PWM_Start+0x136>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b4:	d01d      	beq.n	80030f2 <HAL_TIM_PWM_Start+0x136>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a1f      	ldr	r2, [pc, #124]	; (8003138 <HAL_TIM_PWM_Start+0x17c>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d018      	beq.n	80030f2 <HAL_TIM_PWM_Start+0x136>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a1d      	ldr	r2, [pc, #116]	; (800313c <HAL_TIM_PWM_Start+0x180>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d013      	beq.n	80030f2 <HAL_TIM_PWM_Start+0x136>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a1c      	ldr	r2, [pc, #112]	; (8003140 <HAL_TIM_PWM_Start+0x184>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d00e      	beq.n	80030f2 <HAL_TIM_PWM_Start+0x136>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a16      	ldr	r2, [pc, #88]	; (8003134 <HAL_TIM_PWM_Start+0x178>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d009      	beq.n	80030f2 <HAL_TIM_PWM_Start+0x136>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a18      	ldr	r2, [pc, #96]	; (8003144 <HAL_TIM_PWM_Start+0x188>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d004      	beq.n	80030f2 <HAL_TIM_PWM_Start+0x136>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a16      	ldr	r2, [pc, #88]	; (8003148 <HAL_TIM_PWM_Start+0x18c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d111      	bne.n	8003116 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2b06      	cmp	r3, #6
 8003102:	d010      	beq.n	8003126 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0201 	orr.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003114:	e007      	b.n	8003126 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f042 0201 	orr.w	r2, r2, #1
 8003124:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40010000 	.word	0x40010000
 8003134:	40010400 	.word	0x40010400
 8003138:	40000400 	.word	0x40000400
 800313c:	40000800 	.word	0x40000800
 8003140:	40000c00 	.word	0x40000c00
 8003144:	40014000 	.word	0x40014000
 8003148:	40001800 	.word	0x40001800

0800314c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e097      	b.n	8003290 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d106      	bne.n	800317a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7fe faa1 	bl	80016bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2202      	movs	r2, #2
 800317e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	6812      	ldr	r2, [r2, #0]
 800318c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003190:	f023 0307 	bic.w	r3, r3, #7
 8003194:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3304      	adds	r3, #4
 800319e:	4619      	mov	r1, r3
 80031a0:	4610      	mov	r0, r2
 80031a2:	f000 fba9 	bl	80038f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ce:	f023 0303 	bic.w	r3, r3, #3
 80031d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	021b      	lsls	r3, r3, #8
 80031de:	4313      	orrs	r3, r2
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80031ec:	f023 030c 	bic.w	r3, r3, #12
 80031f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	021b      	lsls	r3, r3, #8
 8003208:	4313      	orrs	r3, r2
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	4313      	orrs	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	011a      	lsls	r2, r3, #4
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	031b      	lsls	r3, r3, #12
 800321c:	4313      	orrs	r3, r2
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800322a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003232:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	4313      	orrs	r3, r2
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	4313      	orrs	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3718      	adds	r7, #24
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80032b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80032c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d110      	bne.n	80032ea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d102      	bne.n	80032d4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80032ce:	7b7b      	ldrb	r3, [r7, #13]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d001      	beq.n	80032d8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e069      	b.n	80033ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2202      	movs	r2, #2
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032e8:	e031      	b.n	800334e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d110      	bne.n	8003312 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80032f0:	7bbb      	ldrb	r3, [r7, #14]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d102      	bne.n	80032fc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80032f6:	7b3b      	ldrb	r3, [r7, #12]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d001      	beq.n	8003300 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e055      	b.n	80033ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003310:	e01d      	b.n	800334e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003312:	7bfb      	ldrb	r3, [r7, #15]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d108      	bne.n	800332a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003318:	7bbb      	ldrb	r3, [r7, #14]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d105      	bne.n	800332a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800331e:	7b7b      	ldrb	r3, [r7, #13]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d102      	bne.n	800332a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003324:	7b3b      	ldrb	r3, [r7, #12]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d001      	beq.n	800332e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e03e      	b.n	80033ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2202      	movs	r2, #2
 8003332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2202      	movs	r2, #2
 800333a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2202      	movs	r2, #2
 8003342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2202      	movs	r2, #2
 800334a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d003      	beq.n	800335c <HAL_TIM_Encoder_Start+0xc4>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2b04      	cmp	r3, #4
 8003358:	d008      	beq.n	800336c <HAL_TIM_Encoder_Start+0xd4>
 800335a:	e00f      	b.n	800337c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2201      	movs	r2, #1
 8003362:	2100      	movs	r1, #0
 8003364:	4618      	mov	r0, r3
 8003366:	f000 fdbd 	bl	8003ee4 <TIM_CCxChannelCmd>
      break;
 800336a:	e016      	b.n	800339a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2201      	movs	r2, #1
 8003372:	2104      	movs	r1, #4
 8003374:	4618      	mov	r0, r3
 8003376:	f000 fdb5 	bl	8003ee4 <TIM_CCxChannelCmd>
      break;
 800337a:	e00e      	b.n	800339a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2201      	movs	r2, #1
 8003382:	2100      	movs	r1, #0
 8003384:	4618      	mov	r0, r3
 8003386:	f000 fdad 	bl	8003ee4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2201      	movs	r2, #1
 8003390:	2104      	movs	r1, #4
 8003392:	4618      	mov	r0, r3
 8003394:	f000 fda6 	bl	8003ee4 <TIM_CCxChannelCmd>
      break;
 8003398:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f042 0201 	orr.w	r2, r2, #1
 80033a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d020      	beq.n	8003418 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d01b      	beq.n	8003418 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f06f 0202 	mvn.w	r2, #2
 80033e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 fa5b 	bl	80038ba <HAL_TIM_IC_CaptureCallback>
 8003404:	e005      	b.n	8003412 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 fa4d 	bl	80038a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 fa5e 	bl	80038ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	f003 0304 	and.w	r3, r3, #4
 800341e:	2b00      	cmp	r3, #0
 8003420:	d020      	beq.n	8003464 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b00      	cmp	r3, #0
 800342a:	d01b      	beq.n	8003464 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f06f 0204 	mvn.w	r2, #4
 8003434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2202      	movs	r2, #2
 800343a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fa35 	bl	80038ba <HAL_TIM_IC_CaptureCallback>
 8003450:	e005      	b.n	800345e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 fa27 	bl	80038a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 fa38 	bl	80038ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b00      	cmp	r3, #0
 800346c:	d020      	beq.n	80034b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f003 0308 	and.w	r3, r3, #8
 8003474:	2b00      	cmp	r3, #0
 8003476:	d01b      	beq.n	80034b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f06f 0208 	mvn.w	r2, #8
 8003480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2204      	movs	r2, #4
 8003486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fa0f 	bl	80038ba <HAL_TIM_IC_CaptureCallback>
 800349c:	e005      	b.n	80034aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 fa01 	bl	80038a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 fa12 	bl	80038ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f003 0310 	and.w	r3, r3, #16
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d020      	beq.n	80034fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f003 0310 	and.w	r3, r3, #16
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d01b      	beq.n	80034fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f06f 0210 	mvn.w	r2, #16
 80034cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2208      	movs	r2, #8
 80034d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f9e9 	bl	80038ba <HAL_TIM_IC_CaptureCallback>
 80034e8:	e005      	b.n	80034f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f9db 	bl	80038a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f9ec 	bl	80038ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00c      	beq.n	8003520 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b00      	cmp	r3, #0
 800350e:	d007      	beq.n	8003520 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f06f 0201 	mvn.w	r2, #1
 8003518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7fd f8de 	bl	80006dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00c      	beq.n	8003544 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003530:	2b00      	cmp	r3, #0
 8003532:	d007      	beq.n	8003544 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800353c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 fdce 	bl	80040e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00c      	beq.n	8003568 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003554:	2b00      	cmp	r3, #0
 8003556:	d007      	beq.n	8003568 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f9bd 	bl	80038e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f003 0320 	and.w	r3, r3, #32
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00c      	beq.n	800358c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f003 0320 	and.w	r3, r3, #32
 8003578:	2b00      	cmp	r3, #0
 800357a:	d007      	beq.n	800358c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f06f 0220 	mvn.w	r2, #32
 8003584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 fda0 	bl	80040cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800358c:	bf00      	nop
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035a0:	2300      	movs	r3, #0
 80035a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d101      	bne.n	80035b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e0ae      	b.n	8003710 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b0c      	cmp	r3, #12
 80035be:	f200 809f 	bhi.w	8003700 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80035c2:	a201      	add	r2, pc, #4	; (adr r2, 80035c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80035c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c8:	080035fd 	.word	0x080035fd
 80035cc:	08003701 	.word	0x08003701
 80035d0:	08003701 	.word	0x08003701
 80035d4:	08003701 	.word	0x08003701
 80035d8:	0800363d 	.word	0x0800363d
 80035dc:	08003701 	.word	0x08003701
 80035e0:	08003701 	.word	0x08003701
 80035e4:	08003701 	.word	0x08003701
 80035e8:	0800367f 	.word	0x0800367f
 80035ec:	08003701 	.word	0x08003701
 80035f0:	08003701 	.word	0x08003701
 80035f4:	08003701 	.word	0x08003701
 80035f8:	080036bf 	.word	0x080036bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68b9      	ldr	r1, [r7, #8]
 8003602:	4618      	mov	r0, r3
 8003604:	f000 fa24 	bl	8003a50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699a      	ldr	r2, [r3, #24]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0208 	orr.w	r2, r2, #8
 8003616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699a      	ldr	r2, [r3, #24]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0204 	bic.w	r2, r2, #4
 8003626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6999      	ldr	r1, [r3, #24]
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	691a      	ldr	r2, [r3, #16]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	619a      	str	r2, [r3, #24]
      break;
 800363a:	e064      	b.n	8003706 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68b9      	ldr	r1, [r7, #8]
 8003642:	4618      	mov	r0, r3
 8003644:	f000 fa74 	bl	8003b30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	699a      	ldr	r2, [r3, #24]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003656:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699a      	ldr	r2, [r3, #24]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003666:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6999      	ldr	r1, [r3, #24]
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	021a      	lsls	r2, r3, #8
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	619a      	str	r2, [r3, #24]
      break;
 800367c:	e043      	b.n	8003706 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68b9      	ldr	r1, [r7, #8]
 8003684:	4618      	mov	r0, r3
 8003686:	f000 fac9 	bl	8003c1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	69da      	ldr	r2, [r3, #28]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f042 0208 	orr.w	r2, r2, #8
 8003698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	69da      	ldr	r2, [r3, #28]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0204 	bic.w	r2, r2, #4
 80036a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	69d9      	ldr	r1, [r3, #28]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	61da      	str	r2, [r3, #28]
      break;
 80036bc:	e023      	b.n	8003706 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68b9      	ldr	r1, [r7, #8]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 fb1d 	bl	8003d04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	69da      	ldr	r2, [r3, #28]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69da      	ldr	r2, [r3, #28]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	69d9      	ldr	r1, [r3, #28]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	021a      	lsls	r2, r3, #8
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	61da      	str	r2, [r3, #28]
      break;
 80036fe:	e002      	b.n	8003706 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	75fb      	strb	r3, [r7, #23]
      break;
 8003704:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800370e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3718      	adds	r7, #24
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003722:	2300      	movs	r3, #0
 8003724:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_TIM_ConfigClockSource+0x1c>
 8003730:	2302      	movs	r3, #2
 8003732:	e0b4      	b.n	800389e <HAL_TIM_ConfigClockSource+0x186>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003752:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800375a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800376c:	d03e      	beq.n	80037ec <HAL_TIM_ConfigClockSource+0xd4>
 800376e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003772:	f200 8087 	bhi.w	8003884 <HAL_TIM_ConfigClockSource+0x16c>
 8003776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800377a:	f000 8086 	beq.w	800388a <HAL_TIM_ConfigClockSource+0x172>
 800377e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003782:	d87f      	bhi.n	8003884 <HAL_TIM_ConfigClockSource+0x16c>
 8003784:	2b70      	cmp	r3, #112	; 0x70
 8003786:	d01a      	beq.n	80037be <HAL_TIM_ConfigClockSource+0xa6>
 8003788:	2b70      	cmp	r3, #112	; 0x70
 800378a:	d87b      	bhi.n	8003884 <HAL_TIM_ConfigClockSource+0x16c>
 800378c:	2b60      	cmp	r3, #96	; 0x60
 800378e:	d050      	beq.n	8003832 <HAL_TIM_ConfigClockSource+0x11a>
 8003790:	2b60      	cmp	r3, #96	; 0x60
 8003792:	d877      	bhi.n	8003884 <HAL_TIM_ConfigClockSource+0x16c>
 8003794:	2b50      	cmp	r3, #80	; 0x50
 8003796:	d03c      	beq.n	8003812 <HAL_TIM_ConfigClockSource+0xfa>
 8003798:	2b50      	cmp	r3, #80	; 0x50
 800379a:	d873      	bhi.n	8003884 <HAL_TIM_ConfigClockSource+0x16c>
 800379c:	2b40      	cmp	r3, #64	; 0x40
 800379e:	d058      	beq.n	8003852 <HAL_TIM_ConfigClockSource+0x13a>
 80037a0:	2b40      	cmp	r3, #64	; 0x40
 80037a2:	d86f      	bhi.n	8003884 <HAL_TIM_ConfigClockSource+0x16c>
 80037a4:	2b30      	cmp	r3, #48	; 0x30
 80037a6:	d064      	beq.n	8003872 <HAL_TIM_ConfigClockSource+0x15a>
 80037a8:	2b30      	cmp	r3, #48	; 0x30
 80037aa:	d86b      	bhi.n	8003884 <HAL_TIM_ConfigClockSource+0x16c>
 80037ac:	2b20      	cmp	r3, #32
 80037ae:	d060      	beq.n	8003872 <HAL_TIM_ConfigClockSource+0x15a>
 80037b0:	2b20      	cmp	r3, #32
 80037b2:	d867      	bhi.n	8003884 <HAL_TIM_ConfigClockSource+0x16c>
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d05c      	beq.n	8003872 <HAL_TIM_ConfigClockSource+0x15a>
 80037b8:	2b10      	cmp	r3, #16
 80037ba:	d05a      	beq.n	8003872 <HAL_TIM_ConfigClockSource+0x15a>
 80037bc:	e062      	b.n	8003884 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037ce:	f000 fb69 	bl	8003ea4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	609a      	str	r2, [r3, #8]
      break;
 80037ea:	e04f      	b.n	800388c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037fc:	f000 fb52 	bl	8003ea4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800380e:	609a      	str	r2, [r3, #8]
      break;
 8003810:	e03c      	b.n	800388c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800381e:	461a      	mov	r2, r3
 8003820:	f000 fac6 	bl	8003db0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2150      	movs	r1, #80	; 0x50
 800382a:	4618      	mov	r0, r3
 800382c:	f000 fb1f 	bl	8003e6e <TIM_ITRx_SetConfig>
      break;
 8003830:	e02c      	b.n	800388c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800383e:	461a      	mov	r2, r3
 8003840:	f000 fae5 	bl	8003e0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2160      	movs	r1, #96	; 0x60
 800384a:	4618      	mov	r0, r3
 800384c:	f000 fb0f 	bl	8003e6e <TIM_ITRx_SetConfig>
      break;
 8003850:	e01c      	b.n	800388c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800385e:	461a      	mov	r2, r3
 8003860:	f000 faa6 	bl	8003db0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2140      	movs	r1, #64	; 0x40
 800386a:	4618      	mov	r0, r3
 800386c:	f000 faff 	bl	8003e6e <TIM_ITRx_SetConfig>
      break;
 8003870:	e00c      	b.n	800388c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4619      	mov	r1, r3
 800387c:	4610      	mov	r0, r2
 800387e:	f000 faf6 	bl	8003e6e <TIM_ITRx_SetConfig>
      break;
 8003882:	e003      	b.n	800388c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	73fb      	strb	r3, [r7, #15]
      break;
 8003888:	e000      	b.n	800388c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800388a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800389c:	7bfb      	ldrb	r3, [r7, #15]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
	...

080038f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a46      	ldr	r2, [pc, #280]	; (8003a24 <TIM_Base_SetConfig+0x12c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d013      	beq.n	8003938 <TIM_Base_SetConfig+0x40>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003916:	d00f      	beq.n	8003938 <TIM_Base_SetConfig+0x40>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a43      	ldr	r2, [pc, #268]	; (8003a28 <TIM_Base_SetConfig+0x130>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d00b      	beq.n	8003938 <TIM_Base_SetConfig+0x40>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a42      	ldr	r2, [pc, #264]	; (8003a2c <TIM_Base_SetConfig+0x134>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d007      	beq.n	8003938 <TIM_Base_SetConfig+0x40>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a41      	ldr	r2, [pc, #260]	; (8003a30 <TIM_Base_SetConfig+0x138>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d003      	beq.n	8003938 <TIM_Base_SetConfig+0x40>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a40      	ldr	r2, [pc, #256]	; (8003a34 <TIM_Base_SetConfig+0x13c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d108      	bne.n	800394a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800393e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	4313      	orrs	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a35      	ldr	r2, [pc, #212]	; (8003a24 <TIM_Base_SetConfig+0x12c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d02b      	beq.n	80039aa <TIM_Base_SetConfig+0xb2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003958:	d027      	beq.n	80039aa <TIM_Base_SetConfig+0xb2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a32      	ldr	r2, [pc, #200]	; (8003a28 <TIM_Base_SetConfig+0x130>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d023      	beq.n	80039aa <TIM_Base_SetConfig+0xb2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a31      	ldr	r2, [pc, #196]	; (8003a2c <TIM_Base_SetConfig+0x134>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d01f      	beq.n	80039aa <TIM_Base_SetConfig+0xb2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a30      	ldr	r2, [pc, #192]	; (8003a30 <TIM_Base_SetConfig+0x138>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d01b      	beq.n	80039aa <TIM_Base_SetConfig+0xb2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a2f      	ldr	r2, [pc, #188]	; (8003a34 <TIM_Base_SetConfig+0x13c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d017      	beq.n	80039aa <TIM_Base_SetConfig+0xb2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a2e      	ldr	r2, [pc, #184]	; (8003a38 <TIM_Base_SetConfig+0x140>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d013      	beq.n	80039aa <TIM_Base_SetConfig+0xb2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a2d      	ldr	r2, [pc, #180]	; (8003a3c <TIM_Base_SetConfig+0x144>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d00f      	beq.n	80039aa <TIM_Base_SetConfig+0xb2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a2c      	ldr	r2, [pc, #176]	; (8003a40 <TIM_Base_SetConfig+0x148>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d00b      	beq.n	80039aa <TIM_Base_SetConfig+0xb2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a2b      	ldr	r2, [pc, #172]	; (8003a44 <TIM_Base_SetConfig+0x14c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d007      	beq.n	80039aa <TIM_Base_SetConfig+0xb2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a2a      	ldr	r2, [pc, #168]	; (8003a48 <TIM_Base_SetConfig+0x150>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d003      	beq.n	80039aa <TIM_Base_SetConfig+0xb2>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a29      	ldr	r2, [pc, #164]	; (8003a4c <TIM_Base_SetConfig+0x154>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d108      	bne.n	80039bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a10      	ldr	r2, [pc, #64]	; (8003a24 <TIM_Base_SetConfig+0x12c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d003      	beq.n	80039f0 <TIM_Base_SetConfig+0xf8>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a12      	ldr	r2, [pc, #72]	; (8003a34 <TIM_Base_SetConfig+0x13c>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d103      	bne.n	80039f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	691a      	ldr	r2, [r3, #16]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d105      	bne.n	8003a16 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f023 0201 	bic.w	r2, r3, #1
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	611a      	str	r2, [r3, #16]
  }
}
 8003a16:	bf00      	nop
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	40010000 	.word	0x40010000
 8003a28:	40000400 	.word	0x40000400
 8003a2c:	40000800 	.word	0x40000800
 8003a30:	40000c00 	.word	0x40000c00
 8003a34:	40010400 	.word	0x40010400
 8003a38:	40014000 	.word	0x40014000
 8003a3c:	40014400 	.word	0x40014400
 8003a40:	40014800 	.word	0x40014800
 8003a44:	40001800 	.word	0x40001800
 8003a48:	40001c00 	.word	0x40001c00
 8003a4c:	40002000 	.word	0x40002000

08003a50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	f023 0201 	bic.w	r2, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f023 0303 	bic.w	r3, r3, #3
 8003a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f023 0302 	bic.w	r3, r3, #2
 8003a98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a20      	ldr	r2, [pc, #128]	; (8003b28 <TIM_OC1_SetConfig+0xd8>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d003      	beq.n	8003ab4 <TIM_OC1_SetConfig+0x64>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a1f      	ldr	r2, [pc, #124]	; (8003b2c <TIM_OC1_SetConfig+0xdc>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d10c      	bne.n	8003ace <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f023 0308 	bic.w	r3, r3, #8
 8003aba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f023 0304 	bic.w	r3, r3, #4
 8003acc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a15      	ldr	r2, [pc, #84]	; (8003b28 <TIM_OC1_SetConfig+0xd8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d003      	beq.n	8003ade <TIM_OC1_SetConfig+0x8e>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a14      	ldr	r2, [pc, #80]	; (8003b2c <TIM_OC1_SetConfig+0xdc>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d111      	bne.n	8003b02 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ae4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003aec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	621a      	str	r2, [r3, #32]
}
 8003b1c:	bf00      	nop
 8003b1e:	371c      	adds	r7, #28
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	40010000 	.word	0x40010000
 8003b2c:	40010400 	.word	0x40010400

08003b30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	f023 0210 	bic.w	r2, r3, #16
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	021b      	lsls	r3, r3, #8
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f023 0320 	bic.w	r3, r3, #32
 8003b7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a22      	ldr	r2, [pc, #136]	; (8003c14 <TIM_OC2_SetConfig+0xe4>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d003      	beq.n	8003b98 <TIM_OC2_SetConfig+0x68>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a21      	ldr	r2, [pc, #132]	; (8003c18 <TIM_OC2_SetConfig+0xe8>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d10d      	bne.n	8003bb4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a17      	ldr	r2, [pc, #92]	; (8003c14 <TIM_OC2_SetConfig+0xe4>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d003      	beq.n	8003bc4 <TIM_OC2_SetConfig+0x94>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a16      	ldr	r2, [pc, #88]	; (8003c18 <TIM_OC2_SetConfig+0xe8>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d113      	bne.n	8003bec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	621a      	str	r2, [r3, #32]
}
 8003c06:	bf00      	nop
 8003c08:	371c      	adds	r7, #28
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	40010000 	.word	0x40010000
 8003c18:	40010400 	.word	0x40010400

08003c1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b087      	sub	sp, #28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f023 0303 	bic.w	r3, r3, #3
 8003c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	021b      	lsls	r3, r3, #8
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a21      	ldr	r2, [pc, #132]	; (8003cfc <TIM_OC3_SetConfig+0xe0>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d003      	beq.n	8003c82 <TIM_OC3_SetConfig+0x66>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a20      	ldr	r2, [pc, #128]	; (8003d00 <TIM_OC3_SetConfig+0xe4>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d10d      	bne.n	8003c9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	021b      	lsls	r3, r3, #8
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a16      	ldr	r2, [pc, #88]	; (8003cfc <TIM_OC3_SetConfig+0xe0>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d003      	beq.n	8003cae <TIM_OC3_SetConfig+0x92>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a15      	ldr	r2, [pc, #84]	; (8003d00 <TIM_OC3_SetConfig+0xe4>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d113      	bne.n	8003cd6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	621a      	str	r2, [r3, #32]
}
 8003cf0:	bf00      	nop
 8003cf2:	371c      	adds	r7, #28
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	40010000 	.word	0x40010000
 8003d00:	40010400 	.word	0x40010400

08003d04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	021b      	lsls	r3, r3, #8
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	031b      	lsls	r3, r3, #12
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a12      	ldr	r2, [pc, #72]	; (8003da8 <TIM_OC4_SetConfig+0xa4>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d003      	beq.n	8003d6c <TIM_OC4_SetConfig+0x68>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a11      	ldr	r2, [pc, #68]	; (8003dac <TIM_OC4_SetConfig+0xa8>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d109      	bne.n	8003d80 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	019b      	lsls	r3, r3, #6
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	621a      	str	r2, [r3, #32]
}
 8003d9a:	bf00      	nop
 8003d9c:	371c      	adds	r7, #28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	40010000 	.word	0x40010000
 8003dac:	40010400 	.word	0x40010400

08003db0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	f023 0201 	bic.w	r2, r3, #1
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f023 030a 	bic.w	r3, r3, #10
 8003dec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	621a      	str	r2, [r3, #32]
}
 8003e02:	bf00      	nop
 8003e04:	371c      	adds	r7, #28
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b087      	sub	sp, #28
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	60b9      	str	r1, [r7, #8]
 8003e18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	f023 0210 	bic.w	r2, r3, #16
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	031b      	lsls	r3, r3, #12
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e4a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	621a      	str	r2, [r3, #32]
}
 8003e62:	bf00      	nop
 8003e64:	371c      	adds	r7, #28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b085      	sub	sp, #20
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
 8003e76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f043 0307 	orr.w	r3, r3, #7
 8003e90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	609a      	str	r2, [r3, #8]
}
 8003e98:	bf00      	nop
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b087      	sub	sp, #28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ebe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	021a      	lsls	r2, r3, #8
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	609a      	str	r2, [r3, #8]
}
 8003ed8:	bf00      	nop
 8003eda:	371c      	adds	r7, #28
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	f003 031f 	and.w	r3, r3, #31
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a1a      	ldr	r2, [r3, #32]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	43db      	mvns	r3, r3
 8003f06:	401a      	ands	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6a1a      	ldr	r2, [r3, #32]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f003 031f 	and.w	r3, r3, #31
 8003f16:	6879      	ldr	r1, [r7, #4]
 8003f18:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	621a      	str	r2, [r3, #32]
}
 8003f22:	bf00      	nop
 8003f24:	371c      	adds	r7, #28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
	...

08003f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d101      	bne.n	8003f48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f44:	2302      	movs	r3, #2
 8003f46:	e05a      	b.n	8003ffe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2202      	movs	r2, #2
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a21      	ldr	r2, [pc, #132]	; (800400c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d022      	beq.n	8003fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f94:	d01d      	beq.n	8003fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a1d      	ldr	r2, [pc, #116]	; (8004010 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d018      	beq.n	8003fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a1b      	ldr	r2, [pc, #108]	; (8004014 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d013      	beq.n	8003fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a1a      	ldr	r2, [pc, #104]	; (8004018 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d00e      	beq.n	8003fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a18      	ldr	r2, [pc, #96]	; (800401c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d009      	beq.n	8003fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a17      	ldr	r2, [pc, #92]	; (8004020 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d004      	beq.n	8003fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a15      	ldr	r2, [pc, #84]	; (8004024 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d10c      	bne.n	8003fec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68ba      	ldr	r2, [r7, #8]
 8003fea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40010000 	.word	0x40010000
 8004010:	40000400 	.word	0x40000400
 8004014:	40000800 	.word	0x40000800
 8004018:	40000c00 	.word	0x40000c00
 800401c:	40010400 	.word	0x40010400
 8004020:	40014000 	.word	0x40014000
 8004024:	40001800 	.word	0x40001800

08004028 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004032:	2300      	movs	r3, #0
 8004034:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800403c:	2b01      	cmp	r3, #1
 800403e:	d101      	bne.n	8004044 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004040:	2302      	movs	r3, #2
 8004042:	e03d      	b.n	80040c0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	4313      	orrs	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	4313      	orrs	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	4313      	orrs	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4313      	orrs	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	4313      	orrs	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	4313      	orrs	r3, r2
 800409e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3714      	adds	r7, #20
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	460b      	mov	r3, r1
 80040fe:	607a      	str	r2, [r7, #4]
 8004100:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e062      	b.n	80041d2 <HAL_MultiProcessor_Init+0xde>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b00      	cmp	r3, #0
 8004116:	d106      	bne.n	8004126 <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f7fd fd25 	bl	8001b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2224      	movs	r2, #36	; 0x24
 800412a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800413c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f000 f992 	bl	8004468 <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	691a      	ldr	r2, [r3, #16]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004152:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	695a      	ldr	r2, [r3, #20]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004162:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691a      	ldr	r2, [r3, #16]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 020f 	bic.w	r2, r2, #15
 8004172:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6919      	ldr	r1, [r3, #16]
 800417a:	7afa      	ldrb	r2, [r7, #11]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68da      	ldr	r2, [r3, #12]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004192:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68d9      	ldr	r1, [r3, #12]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041b2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2220      	movs	r2, #32
 80041be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2220      	movs	r2, #32
 80041c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b08a      	sub	sp, #40	; 0x28
 80041de:	af02      	add	r7, sp, #8
 80041e0:	60f8      	str	r0, [r7, #12]
 80041e2:	60b9      	str	r1, [r7, #8]
 80041e4:	603b      	str	r3, [r7, #0]
 80041e6:	4613      	mov	r3, r2
 80041e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b20      	cmp	r3, #32
 80041f8:	d175      	bne.n	80042e6 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d002      	beq.n	8004206 <HAL_UART_Transmit+0x2c>
 8004200:	88fb      	ldrh	r3, [r7, #6]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e06e      	b.n	80042e8 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2221      	movs	r2, #33	; 0x21
 8004214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004218:	f7fd fe0e 	bl	8001e38 <HAL_GetTick>
 800421c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	88fa      	ldrh	r2, [r7, #6]
 8004222:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	88fa      	ldrh	r2, [r7, #6]
 8004228:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004232:	d108      	bne.n	8004246 <HAL_UART_Transmit+0x6c>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d104      	bne.n	8004246 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800423c:	2300      	movs	r3, #0
 800423e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	61bb      	str	r3, [r7, #24]
 8004244:	e003      	b.n	800424e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800424a:	2300      	movs	r3, #0
 800424c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800424e:	e02e      	b.n	80042ae <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	2200      	movs	r2, #0
 8004258:	2180      	movs	r1, #128	; 0x80
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 f848 	bl	80042f0 <UART_WaitOnFlagUntilTimeout>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d005      	beq.n	8004272 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2220      	movs	r2, #32
 800426a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e03a      	b.n	80042e8 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10b      	bne.n	8004290 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	461a      	mov	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004286:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	3302      	adds	r3, #2
 800428c:	61bb      	str	r3, [r7, #24]
 800428e:	e007      	b.n	80042a0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	781a      	ldrb	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	3301      	adds	r3, #1
 800429e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1cb      	bne.n	8004250 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2200      	movs	r2, #0
 80042c0:	2140      	movs	r1, #64	; 0x40
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 f814 	bl	80042f0 <UART_WaitOnFlagUntilTimeout>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d005      	beq.n	80042da <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e006      	b.n	80042e8 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2220      	movs	r2, #32
 80042de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	e000      	b.n	80042e8 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80042e6:	2302      	movs	r3, #2
  }
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3720      	adds	r7, #32
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	603b      	str	r3, [r7, #0]
 80042fc:	4613      	mov	r3, r2
 80042fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004300:	e03b      	b.n	800437a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004308:	d037      	beq.n	800437a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800430a:	f7fd fd95 	bl	8001e38 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	6a3a      	ldr	r2, [r7, #32]
 8004316:	429a      	cmp	r2, r3
 8004318:	d302      	bcc.n	8004320 <UART_WaitOnFlagUntilTimeout+0x30>
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e03a      	b.n	800439a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f003 0304 	and.w	r3, r3, #4
 800432e:	2b00      	cmp	r3, #0
 8004330:	d023      	beq.n	800437a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2b80      	cmp	r3, #128	; 0x80
 8004336:	d020      	beq.n	800437a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2b40      	cmp	r3, #64	; 0x40
 800433c:	d01d      	beq.n	800437a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0308 	and.w	r3, r3, #8
 8004348:	2b08      	cmp	r3, #8
 800434a:	d116      	bne.n	800437a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800434c:	2300      	movs	r3, #0
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 f81d 	bl	80043a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2208      	movs	r2, #8
 800436c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e00f      	b.n	800439a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	4013      	ands	r3, r2
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	429a      	cmp	r2, r3
 8004388:	bf0c      	ite	eq
 800438a:	2301      	moveq	r3, #1
 800438c:	2300      	movne	r3, #0
 800438e:	b2db      	uxtb	r3, r3
 8004390:	461a      	mov	r2, r3
 8004392:	79fb      	ldrb	r3, [r7, #7]
 8004394:	429a      	cmp	r2, r3
 8004396:	d0b4      	beq.n	8004302 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b095      	sub	sp, #84	; 0x54
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	330c      	adds	r3, #12
 80043b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043b4:	e853 3f00 	ldrex	r3, [r3]
 80043b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	330c      	adds	r3, #12
 80043c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043ca:	643a      	str	r2, [r7, #64]	; 0x40
 80043cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043d2:	e841 2300 	strex	r3, r2, [r1]
 80043d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1e5      	bne.n	80043aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	3314      	adds	r3, #20
 80043e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	e853 3f00 	ldrex	r3, [r3]
 80043ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	f023 0301 	bic.w	r3, r3, #1
 80043f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	3314      	adds	r3, #20
 80043fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004400:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004402:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004406:	e841 2300 	strex	r3, r2, [r1]
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1e5      	bne.n	80043de <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	2b01      	cmp	r3, #1
 8004418:	d119      	bne.n	800444e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	330c      	adds	r3, #12
 8004420:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	e853 3f00 	ldrex	r3, [r3]
 8004428:	60bb      	str	r3, [r7, #8]
   return(result);
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	f023 0310 	bic.w	r3, r3, #16
 8004430:	647b      	str	r3, [r7, #68]	; 0x44
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	330c      	adds	r3, #12
 8004438:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800443a:	61ba      	str	r2, [r7, #24]
 800443c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443e:	6979      	ldr	r1, [r7, #20]
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	e841 2300 	strex	r3, r2, [r1]
 8004446:	613b      	str	r3, [r7, #16]
   return(result);
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1e5      	bne.n	800441a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2220      	movs	r2, #32
 8004452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800445c:	bf00      	nop
 800445e:	3754      	adds	r7, #84	; 0x54
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800446c:	b0c0      	sub	sp, #256	; 0x100
 800446e:	af00      	add	r7, sp, #0
 8004470:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004484:	68d9      	ldr	r1, [r3, #12]
 8004486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	ea40 0301 	orr.w	r3, r0, r1
 8004490:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	431a      	orrs	r2, r3
 80044a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	431a      	orrs	r2, r3
 80044a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80044b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044c0:	f021 010c 	bic.w	r1, r1, #12
 80044c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80044ce:	430b      	orrs	r3, r1
 80044d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80044de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e2:	6999      	ldr	r1, [r3, #24]
 80044e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	ea40 0301 	orr.w	r3, r0, r1
 80044ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	4b8f      	ldr	r3, [pc, #572]	; (8004734 <UART_SetConfig+0x2cc>)
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d005      	beq.n	8004508 <UART_SetConfig+0xa0>
 80044fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	4b8d      	ldr	r3, [pc, #564]	; (8004738 <UART_SetConfig+0x2d0>)
 8004504:	429a      	cmp	r2, r3
 8004506:	d104      	bne.n	8004512 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004508:	f7fe fc2a 	bl	8002d60 <HAL_RCC_GetPCLK2Freq>
 800450c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004510:	e003      	b.n	800451a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004512:	f7fe fc11 	bl	8002d38 <HAL_RCC_GetPCLK1Freq>
 8004516:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800451a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004524:	f040 810c 	bne.w	8004740 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004528:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800452c:	2200      	movs	r2, #0
 800452e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004532:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004536:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800453a:	4622      	mov	r2, r4
 800453c:	462b      	mov	r3, r5
 800453e:	1891      	adds	r1, r2, r2
 8004540:	65b9      	str	r1, [r7, #88]	; 0x58
 8004542:	415b      	adcs	r3, r3
 8004544:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004546:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800454a:	4621      	mov	r1, r4
 800454c:	eb12 0801 	adds.w	r8, r2, r1
 8004550:	4629      	mov	r1, r5
 8004552:	eb43 0901 	adc.w	r9, r3, r1
 8004556:	f04f 0200 	mov.w	r2, #0
 800455a:	f04f 0300 	mov.w	r3, #0
 800455e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004562:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004566:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800456a:	4690      	mov	r8, r2
 800456c:	4699      	mov	r9, r3
 800456e:	4623      	mov	r3, r4
 8004570:	eb18 0303 	adds.w	r3, r8, r3
 8004574:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004578:	462b      	mov	r3, r5
 800457a:	eb49 0303 	adc.w	r3, r9, r3
 800457e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800458e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004592:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004596:	460b      	mov	r3, r1
 8004598:	18db      	adds	r3, r3, r3
 800459a:	653b      	str	r3, [r7, #80]	; 0x50
 800459c:	4613      	mov	r3, r2
 800459e:	eb42 0303 	adc.w	r3, r2, r3
 80045a2:	657b      	str	r3, [r7, #84]	; 0x54
 80045a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80045a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80045ac:	f7fb fe68 	bl	8000280 <__aeabi_uldivmod>
 80045b0:	4602      	mov	r2, r0
 80045b2:	460b      	mov	r3, r1
 80045b4:	4b61      	ldr	r3, [pc, #388]	; (800473c <UART_SetConfig+0x2d4>)
 80045b6:	fba3 2302 	umull	r2, r3, r3, r2
 80045ba:	095b      	lsrs	r3, r3, #5
 80045bc:	011c      	lsls	r4, r3, #4
 80045be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045c2:	2200      	movs	r2, #0
 80045c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80045cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80045d0:	4642      	mov	r2, r8
 80045d2:	464b      	mov	r3, r9
 80045d4:	1891      	adds	r1, r2, r2
 80045d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80045d8:	415b      	adcs	r3, r3
 80045da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80045e0:	4641      	mov	r1, r8
 80045e2:	eb12 0a01 	adds.w	sl, r2, r1
 80045e6:	4649      	mov	r1, r9
 80045e8:	eb43 0b01 	adc.w	fp, r3, r1
 80045ec:	f04f 0200 	mov.w	r2, #0
 80045f0:	f04f 0300 	mov.w	r3, #0
 80045f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80045f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80045fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004600:	4692      	mov	sl, r2
 8004602:	469b      	mov	fp, r3
 8004604:	4643      	mov	r3, r8
 8004606:	eb1a 0303 	adds.w	r3, sl, r3
 800460a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800460e:	464b      	mov	r3, r9
 8004610:	eb4b 0303 	adc.w	r3, fp, r3
 8004614:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004624:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004628:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800462c:	460b      	mov	r3, r1
 800462e:	18db      	adds	r3, r3, r3
 8004630:	643b      	str	r3, [r7, #64]	; 0x40
 8004632:	4613      	mov	r3, r2
 8004634:	eb42 0303 	adc.w	r3, r2, r3
 8004638:	647b      	str	r3, [r7, #68]	; 0x44
 800463a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800463e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004642:	f7fb fe1d 	bl	8000280 <__aeabi_uldivmod>
 8004646:	4602      	mov	r2, r0
 8004648:	460b      	mov	r3, r1
 800464a:	4611      	mov	r1, r2
 800464c:	4b3b      	ldr	r3, [pc, #236]	; (800473c <UART_SetConfig+0x2d4>)
 800464e:	fba3 2301 	umull	r2, r3, r3, r1
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	2264      	movs	r2, #100	; 0x64
 8004656:	fb02 f303 	mul.w	r3, r2, r3
 800465a:	1acb      	subs	r3, r1, r3
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004662:	4b36      	ldr	r3, [pc, #216]	; (800473c <UART_SetConfig+0x2d4>)
 8004664:	fba3 2302 	umull	r2, r3, r3, r2
 8004668:	095b      	lsrs	r3, r3, #5
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004670:	441c      	add	r4, r3
 8004672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004676:	2200      	movs	r2, #0
 8004678:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800467c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004680:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004684:	4642      	mov	r2, r8
 8004686:	464b      	mov	r3, r9
 8004688:	1891      	adds	r1, r2, r2
 800468a:	63b9      	str	r1, [r7, #56]	; 0x38
 800468c:	415b      	adcs	r3, r3
 800468e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004690:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004694:	4641      	mov	r1, r8
 8004696:	1851      	adds	r1, r2, r1
 8004698:	6339      	str	r1, [r7, #48]	; 0x30
 800469a:	4649      	mov	r1, r9
 800469c:	414b      	adcs	r3, r1
 800469e:	637b      	str	r3, [r7, #52]	; 0x34
 80046a0:	f04f 0200 	mov.w	r2, #0
 80046a4:	f04f 0300 	mov.w	r3, #0
 80046a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80046ac:	4659      	mov	r1, fp
 80046ae:	00cb      	lsls	r3, r1, #3
 80046b0:	4651      	mov	r1, sl
 80046b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046b6:	4651      	mov	r1, sl
 80046b8:	00ca      	lsls	r2, r1, #3
 80046ba:	4610      	mov	r0, r2
 80046bc:	4619      	mov	r1, r3
 80046be:	4603      	mov	r3, r0
 80046c0:	4642      	mov	r2, r8
 80046c2:	189b      	adds	r3, r3, r2
 80046c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046c8:	464b      	mov	r3, r9
 80046ca:	460a      	mov	r2, r1
 80046cc:	eb42 0303 	adc.w	r3, r2, r3
 80046d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80046e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80046e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80046e8:	460b      	mov	r3, r1
 80046ea:	18db      	adds	r3, r3, r3
 80046ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80046ee:	4613      	mov	r3, r2
 80046f0:	eb42 0303 	adc.w	r3, r2, r3
 80046f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80046fe:	f7fb fdbf 	bl	8000280 <__aeabi_uldivmod>
 8004702:	4602      	mov	r2, r0
 8004704:	460b      	mov	r3, r1
 8004706:	4b0d      	ldr	r3, [pc, #52]	; (800473c <UART_SetConfig+0x2d4>)
 8004708:	fba3 1302 	umull	r1, r3, r3, r2
 800470c:	095b      	lsrs	r3, r3, #5
 800470e:	2164      	movs	r1, #100	; 0x64
 8004710:	fb01 f303 	mul.w	r3, r1, r3
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	3332      	adds	r3, #50	; 0x32
 800471a:	4a08      	ldr	r2, [pc, #32]	; (800473c <UART_SetConfig+0x2d4>)
 800471c:	fba2 2303 	umull	r2, r3, r2, r3
 8004720:	095b      	lsrs	r3, r3, #5
 8004722:	f003 0207 	and.w	r2, r3, #7
 8004726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4422      	add	r2, r4
 800472e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004730:	e106      	b.n	8004940 <UART_SetConfig+0x4d8>
 8004732:	bf00      	nop
 8004734:	40011000 	.word	0x40011000
 8004738:	40011400 	.word	0x40011400
 800473c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004740:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004744:	2200      	movs	r2, #0
 8004746:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800474a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800474e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004752:	4642      	mov	r2, r8
 8004754:	464b      	mov	r3, r9
 8004756:	1891      	adds	r1, r2, r2
 8004758:	6239      	str	r1, [r7, #32]
 800475a:	415b      	adcs	r3, r3
 800475c:	627b      	str	r3, [r7, #36]	; 0x24
 800475e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004762:	4641      	mov	r1, r8
 8004764:	1854      	adds	r4, r2, r1
 8004766:	4649      	mov	r1, r9
 8004768:	eb43 0501 	adc.w	r5, r3, r1
 800476c:	f04f 0200 	mov.w	r2, #0
 8004770:	f04f 0300 	mov.w	r3, #0
 8004774:	00eb      	lsls	r3, r5, #3
 8004776:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800477a:	00e2      	lsls	r2, r4, #3
 800477c:	4614      	mov	r4, r2
 800477e:	461d      	mov	r5, r3
 8004780:	4643      	mov	r3, r8
 8004782:	18e3      	adds	r3, r4, r3
 8004784:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004788:	464b      	mov	r3, r9
 800478a:	eb45 0303 	adc.w	r3, r5, r3
 800478e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800479e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047a2:	f04f 0200 	mov.w	r2, #0
 80047a6:	f04f 0300 	mov.w	r3, #0
 80047aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80047ae:	4629      	mov	r1, r5
 80047b0:	008b      	lsls	r3, r1, #2
 80047b2:	4621      	mov	r1, r4
 80047b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047b8:	4621      	mov	r1, r4
 80047ba:	008a      	lsls	r2, r1, #2
 80047bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80047c0:	f7fb fd5e 	bl	8000280 <__aeabi_uldivmod>
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	4b60      	ldr	r3, [pc, #384]	; (800494c <UART_SetConfig+0x4e4>)
 80047ca:	fba3 2302 	umull	r2, r3, r3, r2
 80047ce:	095b      	lsrs	r3, r3, #5
 80047d0:	011c      	lsls	r4, r3, #4
 80047d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047d6:	2200      	movs	r2, #0
 80047d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80047dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80047e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80047e4:	4642      	mov	r2, r8
 80047e6:	464b      	mov	r3, r9
 80047e8:	1891      	adds	r1, r2, r2
 80047ea:	61b9      	str	r1, [r7, #24]
 80047ec:	415b      	adcs	r3, r3
 80047ee:	61fb      	str	r3, [r7, #28]
 80047f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047f4:	4641      	mov	r1, r8
 80047f6:	1851      	adds	r1, r2, r1
 80047f8:	6139      	str	r1, [r7, #16]
 80047fa:	4649      	mov	r1, r9
 80047fc:	414b      	adcs	r3, r1
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	f04f 0200 	mov.w	r2, #0
 8004804:	f04f 0300 	mov.w	r3, #0
 8004808:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800480c:	4659      	mov	r1, fp
 800480e:	00cb      	lsls	r3, r1, #3
 8004810:	4651      	mov	r1, sl
 8004812:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004816:	4651      	mov	r1, sl
 8004818:	00ca      	lsls	r2, r1, #3
 800481a:	4610      	mov	r0, r2
 800481c:	4619      	mov	r1, r3
 800481e:	4603      	mov	r3, r0
 8004820:	4642      	mov	r2, r8
 8004822:	189b      	adds	r3, r3, r2
 8004824:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004828:	464b      	mov	r3, r9
 800482a:	460a      	mov	r2, r1
 800482c:	eb42 0303 	adc.w	r3, r2, r3
 8004830:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	67bb      	str	r3, [r7, #120]	; 0x78
 800483e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800484c:	4649      	mov	r1, r9
 800484e:	008b      	lsls	r3, r1, #2
 8004850:	4641      	mov	r1, r8
 8004852:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004856:	4641      	mov	r1, r8
 8004858:	008a      	lsls	r2, r1, #2
 800485a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800485e:	f7fb fd0f 	bl	8000280 <__aeabi_uldivmod>
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	4611      	mov	r1, r2
 8004868:	4b38      	ldr	r3, [pc, #224]	; (800494c <UART_SetConfig+0x4e4>)
 800486a:	fba3 2301 	umull	r2, r3, r3, r1
 800486e:	095b      	lsrs	r3, r3, #5
 8004870:	2264      	movs	r2, #100	; 0x64
 8004872:	fb02 f303 	mul.w	r3, r2, r3
 8004876:	1acb      	subs	r3, r1, r3
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	3332      	adds	r3, #50	; 0x32
 800487c:	4a33      	ldr	r2, [pc, #204]	; (800494c <UART_SetConfig+0x4e4>)
 800487e:	fba2 2303 	umull	r2, r3, r2, r3
 8004882:	095b      	lsrs	r3, r3, #5
 8004884:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004888:	441c      	add	r4, r3
 800488a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800488e:	2200      	movs	r2, #0
 8004890:	673b      	str	r3, [r7, #112]	; 0x70
 8004892:	677a      	str	r2, [r7, #116]	; 0x74
 8004894:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004898:	4642      	mov	r2, r8
 800489a:	464b      	mov	r3, r9
 800489c:	1891      	adds	r1, r2, r2
 800489e:	60b9      	str	r1, [r7, #8]
 80048a0:	415b      	adcs	r3, r3
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048a8:	4641      	mov	r1, r8
 80048aa:	1851      	adds	r1, r2, r1
 80048ac:	6039      	str	r1, [r7, #0]
 80048ae:	4649      	mov	r1, r9
 80048b0:	414b      	adcs	r3, r1
 80048b2:	607b      	str	r3, [r7, #4]
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	f04f 0300 	mov.w	r3, #0
 80048bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048c0:	4659      	mov	r1, fp
 80048c2:	00cb      	lsls	r3, r1, #3
 80048c4:	4651      	mov	r1, sl
 80048c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048ca:	4651      	mov	r1, sl
 80048cc:	00ca      	lsls	r2, r1, #3
 80048ce:	4610      	mov	r0, r2
 80048d0:	4619      	mov	r1, r3
 80048d2:	4603      	mov	r3, r0
 80048d4:	4642      	mov	r2, r8
 80048d6:	189b      	adds	r3, r3, r2
 80048d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80048da:	464b      	mov	r3, r9
 80048dc:	460a      	mov	r2, r1
 80048de:	eb42 0303 	adc.w	r3, r2, r3
 80048e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	663b      	str	r3, [r7, #96]	; 0x60
 80048ee:	667a      	str	r2, [r7, #100]	; 0x64
 80048f0:	f04f 0200 	mov.w	r2, #0
 80048f4:	f04f 0300 	mov.w	r3, #0
 80048f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80048fc:	4649      	mov	r1, r9
 80048fe:	008b      	lsls	r3, r1, #2
 8004900:	4641      	mov	r1, r8
 8004902:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004906:	4641      	mov	r1, r8
 8004908:	008a      	lsls	r2, r1, #2
 800490a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800490e:	f7fb fcb7 	bl	8000280 <__aeabi_uldivmod>
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	4b0d      	ldr	r3, [pc, #52]	; (800494c <UART_SetConfig+0x4e4>)
 8004918:	fba3 1302 	umull	r1, r3, r3, r2
 800491c:	095b      	lsrs	r3, r3, #5
 800491e:	2164      	movs	r1, #100	; 0x64
 8004920:	fb01 f303 	mul.w	r3, r1, r3
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	011b      	lsls	r3, r3, #4
 8004928:	3332      	adds	r3, #50	; 0x32
 800492a:	4a08      	ldr	r2, [pc, #32]	; (800494c <UART_SetConfig+0x4e4>)
 800492c:	fba2 2303 	umull	r2, r3, r2, r3
 8004930:	095b      	lsrs	r3, r3, #5
 8004932:	f003 020f 	and.w	r2, r3, #15
 8004936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4422      	add	r2, r4
 800493e:	609a      	str	r2, [r3, #8]
}
 8004940:	bf00      	nop
 8004942:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004946:	46bd      	mov	sp, r7
 8004948:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800494c:	51eb851f 	.word	0x51eb851f

08004950 <siprintf>:
 8004950:	b40e      	push	{r1, r2, r3}
 8004952:	b500      	push	{lr}
 8004954:	b09c      	sub	sp, #112	; 0x70
 8004956:	ab1d      	add	r3, sp, #116	; 0x74
 8004958:	9002      	str	r0, [sp, #8]
 800495a:	9006      	str	r0, [sp, #24]
 800495c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004960:	4809      	ldr	r0, [pc, #36]	; (8004988 <siprintf+0x38>)
 8004962:	9107      	str	r1, [sp, #28]
 8004964:	9104      	str	r1, [sp, #16]
 8004966:	4909      	ldr	r1, [pc, #36]	; (800498c <siprintf+0x3c>)
 8004968:	f853 2b04 	ldr.w	r2, [r3], #4
 800496c:	9105      	str	r1, [sp, #20]
 800496e:	6800      	ldr	r0, [r0, #0]
 8004970:	9301      	str	r3, [sp, #4]
 8004972:	a902      	add	r1, sp, #8
 8004974:	f000 f992 	bl	8004c9c <_svfiprintf_r>
 8004978:	9b02      	ldr	r3, [sp, #8]
 800497a:	2200      	movs	r2, #0
 800497c:	701a      	strb	r2, [r3, #0]
 800497e:	b01c      	add	sp, #112	; 0x70
 8004980:	f85d eb04 	ldr.w	lr, [sp], #4
 8004984:	b003      	add	sp, #12
 8004986:	4770      	bx	lr
 8004988:	20000058 	.word	0x20000058
 800498c:	ffff0208 	.word	0xffff0208

08004990 <memset>:
 8004990:	4402      	add	r2, r0
 8004992:	4603      	mov	r3, r0
 8004994:	4293      	cmp	r3, r2
 8004996:	d100      	bne.n	800499a <memset+0xa>
 8004998:	4770      	bx	lr
 800499a:	f803 1b01 	strb.w	r1, [r3], #1
 800499e:	e7f9      	b.n	8004994 <memset+0x4>

080049a0 <__errno>:
 80049a0:	4b01      	ldr	r3, [pc, #4]	; (80049a8 <__errno+0x8>)
 80049a2:	6818      	ldr	r0, [r3, #0]
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	20000058 	.word	0x20000058

080049ac <__libc_init_array>:
 80049ac:	b570      	push	{r4, r5, r6, lr}
 80049ae:	4d0d      	ldr	r5, [pc, #52]	; (80049e4 <__libc_init_array+0x38>)
 80049b0:	4c0d      	ldr	r4, [pc, #52]	; (80049e8 <__libc_init_array+0x3c>)
 80049b2:	1b64      	subs	r4, r4, r5
 80049b4:	10a4      	asrs	r4, r4, #2
 80049b6:	2600      	movs	r6, #0
 80049b8:	42a6      	cmp	r6, r4
 80049ba:	d109      	bne.n	80049d0 <__libc_init_array+0x24>
 80049bc:	4d0b      	ldr	r5, [pc, #44]	; (80049ec <__libc_init_array+0x40>)
 80049be:	4c0c      	ldr	r4, [pc, #48]	; (80049f0 <__libc_init_array+0x44>)
 80049c0:	f000 fc6a 	bl	8005298 <_init>
 80049c4:	1b64      	subs	r4, r4, r5
 80049c6:	10a4      	asrs	r4, r4, #2
 80049c8:	2600      	movs	r6, #0
 80049ca:	42a6      	cmp	r6, r4
 80049cc:	d105      	bne.n	80049da <__libc_init_array+0x2e>
 80049ce:	bd70      	pop	{r4, r5, r6, pc}
 80049d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d4:	4798      	blx	r3
 80049d6:	3601      	adds	r6, #1
 80049d8:	e7ee      	b.n	80049b8 <__libc_init_array+0xc>
 80049da:	f855 3b04 	ldr.w	r3, [r5], #4
 80049de:	4798      	blx	r3
 80049e0:	3601      	adds	r6, #1
 80049e2:	e7f2      	b.n	80049ca <__libc_init_array+0x1e>
 80049e4:	08005364 	.word	0x08005364
 80049e8:	08005364 	.word	0x08005364
 80049ec:	08005364 	.word	0x08005364
 80049f0:	08005368 	.word	0x08005368

080049f4 <__retarget_lock_acquire_recursive>:
 80049f4:	4770      	bx	lr

080049f6 <__retarget_lock_release_recursive>:
 80049f6:	4770      	bx	lr

080049f8 <_free_r>:
 80049f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049fa:	2900      	cmp	r1, #0
 80049fc:	d044      	beq.n	8004a88 <_free_r+0x90>
 80049fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a02:	9001      	str	r0, [sp, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f1a1 0404 	sub.w	r4, r1, #4
 8004a0a:	bfb8      	it	lt
 8004a0c:	18e4      	addlt	r4, r4, r3
 8004a0e:	f000 f8df 	bl	8004bd0 <__malloc_lock>
 8004a12:	4a1e      	ldr	r2, [pc, #120]	; (8004a8c <_free_r+0x94>)
 8004a14:	9801      	ldr	r0, [sp, #4]
 8004a16:	6813      	ldr	r3, [r2, #0]
 8004a18:	b933      	cbnz	r3, 8004a28 <_free_r+0x30>
 8004a1a:	6063      	str	r3, [r4, #4]
 8004a1c:	6014      	str	r4, [r2, #0]
 8004a1e:	b003      	add	sp, #12
 8004a20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a24:	f000 b8da 	b.w	8004bdc <__malloc_unlock>
 8004a28:	42a3      	cmp	r3, r4
 8004a2a:	d908      	bls.n	8004a3e <_free_r+0x46>
 8004a2c:	6825      	ldr	r5, [r4, #0]
 8004a2e:	1961      	adds	r1, r4, r5
 8004a30:	428b      	cmp	r3, r1
 8004a32:	bf01      	itttt	eq
 8004a34:	6819      	ldreq	r1, [r3, #0]
 8004a36:	685b      	ldreq	r3, [r3, #4]
 8004a38:	1949      	addeq	r1, r1, r5
 8004a3a:	6021      	streq	r1, [r4, #0]
 8004a3c:	e7ed      	b.n	8004a1a <_free_r+0x22>
 8004a3e:	461a      	mov	r2, r3
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	b10b      	cbz	r3, 8004a48 <_free_r+0x50>
 8004a44:	42a3      	cmp	r3, r4
 8004a46:	d9fa      	bls.n	8004a3e <_free_r+0x46>
 8004a48:	6811      	ldr	r1, [r2, #0]
 8004a4a:	1855      	adds	r5, r2, r1
 8004a4c:	42a5      	cmp	r5, r4
 8004a4e:	d10b      	bne.n	8004a68 <_free_r+0x70>
 8004a50:	6824      	ldr	r4, [r4, #0]
 8004a52:	4421      	add	r1, r4
 8004a54:	1854      	adds	r4, r2, r1
 8004a56:	42a3      	cmp	r3, r4
 8004a58:	6011      	str	r1, [r2, #0]
 8004a5a:	d1e0      	bne.n	8004a1e <_free_r+0x26>
 8004a5c:	681c      	ldr	r4, [r3, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	6053      	str	r3, [r2, #4]
 8004a62:	440c      	add	r4, r1
 8004a64:	6014      	str	r4, [r2, #0]
 8004a66:	e7da      	b.n	8004a1e <_free_r+0x26>
 8004a68:	d902      	bls.n	8004a70 <_free_r+0x78>
 8004a6a:	230c      	movs	r3, #12
 8004a6c:	6003      	str	r3, [r0, #0]
 8004a6e:	e7d6      	b.n	8004a1e <_free_r+0x26>
 8004a70:	6825      	ldr	r5, [r4, #0]
 8004a72:	1961      	adds	r1, r4, r5
 8004a74:	428b      	cmp	r3, r1
 8004a76:	bf04      	itt	eq
 8004a78:	6819      	ldreq	r1, [r3, #0]
 8004a7a:	685b      	ldreq	r3, [r3, #4]
 8004a7c:	6063      	str	r3, [r4, #4]
 8004a7e:	bf04      	itt	eq
 8004a80:	1949      	addeq	r1, r1, r5
 8004a82:	6021      	streq	r1, [r4, #0]
 8004a84:	6054      	str	r4, [r2, #4]
 8004a86:	e7ca      	b.n	8004a1e <_free_r+0x26>
 8004a88:	b003      	add	sp, #12
 8004a8a:	bd30      	pop	{r4, r5, pc}
 8004a8c:	200004e8 	.word	0x200004e8

08004a90 <sbrk_aligned>:
 8004a90:	b570      	push	{r4, r5, r6, lr}
 8004a92:	4e0e      	ldr	r6, [pc, #56]	; (8004acc <sbrk_aligned+0x3c>)
 8004a94:	460c      	mov	r4, r1
 8004a96:	6831      	ldr	r1, [r6, #0]
 8004a98:	4605      	mov	r5, r0
 8004a9a:	b911      	cbnz	r1, 8004aa2 <sbrk_aligned+0x12>
 8004a9c:	f000 fba6 	bl	80051ec <_sbrk_r>
 8004aa0:	6030      	str	r0, [r6, #0]
 8004aa2:	4621      	mov	r1, r4
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	f000 fba1 	bl	80051ec <_sbrk_r>
 8004aaa:	1c43      	adds	r3, r0, #1
 8004aac:	d00a      	beq.n	8004ac4 <sbrk_aligned+0x34>
 8004aae:	1cc4      	adds	r4, r0, #3
 8004ab0:	f024 0403 	bic.w	r4, r4, #3
 8004ab4:	42a0      	cmp	r0, r4
 8004ab6:	d007      	beq.n	8004ac8 <sbrk_aligned+0x38>
 8004ab8:	1a21      	subs	r1, r4, r0
 8004aba:	4628      	mov	r0, r5
 8004abc:	f000 fb96 	bl	80051ec <_sbrk_r>
 8004ac0:	3001      	adds	r0, #1
 8004ac2:	d101      	bne.n	8004ac8 <sbrk_aligned+0x38>
 8004ac4:	f04f 34ff 	mov.w	r4, #4294967295
 8004ac8:	4620      	mov	r0, r4
 8004aca:	bd70      	pop	{r4, r5, r6, pc}
 8004acc:	200004ec 	.word	0x200004ec

08004ad0 <_malloc_r>:
 8004ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ad4:	1ccd      	adds	r5, r1, #3
 8004ad6:	f025 0503 	bic.w	r5, r5, #3
 8004ada:	3508      	adds	r5, #8
 8004adc:	2d0c      	cmp	r5, #12
 8004ade:	bf38      	it	cc
 8004ae0:	250c      	movcc	r5, #12
 8004ae2:	2d00      	cmp	r5, #0
 8004ae4:	4607      	mov	r7, r0
 8004ae6:	db01      	blt.n	8004aec <_malloc_r+0x1c>
 8004ae8:	42a9      	cmp	r1, r5
 8004aea:	d905      	bls.n	8004af8 <_malloc_r+0x28>
 8004aec:	230c      	movs	r3, #12
 8004aee:	603b      	str	r3, [r7, #0]
 8004af0:	2600      	movs	r6, #0
 8004af2:	4630      	mov	r0, r6
 8004af4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004af8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004bcc <_malloc_r+0xfc>
 8004afc:	f000 f868 	bl	8004bd0 <__malloc_lock>
 8004b00:	f8d8 3000 	ldr.w	r3, [r8]
 8004b04:	461c      	mov	r4, r3
 8004b06:	bb5c      	cbnz	r4, 8004b60 <_malloc_r+0x90>
 8004b08:	4629      	mov	r1, r5
 8004b0a:	4638      	mov	r0, r7
 8004b0c:	f7ff ffc0 	bl	8004a90 <sbrk_aligned>
 8004b10:	1c43      	adds	r3, r0, #1
 8004b12:	4604      	mov	r4, r0
 8004b14:	d155      	bne.n	8004bc2 <_malloc_r+0xf2>
 8004b16:	f8d8 4000 	ldr.w	r4, [r8]
 8004b1a:	4626      	mov	r6, r4
 8004b1c:	2e00      	cmp	r6, #0
 8004b1e:	d145      	bne.n	8004bac <_malloc_r+0xdc>
 8004b20:	2c00      	cmp	r4, #0
 8004b22:	d048      	beq.n	8004bb6 <_malloc_r+0xe6>
 8004b24:	6823      	ldr	r3, [r4, #0]
 8004b26:	4631      	mov	r1, r6
 8004b28:	4638      	mov	r0, r7
 8004b2a:	eb04 0903 	add.w	r9, r4, r3
 8004b2e:	f000 fb5d 	bl	80051ec <_sbrk_r>
 8004b32:	4581      	cmp	r9, r0
 8004b34:	d13f      	bne.n	8004bb6 <_malloc_r+0xe6>
 8004b36:	6821      	ldr	r1, [r4, #0]
 8004b38:	1a6d      	subs	r5, r5, r1
 8004b3a:	4629      	mov	r1, r5
 8004b3c:	4638      	mov	r0, r7
 8004b3e:	f7ff ffa7 	bl	8004a90 <sbrk_aligned>
 8004b42:	3001      	adds	r0, #1
 8004b44:	d037      	beq.n	8004bb6 <_malloc_r+0xe6>
 8004b46:	6823      	ldr	r3, [r4, #0]
 8004b48:	442b      	add	r3, r5
 8004b4a:	6023      	str	r3, [r4, #0]
 8004b4c:	f8d8 3000 	ldr.w	r3, [r8]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d038      	beq.n	8004bc6 <_malloc_r+0xf6>
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	42a2      	cmp	r2, r4
 8004b58:	d12b      	bne.n	8004bb2 <_malloc_r+0xe2>
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	605a      	str	r2, [r3, #4]
 8004b5e:	e00f      	b.n	8004b80 <_malloc_r+0xb0>
 8004b60:	6822      	ldr	r2, [r4, #0]
 8004b62:	1b52      	subs	r2, r2, r5
 8004b64:	d41f      	bmi.n	8004ba6 <_malloc_r+0xd6>
 8004b66:	2a0b      	cmp	r2, #11
 8004b68:	d917      	bls.n	8004b9a <_malloc_r+0xca>
 8004b6a:	1961      	adds	r1, r4, r5
 8004b6c:	42a3      	cmp	r3, r4
 8004b6e:	6025      	str	r5, [r4, #0]
 8004b70:	bf18      	it	ne
 8004b72:	6059      	strne	r1, [r3, #4]
 8004b74:	6863      	ldr	r3, [r4, #4]
 8004b76:	bf08      	it	eq
 8004b78:	f8c8 1000 	streq.w	r1, [r8]
 8004b7c:	5162      	str	r2, [r4, r5]
 8004b7e:	604b      	str	r3, [r1, #4]
 8004b80:	4638      	mov	r0, r7
 8004b82:	f104 060b 	add.w	r6, r4, #11
 8004b86:	f000 f829 	bl	8004bdc <__malloc_unlock>
 8004b8a:	f026 0607 	bic.w	r6, r6, #7
 8004b8e:	1d23      	adds	r3, r4, #4
 8004b90:	1af2      	subs	r2, r6, r3
 8004b92:	d0ae      	beq.n	8004af2 <_malloc_r+0x22>
 8004b94:	1b9b      	subs	r3, r3, r6
 8004b96:	50a3      	str	r3, [r4, r2]
 8004b98:	e7ab      	b.n	8004af2 <_malloc_r+0x22>
 8004b9a:	42a3      	cmp	r3, r4
 8004b9c:	6862      	ldr	r2, [r4, #4]
 8004b9e:	d1dd      	bne.n	8004b5c <_malloc_r+0x8c>
 8004ba0:	f8c8 2000 	str.w	r2, [r8]
 8004ba4:	e7ec      	b.n	8004b80 <_malloc_r+0xb0>
 8004ba6:	4623      	mov	r3, r4
 8004ba8:	6864      	ldr	r4, [r4, #4]
 8004baa:	e7ac      	b.n	8004b06 <_malloc_r+0x36>
 8004bac:	4634      	mov	r4, r6
 8004bae:	6876      	ldr	r6, [r6, #4]
 8004bb0:	e7b4      	b.n	8004b1c <_malloc_r+0x4c>
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	e7cc      	b.n	8004b50 <_malloc_r+0x80>
 8004bb6:	230c      	movs	r3, #12
 8004bb8:	603b      	str	r3, [r7, #0]
 8004bba:	4638      	mov	r0, r7
 8004bbc:	f000 f80e 	bl	8004bdc <__malloc_unlock>
 8004bc0:	e797      	b.n	8004af2 <_malloc_r+0x22>
 8004bc2:	6025      	str	r5, [r4, #0]
 8004bc4:	e7dc      	b.n	8004b80 <_malloc_r+0xb0>
 8004bc6:	605b      	str	r3, [r3, #4]
 8004bc8:	deff      	udf	#255	; 0xff
 8004bca:	bf00      	nop
 8004bcc:	200004e8 	.word	0x200004e8

08004bd0 <__malloc_lock>:
 8004bd0:	4801      	ldr	r0, [pc, #4]	; (8004bd8 <__malloc_lock+0x8>)
 8004bd2:	f7ff bf0f 	b.w	80049f4 <__retarget_lock_acquire_recursive>
 8004bd6:	bf00      	nop
 8004bd8:	200004e4 	.word	0x200004e4

08004bdc <__malloc_unlock>:
 8004bdc:	4801      	ldr	r0, [pc, #4]	; (8004be4 <__malloc_unlock+0x8>)
 8004bde:	f7ff bf0a 	b.w	80049f6 <__retarget_lock_release_recursive>
 8004be2:	bf00      	nop
 8004be4:	200004e4 	.word	0x200004e4

08004be8 <__ssputs_r>:
 8004be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bec:	688e      	ldr	r6, [r1, #8]
 8004bee:	461f      	mov	r7, r3
 8004bf0:	42be      	cmp	r6, r7
 8004bf2:	680b      	ldr	r3, [r1, #0]
 8004bf4:	4682      	mov	sl, r0
 8004bf6:	460c      	mov	r4, r1
 8004bf8:	4690      	mov	r8, r2
 8004bfa:	d82c      	bhi.n	8004c56 <__ssputs_r+0x6e>
 8004bfc:	898a      	ldrh	r2, [r1, #12]
 8004bfe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c02:	d026      	beq.n	8004c52 <__ssputs_r+0x6a>
 8004c04:	6965      	ldr	r5, [r4, #20]
 8004c06:	6909      	ldr	r1, [r1, #16]
 8004c08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c0c:	eba3 0901 	sub.w	r9, r3, r1
 8004c10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c14:	1c7b      	adds	r3, r7, #1
 8004c16:	444b      	add	r3, r9
 8004c18:	106d      	asrs	r5, r5, #1
 8004c1a:	429d      	cmp	r5, r3
 8004c1c:	bf38      	it	cc
 8004c1e:	461d      	movcc	r5, r3
 8004c20:	0553      	lsls	r3, r2, #21
 8004c22:	d527      	bpl.n	8004c74 <__ssputs_r+0x8c>
 8004c24:	4629      	mov	r1, r5
 8004c26:	f7ff ff53 	bl	8004ad0 <_malloc_r>
 8004c2a:	4606      	mov	r6, r0
 8004c2c:	b360      	cbz	r0, 8004c88 <__ssputs_r+0xa0>
 8004c2e:	6921      	ldr	r1, [r4, #16]
 8004c30:	464a      	mov	r2, r9
 8004c32:	f000 faeb 	bl	800520c <memcpy>
 8004c36:	89a3      	ldrh	r3, [r4, #12]
 8004c38:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c40:	81a3      	strh	r3, [r4, #12]
 8004c42:	6126      	str	r6, [r4, #16]
 8004c44:	6165      	str	r5, [r4, #20]
 8004c46:	444e      	add	r6, r9
 8004c48:	eba5 0509 	sub.w	r5, r5, r9
 8004c4c:	6026      	str	r6, [r4, #0]
 8004c4e:	60a5      	str	r5, [r4, #8]
 8004c50:	463e      	mov	r6, r7
 8004c52:	42be      	cmp	r6, r7
 8004c54:	d900      	bls.n	8004c58 <__ssputs_r+0x70>
 8004c56:	463e      	mov	r6, r7
 8004c58:	6820      	ldr	r0, [r4, #0]
 8004c5a:	4632      	mov	r2, r6
 8004c5c:	4641      	mov	r1, r8
 8004c5e:	f000 faab 	bl	80051b8 <memmove>
 8004c62:	68a3      	ldr	r3, [r4, #8]
 8004c64:	1b9b      	subs	r3, r3, r6
 8004c66:	60a3      	str	r3, [r4, #8]
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	4433      	add	r3, r6
 8004c6c:	6023      	str	r3, [r4, #0]
 8004c6e:	2000      	movs	r0, #0
 8004c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c74:	462a      	mov	r2, r5
 8004c76:	f000 fad7 	bl	8005228 <_realloc_r>
 8004c7a:	4606      	mov	r6, r0
 8004c7c:	2800      	cmp	r0, #0
 8004c7e:	d1e0      	bne.n	8004c42 <__ssputs_r+0x5a>
 8004c80:	6921      	ldr	r1, [r4, #16]
 8004c82:	4650      	mov	r0, sl
 8004c84:	f7ff feb8 	bl	80049f8 <_free_r>
 8004c88:	230c      	movs	r3, #12
 8004c8a:	f8ca 3000 	str.w	r3, [sl]
 8004c8e:	89a3      	ldrh	r3, [r4, #12]
 8004c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c94:	81a3      	strh	r3, [r4, #12]
 8004c96:	f04f 30ff 	mov.w	r0, #4294967295
 8004c9a:	e7e9      	b.n	8004c70 <__ssputs_r+0x88>

08004c9c <_svfiprintf_r>:
 8004c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca0:	4698      	mov	r8, r3
 8004ca2:	898b      	ldrh	r3, [r1, #12]
 8004ca4:	061b      	lsls	r3, r3, #24
 8004ca6:	b09d      	sub	sp, #116	; 0x74
 8004ca8:	4607      	mov	r7, r0
 8004caa:	460d      	mov	r5, r1
 8004cac:	4614      	mov	r4, r2
 8004cae:	d50e      	bpl.n	8004cce <_svfiprintf_r+0x32>
 8004cb0:	690b      	ldr	r3, [r1, #16]
 8004cb2:	b963      	cbnz	r3, 8004cce <_svfiprintf_r+0x32>
 8004cb4:	2140      	movs	r1, #64	; 0x40
 8004cb6:	f7ff ff0b 	bl	8004ad0 <_malloc_r>
 8004cba:	6028      	str	r0, [r5, #0]
 8004cbc:	6128      	str	r0, [r5, #16]
 8004cbe:	b920      	cbnz	r0, 8004cca <_svfiprintf_r+0x2e>
 8004cc0:	230c      	movs	r3, #12
 8004cc2:	603b      	str	r3, [r7, #0]
 8004cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc8:	e0d0      	b.n	8004e6c <_svfiprintf_r+0x1d0>
 8004cca:	2340      	movs	r3, #64	; 0x40
 8004ccc:	616b      	str	r3, [r5, #20]
 8004cce:	2300      	movs	r3, #0
 8004cd0:	9309      	str	r3, [sp, #36]	; 0x24
 8004cd2:	2320      	movs	r3, #32
 8004cd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cdc:	2330      	movs	r3, #48	; 0x30
 8004cde:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004e84 <_svfiprintf_r+0x1e8>
 8004ce2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ce6:	f04f 0901 	mov.w	r9, #1
 8004cea:	4623      	mov	r3, r4
 8004cec:	469a      	mov	sl, r3
 8004cee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cf2:	b10a      	cbz	r2, 8004cf8 <_svfiprintf_r+0x5c>
 8004cf4:	2a25      	cmp	r2, #37	; 0x25
 8004cf6:	d1f9      	bne.n	8004cec <_svfiprintf_r+0x50>
 8004cf8:	ebba 0b04 	subs.w	fp, sl, r4
 8004cfc:	d00b      	beq.n	8004d16 <_svfiprintf_r+0x7a>
 8004cfe:	465b      	mov	r3, fp
 8004d00:	4622      	mov	r2, r4
 8004d02:	4629      	mov	r1, r5
 8004d04:	4638      	mov	r0, r7
 8004d06:	f7ff ff6f 	bl	8004be8 <__ssputs_r>
 8004d0a:	3001      	adds	r0, #1
 8004d0c:	f000 80a9 	beq.w	8004e62 <_svfiprintf_r+0x1c6>
 8004d10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d12:	445a      	add	r2, fp
 8004d14:	9209      	str	r2, [sp, #36]	; 0x24
 8004d16:	f89a 3000 	ldrb.w	r3, [sl]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 80a1 	beq.w	8004e62 <_svfiprintf_r+0x1c6>
 8004d20:	2300      	movs	r3, #0
 8004d22:	f04f 32ff 	mov.w	r2, #4294967295
 8004d26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d2a:	f10a 0a01 	add.w	sl, sl, #1
 8004d2e:	9304      	str	r3, [sp, #16]
 8004d30:	9307      	str	r3, [sp, #28]
 8004d32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d36:	931a      	str	r3, [sp, #104]	; 0x68
 8004d38:	4654      	mov	r4, sl
 8004d3a:	2205      	movs	r2, #5
 8004d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d40:	4850      	ldr	r0, [pc, #320]	; (8004e84 <_svfiprintf_r+0x1e8>)
 8004d42:	f7fb fa4d 	bl	80001e0 <memchr>
 8004d46:	9a04      	ldr	r2, [sp, #16]
 8004d48:	b9d8      	cbnz	r0, 8004d82 <_svfiprintf_r+0xe6>
 8004d4a:	06d0      	lsls	r0, r2, #27
 8004d4c:	bf44      	itt	mi
 8004d4e:	2320      	movmi	r3, #32
 8004d50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d54:	0711      	lsls	r1, r2, #28
 8004d56:	bf44      	itt	mi
 8004d58:	232b      	movmi	r3, #43	; 0x2b
 8004d5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8004d62:	2b2a      	cmp	r3, #42	; 0x2a
 8004d64:	d015      	beq.n	8004d92 <_svfiprintf_r+0xf6>
 8004d66:	9a07      	ldr	r2, [sp, #28]
 8004d68:	4654      	mov	r4, sl
 8004d6a:	2000      	movs	r0, #0
 8004d6c:	f04f 0c0a 	mov.w	ip, #10
 8004d70:	4621      	mov	r1, r4
 8004d72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d76:	3b30      	subs	r3, #48	; 0x30
 8004d78:	2b09      	cmp	r3, #9
 8004d7a:	d94d      	bls.n	8004e18 <_svfiprintf_r+0x17c>
 8004d7c:	b1b0      	cbz	r0, 8004dac <_svfiprintf_r+0x110>
 8004d7e:	9207      	str	r2, [sp, #28]
 8004d80:	e014      	b.n	8004dac <_svfiprintf_r+0x110>
 8004d82:	eba0 0308 	sub.w	r3, r0, r8
 8004d86:	fa09 f303 	lsl.w	r3, r9, r3
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	9304      	str	r3, [sp, #16]
 8004d8e:	46a2      	mov	sl, r4
 8004d90:	e7d2      	b.n	8004d38 <_svfiprintf_r+0x9c>
 8004d92:	9b03      	ldr	r3, [sp, #12]
 8004d94:	1d19      	adds	r1, r3, #4
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	9103      	str	r1, [sp, #12]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	bfbb      	ittet	lt
 8004d9e:	425b      	neglt	r3, r3
 8004da0:	f042 0202 	orrlt.w	r2, r2, #2
 8004da4:	9307      	strge	r3, [sp, #28]
 8004da6:	9307      	strlt	r3, [sp, #28]
 8004da8:	bfb8      	it	lt
 8004daa:	9204      	strlt	r2, [sp, #16]
 8004dac:	7823      	ldrb	r3, [r4, #0]
 8004dae:	2b2e      	cmp	r3, #46	; 0x2e
 8004db0:	d10c      	bne.n	8004dcc <_svfiprintf_r+0x130>
 8004db2:	7863      	ldrb	r3, [r4, #1]
 8004db4:	2b2a      	cmp	r3, #42	; 0x2a
 8004db6:	d134      	bne.n	8004e22 <_svfiprintf_r+0x186>
 8004db8:	9b03      	ldr	r3, [sp, #12]
 8004dba:	1d1a      	adds	r2, r3, #4
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	9203      	str	r2, [sp, #12]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	bfb8      	it	lt
 8004dc4:	f04f 33ff 	movlt.w	r3, #4294967295
 8004dc8:	3402      	adds	r4, #2
 8004dca:	9305      	str	r3, [sp, #20]
 8004dcc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004e94 <_svfiprintf_r+0x1f8>
 8004dd0:	7821      	ldrb	r1, [r4, #0]
 8004dd2:	2203      	movs	r2, #3
 8004dd4:	4650      	mov	r0, sl
 8004dd6:	f7fb fa03 	bl	80001e0 <memchr>
 8004dda:	b138      	cbz	r0, 8004dec <_svfiprintf_r+0x150>
 8004ddc:	9b04      	ldr	r3, [sp, #16]
 8004dde:	eba0 000a 	sub.w	r0, r0, sl
 8004de2:	2240      	movs	r2, #64	; 0x40
 8004de4:	4082      	lsls	r2, r0
 8004de6:	4313      	orrs	r3, r2
 8004de8:	3401      	adds	r4, #1
 8004dea:	9304      	str	r3, [sp, #16]
 8004dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004df0:	4825      	ldr	r0, [pc, #148]	; (8004e88 <_svfiprintf_r+0x1ec>)
 8004df2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004df6:	2206      	movs	r2, #6
 8004df8:	f7fb f9f2 	bl	80001e0 <memchr>
 8004dfc:	2800      	cmp	r0, #0
 8004dfe:	d038      	beq.n	8004e72 <_svfiprintf_r+0x1d6>
 8004e00:	4b22      	ldr	r3, [pc, #136]	; (8004e8c <_svfiprintf_r+0x1f0>)
 8004e02:	bb1b      	cbnz	r3, 8004e4c <_svfiprintf_r+0x1b0>
 8004e04:	9b03      	ldr	r3, [sp, #12]
 8004e06:	3307      	adds	r3, #7
 8004e08:	f023 0307 	bic.w	r3, r3, #7
 8004e0c:	3308      	adds	r3, #8
 8004e0e:	9303      	str	r3, [sp, #12]
 8004e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e12:	4433      	add	r3, r6
 8004e14:	9309      	str	r3, [sp, #36]	; 0x24
 8004e16:	e768      	b.n	8004cea <_svfiprintf_r+0x4e>
 8004e18:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e1c:	460c      	mov	r4, r1
 8004e1e:	2001      	movs	r0, #1
 8004e20:	e7a6      	b.n	8004d70 <_svfiprintf_r+0xd4>
 8004e22:	2300      	movs	r3, #0
 8004e24:	3401      	adds	r4, #1
 8004e26:	9305      	str	r3, [sp, #20]
 8004e28:	4619      	mov	r1, r3
 8004e2a:	f04f 0c0a 	mov.w	ip, #10
 8004e2e:	4620      	mov	r0, r4
 8004e30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e34:	3a30      	subs	r2, #48	; 0x30
 8004e36:	2a09      	cmp	r2, #9
 8004e38:	d903      	bls.n	8004e42 <_svfiprintf_r+0x1a6>
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0c6      	beq.n	8004dcc <_svfiprintf_r+0x130>
 8004e3e:	9105      	str	r1, [sp, #20]
 8004e40:	e7c4      	b.n	8004dcc <_svfiprintf_r+0x130>
 8004e42:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e46:	4604      	mov	r4, r0
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e7f0      	b.n	8004e2e <_svfiprintf_r+0x192>
 8004e4c:	ab03      	add	r3, sp, #12
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	462a      	mov	r2, r5
 8004e52:	4b0f      	ldr	r3, [pc, #60]	; (8004e90 <_svfiprintf_r+0x1f4>)
 8004e54:	a904      	add	r1, sp, #16
 8004e56:	4638      	mov	r0, r7
 8004e58:	f3af 8000 	nop.w
 8004e5c:	1c42      	adds	r2, r0, #1
 8004e5e:	4606      	mov	r6, r0
 8004e60:	d1d6      	bne.n	8004e10 <_svfiprintf_r+0x174>
 8004e62:	89ab      	ldrh	r3, [r5, #12]
 8004e64:	065b      	lsls	r3, r3, #25
 8004e66:	f53f af2d 	bmi.w	8004cc4 <_svfiprintf_r+0x28>
 8004e6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e6c:	b01d      	add	sp, #116	; 0x74
 8004e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e72:	ab03      	add	r3, sp, #12
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	462a      	mov	r2, r5
 8004e78:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <_svfiprintf_r+0x1f4>)
 8004e7a:	a904      	add	r1, sp, #16
 8004e7c:	4638      	mov	r0, r7
 8004e7e:	f000 f879 	bl	8004f74 <_printf_i>
 8004e82:	e7eb      	b.n	8004e5c <_svfiprintf_r+0x1c0>
 8004e84:	08005328 	.word	0x08005328
 8004e88:	08005332 	.word	0x08005332
 8004e8c:	00000000 	.word	0x00000000
 8004e90:	08004be9 	.word	0x08004be9
 8004e94:	0800532e 	.word	0x0800532e

08004e98 <_printf_common>:
 8004e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e9c:	4616      	mov	r6, r2
 8004e9e:	4699      	mov	r9, r3
 8004ea0:	688a      	ldr	r2, [r1, #8]
 8004ea2:	690b      	ldr	r3, [r1, #16]
 8004ea4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	bfb8      	it	lt
 8004eac:	4613      	movlt	r3, r2
 8004eae:	6033      	str	r3, [r6, #0]
 8004eb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004eb4:	4607      	mov	r7, r0
 8004eb6:	460c      	mov	r4, r1
 8004eb8:	b10a      	cbz	r2, 8004ebe <_printf_common+0x26>
 8004eba:	3301      	adds	r3, #1
 8004ebc:	6033      	str	r3, [r6, #0]
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	0699      	lsls	r1, r3, #26
 8004ec2:	bf42      	ittt	mi
 8004ec4:	6833      	ldrmi	r3, [r6, #0]
 8004ec6:	3302      	addmi	r3, #2
 8004ec8:	6033      	strmi	r3, [r6, #0]
 8004eca:	6825      	ldr	r5, [r4, #0]
 8004ecc:	f015 0506 	ands.w	r5, r5, #6
 8004ed0:	d106      	bne.n	8004ee0 <_printf_common+0x48>
 8004ed2:	f104 0a19 	add.w	sl, r4, #25
 8004ed6:	68e3      	ldr	r3, [r4, #12]
 8004ed8:	6832      	ldr	r2, [r6, #0]
 8004eda:	1a9b      	subs	r3, r3, r2
 8004edc:	42ab      	cmp	r3, r5
 8004ede:	dc26      	bgt.n	8004f2e <_printf_common+0x96>
 8004ee0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ee4:	1e13      	subs	r3, r2, #0
 8004ee6:	6822      	ldr	r2, [r4, #0]
 8004ee8:	bf18      	it	ne
 8004eea:	2301      	movne	r3, #1
 8004eec:	0692      	lsls	r2, r2, #26
 8004eee:	d42b      	bmi.n	8004f48 <_printf_common+0xb0>
 8004ef0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ef4:	4649      	mov	r1, r9
 8004ef6:	4638      	mov	r0, r7
 8004ef8:	47c0      	blx	r8
 8004efa:	3001      	adds	r0, #1
 8004efc:	d01e      	beq.n	8004f3c <_printf_common+0xa4>
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	6922      	ldr	r2, [r4, #16]
 8004f02:	f003 0306 	and.w	r3, r3, #6
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	bf02      	ittt	eq
 8004f0a:	68e5      	ldreq	r5, [r4, #12]
 8004f0c:	6833      	ldreq	r3, [r6, #0]
 8004f0e:	1aed      	subeq	r5, r5, r3
 8004f10:	68a3      	ldr	r3, [r4, #8]
 8004f12:	bf0c      	ite	eq
 8004f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f18:	2500      	movne	r5, #0
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	bfc4      	itt	gt
 8004f1e:	1a9b      	subgt	r3, r3, r2
 8004f20:	18ed      	addgt	r5, r5, r3
 8004f22:	2600      	movs	r6, #0
 8004f24:	341a      	adds	r4, #26
 8004f26:	42b5      	cmp	r5, r6
 8004f28:	d11a      	bne.n	8004f60 <_printf_common+0xc8>
 8004f2a:	2000      	movs	r0, #0
 8004f2c:	e008      	b.n	8004f40 <_printf_common+0xa8>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	4652      	mov	r2, sl
 8004f32:	4649      	mov	r1, r9
 8004f34:	4638      	mov	r0, r7
 8004f36:	47c0      	blx	r8
 8004f38:	3001      	adds	r0, #1
 8004f3a:	d103      	bne.n	8004f44 <_printf_common+0xac>
 8004f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f44:	3501      	adds	r5, #1
 8004f46:	e7c6      	b.n	8004ed6 <_printf_common+0x3e>
 8004f48:	18e1      	adds	r1, r4, r3
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	2030      	movs	r0, #48	; 0x30
 8004f4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f52:	4422      	add	r2, r4
 8004f54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f5c:	3302      	adds	r3, #2
 8004f5e:	e7c7      	b.n	8004ef0 <_printf_common+0x58>
 8004f60:	2301      	movs	r3, #1
 8004f62:	4622      	mov	r2, r4
 8004f64:	4649      	mov	r1, r9
 8004f66:	4638      	mov	r0, r7
 8004f68:	47c0      	blx	r8
 8004f6a:	3001      	adds	r0, #1
 8004f6c:	d0e6      	beq.n	8004f3c <_printf_common+0xa4>
 8004f6e:	3601      	adds	r6, #1
 8004f70:	e7d9      	b.n	8004f26 <_printf_common+0x8e>
	...

08004f74 <_printf_i>:
 8004f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f78:	7e0f      	ldrb	r7, [r1, #24]
 8004f7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f7c:	2f78      	cmp	r7, #120	; 0x78
 8004f7e:	4691      	mov	r9, r2
 8004f80:	4680      	mov	r8, r0
 8004f82:	460c      	mov	r4, r1
 8004f84:	469a      	mov	sl, r3
 8004f86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f8a:	d807      	bhi.n	8004f9c <_printf_i+0x28>
 8004f8c:	2f62      	cmp	r7, #98	; 0x62
 8004f8e:	d80a      	bhi.n	8004fa6 <_printf_i+0x32>
 8004f90:	2f00      	cmp	r7, #0
 8004f92:	f000 80d4 	beq.w	800513e <_printf_i+0x1ca>
 8004f96:	2f58      	cmp	r7, #88	; 0x58
 8004f98:	f000 80c0 	beq.w	800511c <_printf_i+0x1a8>
 8004f9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fa4:	e03a      	b.n	800501c <_printf_i+0xa8>
 8004fa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004faa:	2b15      	cmp	r3, #21
 8004fac:	d8f6      	bhi.n	8004f9c <_printf_i+0x28>
 8004fae:	a101      	add	r1, pc, #4	; (adr r1, 8004fb4 <_printf_i+0x40>)
 8004fb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fb4:	0800500d 	.word	0x0800500d
 8004fb8:	08005021 	.word	0x08005021
 8004fbc:	08004f9d 	.word	0x08004f9d
 8004fc0:	08004f9d 	.word	0x08004f9d
 8004fc4:	08004f9d 	.word	0x08004f9d
 8004fc8:	08004f9d 	.word	0x08004f9d
 8004fcc:	08005021 	.word	0x08005021
 8004fd0:	08004f9d 	.word	0x08004f9d
 8004fd4:	08004f9d 	.word	0x08004f9d
 8004fd8:	08004f9d 	.word	0x08004f9d
 8004fdc:	08004f9d 	.word	0x08004f9d
 8004fe0:	08005125 	.word	0x08005125
 8004fe4:	0800504d 	.word	0x0800504d
 8004fe8:	080050df 	.word	0x080050df
 8004fec:	08004f9d 	.word	0x08004f9d
 8004ff0:	08004f9d 	.word	0x08004f9d
 8004ff4:	08005147 	.word	0x08005147
 8004ff8:	08004f9d 	.word	0x08004f9d
 8004ffc:	0800504d 	.word	0x0800504d
 8005000:	08004f9d 	.word	0x08004f9d
 8005004:	08004f9d 	.word	0x08004f9d
 8005008:	080050e7 	.word	0x080050e7
 800500c:	682b      	ldr	r3, [r5, #0]
 800500e:	1d1a      	adds	r2, r3, #4
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	602a      	str	r2, [r5, #0]
 8005014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005018:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800501c:	2301      	movs	r3, #1
 800501e:	e09f      	b.n	8005160 <_printf_i+0x1ec>
 8005020:	6820      	ldr	r0, [r4, #0]
 8005022:	682b      	ldr	r3, [r5, #0]
 8005024:	0607      	lsls	r7, r0, #24
 8005026:	f103 0104 	add.w	r1, r3, #4
 800502a:	6029      	str	r1, [r5, #0]
 800502c:	d501      	bpl.n	8005032 <_printf_i+0xbe>
 800502e:	681e      	ldr	r6, [r3, #0]
 8005030:	e003      	b.n	800503a <_printf_i+0xc6>
 8005032:	0646      	lsls	r6, r0, #25
 8005034:	d5fb      	bpl.n	800502e <_printf_i+0xba>
 8005036:	f9b3 6000 	ldrsh.w	r6, [r3]
 800503a:	2e00      	cmp	r6, #0
 800503c:	da03      	bge.n	8005046 <_printf_i+0xd2>
 800503e:	232d      	movs	r3, #45	; 0x2d
 8005040:	4276      	negs	r6, r6
 8005042:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005046:	485a      	ldr	r0, [pc, #360]	; (80051b0 <_printf_i+0x23c>)
 8005048:	230a      	movs	r3, #10
 800504a:	e012      	b.n	8005072 <_printf_i+0xfe>
 800504c:	682b      	ldr	r3, [r5, #0]
 800504e:	6820      	ldr	r0, [r4, #0]
 8005050:	1d19      	adds	r1, r3, #4
 8005052:	6029      	str	r1, [r5, #0]
 8005054:	0605      	lsls	r5, r0, #24
 8005056:	d501      	bpl.n	800505c <_printf_i+0xe8>
 8005058:	681e      	ldr	r6, [r3, #0]
 800505a:	e002      	b.n	8005062 <_printf_i+0xee>
 800505c:	0641      	lsls	r1, r0, #25
 800505e:	d5fb      	bpl.n	8005058 <_printf_i+0xe4>
 8005060:	881e      	ldrh	r6, [r3, #0]
 8005062:	4853      	ldr	r0, [pc, #332]	; (80051b0 <_printf_i+0x23c>)
 8005064:	2f6f      	cmp	r7, #111	; 0x6f
 8005066:	bf0c      	ite	eq
 8005068:	2308      	moveq	r3, #8
 800506a:	230a      	movne	r3, #10
 800506c:	2100      	movs	r1, #0
 800506e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005072:	6865      	ldr	r5, [r4, #4]
 8005074:	60a5      	str	r5, [r4, #8]
 8005076:	2d00      	cmp	r5, #0
 8005078:	bfa2      	ittt	ge
 800507a:	6821      	ldrge	r1, [r4, #0]
 800507c:	f021 0104 	bicge.w	r1, r1, #4
 8005080:	6021      	strge	r1, [r4, #0]
 8005082:	b90e      	cbnz	r6, 8005088 <_printf_i+0x114>
 8005084:	2d00      	cmp	r5, #0
 8005086:	d04b      	beq.n	8005120 <_printf_i+0x1ac>
 8005088:	4615      	mov	r5, r2
 800508a:	fbb6 f1f3 	udiv	r1, r6, r3
 800508e:	fb03 6711 	mls	r7, r3, r1, r6
 8005092:	5dc7      	ldrb	r7, [r0, r7]
 8005094:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005098:	4637      	mov	r7, r6
 800509a:	42bb      	cmp	r3, r7
 800509c:	460e      	mov	r6, r1
 800509e:	d9f4      	bls.n	800508a <_printf_i+0x116>
 80050a0:	2b08      	cmp	r3, #8
 80050a2:	d10b      	bne.n	80050bc <_printf_i+0x148>
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	07de      	lsls	r6, r3, #31
 80050a8:	d508      	bpl.n	80050bc <_printf_i+0x148>
 80050aa:	6923      	ldr	r3, [r4, #16]
 80050ac:	6861      	ldr	r1, [r4, #4]
 80050ae:	4299      	cmp	r1, r3
 80050b0:	bfde      	ittt	le
 80050b2:	2330      	movle	r3, #48	; 0x30
 80050b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050bc:	1b52      	subs	r2, r2, r5
 80050be:	6122      	str	r2, [r4, #16]
 80050c0:	f8cd a000 	str.w	sl, [sp]
 80050c4:	464b      	mov	r3, r9
 80050c6:	aa03      	add	r2, sp, #12
 80050c8:	4621      	mov	r1, r4
 80050ca:	4640      	mov	r0, r8
 80050cc:	f7ff fee4 	bl	8004e98 <_printf_common>
 80050d0:	3001      	adds	r0, #1
 80050d2:	d14a      	bne.n	800516a <_printf_i+0x1f6>
 80050d4:	f04f 30ff 	mov.w	r0, #4294967295
 80050d8:	b004      	add	sp, #16
 80050da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	f043 0320 	orr.w	r3, r3, #32
 80050e4:	6023      	str	r3, [r4, #0]
 80050e6:	4833      	ldr	r0, [pc, #204]	; (80051b4 <_printf_i+0x240>)
 80050e8:	2778      	movs	r7, #120	; 0x78
 80050ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80050ee:	6823      	ldr	r3, [r4, #0]
 80050f0:	6829      	ldr	r1, [r5, #0]
 80050f2:	061f      	lsls	r7, r3, #24
 80050f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80050f8:	d402      	bmi.n	8005100 <_printf_i+0x18c>
 80050fa:	065f      	lsls	r7, r3, #25
 80050fc:	bf48      	it	mi
 80050fe:	b2b6      	uxthmi	r6, r6
 8005100:	07df      	lsls	r7, r3, #31
 8005102:	bf48      	it	mi
 8005104:	f043 0320 	orrmi.w	r3, r3, #32
 8005108:	6029      	str	r1, [r5, #0]
 800510a:	bf48      	it	mi
 800510c:	6023      	strmi	r3, [r4, #0]
 800510e:	b91e      	cbnz	r6, 8005118 <_printf_i+0x1a4>
 8005110:	6823      	ldr	r3, [r4, #0]
 8005112:	f023 0320 	bic.w	r3, r3, #32
 8005116:	6023      	str	r3, [r4, #0]
 8005118:	2310      	movs	r3, #16
 800511a:	e7a7      	b.n	800506c <_printf_i+0xf8>
 800511c:	4824      	ldr	r0, [pc, #144]	; (80051b0 <_printf_i+0x23c>)
 800511e:	e7e4      	b.n	80050ea <_printf_i+0x176>
 8005120:	4615      	mov	r5, r2
 8005122:	e7bd      	b.n	80050a0 <_printf_i+0x12c>
 8005124:	682b      	ldr	r3, [r5, #0]
 8005126:	6826      	ldr	r6, [r4, #0]
 8005128:	6961      	ldr	r1, [r4, #20]
 800512a:	1d18      	adds	r0, r3, #4
 800512c:	6028      	str	r0, [r5, #0]
 800512e:	0635      	lsls	r5, r6, #24
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	d501      	bpl.n	8005138 <_printf_i+0x1c4>
 8005134:	6019      	str	r1, [r3, #0]
 8005136:	e002      	b.n	800513e <_printf_i+0x1ca>
 8005138:	0670      	lsls	r0, r6, #25
 800513a:	d5fb      	bpl.n	8005134 <_printf_i+0x1c0>
 800513c:	8019      	strh	r1, [r3, #0]
 800513e:	2300      	movs	r3, #0
 8005140:	6123      	str	r3, [r4, #16]
 8005142:	4615      	mov	r5, r2
 8005144:	e7bc      	b.n	80050c0 <_printf_i+0x14c>
 8005146:	682b      	ldr	r3, [r5, #0]
 8005148:	1d1a      	adds	r2, r3, #4
 800514a:	602a      	str	r2, [r5, #0]
 800514c:	681d      	ldr	r5, [r3, #0]
 800514e:	6862      	ldr	r2, [r4, #4]
 8005150:	2100      	movs	r1, #0
 8005152:	4628      	mov	r0, r5
 8005154:	f7fb f844 	bl	80001e0 <memchr>
 8005158:	b108      	cbz	r0, 800515e <_printf_i+0x1ea>
 800515a:	1b40      	subs	r0, r0, r5
 800515c:	6060      	str	r0, [r4, #4]
 800515e:	6863      	ldr	r3, [r4, #4]
 8005160:	6123      	str	r3, [r4, #16]
 8005162:	2300      	movs	r3, #0
 8005164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005168:	e7aa      	b.n	80050c0 <_printf_i+0x14c>
 800516a:	6923      	ldr	r3, [r4, #16]
 800516c:	462a      	mov	r2, r5
 800516e:	4649      	mov	r1, r9
 8005170:	4640      	mov	r0, r8
 8005172:	47d0      	blx	sl
 8005174:	3001      	adds	r0, #1
 8005176:	d0ad      	beq.n	80050d4 <_printf_i+0x160>
 8005178:	6823      	ldr	r3, [r4, #0]
 800517a:	079b      	lsls	r3, r3, #30
 800517c:	d413      	bmi.n	80051a6 <_printf_i+0x232>
 800517e:	68e0      	ldr	r0, [r4, #12]
 8005180:	9b03      	ldr	r3, [sp, #12]
 8005182:	4298      	cmp	r0, r3
 8005184:	bfb8      	it	lt
 8005186:	4618      	movlt	r0, r3
 8005188:	e7a6      	b.n	80050d8 <_printf_i+0x164>
 800518a:	2301      	movs	r3, #1
 800518c:	4632      	mov	r2, r6
 800518e:	4649      	mov	r1, r9
 8005190:	4640      	mov	r0, r8
 8005192:	47d0      	blx	sl
 8005194:	3001      	adds	r0, #1
 8005196:	d09d      	beq.n	80050d4 <_printf_i+0x160>
 8005198:	3501      	adds	r5, #1
 800519a:	68e3      	ldr	r3, [r4, #12]
 800519c:	9903      	ldr	r1, [sp, #12]
 800519e:	1a5b      	subs	r3, r3, r1
 80051a0:	42ab      	cmp	r3, r5
 80051a2:	dcf2      	bgt.n	800518a <_printf_i+0x216>
 80051a4:	e7eb      	b.n	800517e <_printf_i+0x20a>
 80051a6:	2500      	movs	r5, #0
 80051a8:	f104 0619 	add.w	r6, r4, #25
 80051ac:	e7f5      	b.n	800519a <_printf_i+0x226>
 80051ae:	bf00      	nop
 80051b0:	08005339 	.word	0x08005339
 80051b4:	0800534a 	.word	0x0800534a

080051b8 <memmove>:
 80051b8:	4288      	cmp	r0, r1
 80051ba:	b510      	push	{r4, lr}
 80051bc:	eb01 0402 	add.w	r4, r1, r2
 80051c0:	d902      	bls.n	80051c8 <memmove+0x10>
 80051c2:	4284      	cmp	r4, r0
 80051c4:	4623      	mov	r3, r4
 80051c6:	d807      	bhi.n	80051d8 <memmove+0x20>
 80051c8:	1e43      	subs	r3, r0, #1
 80051ca:	42a1      	cmp	r1, r4
 80051cc:	d008      	beq.n	80051e0 <memmove+0x28>
 80051ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051d6:	e7f8      	b.n	80051ca <memmove+0x12>
 80051d8:	4402      	add	r2, r0
 80051da:	4601      	mov	r1, r0
 80051dc:	428a      	cmp	r2, r1
 80051de:	d100      	bne.n	80051e2 <memmove+0x2a>
 80051e0:	bd10      	pop	{r4, pc}
 80051e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80051ea:	e7f7      	b.n	80051dc <memmove+0x24>

080051ec <_sbrk_r>:
 80051ec:	b538      	push	{r3, r4, r5, lr}
 80051ee:	4d06      	ldr	r5, [pc, #24]	; (8005208 <_sbrk_r+0x1c>)
 80051f0:	2300      	movs	r3, #0
 80051f2:	4604      	mov	r4, r0
 80051f4:	4608      	mov	r0, r1
 80051f6:	602b      	str	r3, [r5, #0]
 80051f8:	f7fb fdfc 	bl	8000df4 <_sbrk>
 80051fc:	1c43      	adds	r3, r0, #1
 80051fe:	d102      	bne.n	8005206 <_sbrk_r+0x1a>
 8005200:	682b      	ldr	r3, [r5, #0]
 8005202:	b103      	cbz	r3, 8005206 <_sbrk_r+0x1a>
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	bd38      	pop	{r3, r4, r5, pc}
 8005208:	200004e0 	.word	0x200004e0

0800520c <memcpy>:
 800520c:	440a      	add	r2, r1
 800520e:	4291      	cmp	r1, r2
 8005210:	f100 33ff 	add.w	r3, r0, #4294967295
 8005214:	d100      	bne.n	8005218 <memcpy+0xc>
 8005216:	4770      	bx	lr
 8005218:	b510      	push	{r4, lr}
 800521a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800521e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005222:	4291      	cmp	r1, r2
 8005224:	d1f9      	bne.n	800521a <memcpy+0xe>
 8005226:	bd10      	pop	{r4, pc}

08005228 <_realloc_r>:
 8005228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800522c:	4680      	mov	r8, r0
 800522e:	4614      	mov	r4, r2
 8005230:	460e      	mov	r6, r1
 8005232:	b921      	cbnz	r1, 800523e <_realloc_r+0x16>
 8005234:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005238:	4611      	mov	r1, r2
 800523a:	f7ff bc49 	b.w	8004ad0 <_malloc_r>
 800523e:	b92a      	cbnz	r2, 800524c <_realloc_r+0x24>
 8005240:	f7ff fbda 	bl	80049f8 <_free_r>
 8005244:	4625      	mov	r5, r4
 8005246:	4628      	mov	r0, r5
 8005248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800524c:	f000 f81b 	bl	8005286 <_malloc_usable_size_r>
 8005250:	4284      	cmp	r4, r0
 8005252:	4607      	mov	r7, r0
 8005254:	d802      	bhi.n	800525c <_realloc_r+0x34>
 8005256:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800525a:	d812      	bhi.n	8005282 <_realloc_r+0x5a>
 800525c:	4621      	mov	r1, r4
 800525e:	4640      	mov	r0, r8
 8005260:	f7ff fc36 	bl	8004ad0 <_malloc_r>
 8005264:	4605      	mov	r5, r0
 8005266:	2800      	cmp	r0, #0
 8005268:	d0ed      	beq.n	8005246 <_realloc_r+0x1e>
 800526a:	42bc      	cmp	r4, r7
 800526c:	4622      	mov	r2, r4
 800526e:	4631      	mov	r1, r6
 8005270:	bf28      	it	cs
 8005272:	463a      	movcs	r2, r7
 8005274:	f7ff ffca 	bl	800520c <memcpy>
 8005278:	4631      	mov	r1, r6
 800527a:	4640      	mov	r0, r8
 800527c:	f7ff fbbc 	bl	80049f8 <_free_r>
 8005280:	e7e1      	b.n	8005246 <_realloc_r+0x1e>
 8005282:	4635      	mov	r5, r6
 8005284:	e7df      	b.n	8005246 <_realloc_r+0x1e>

08005286 <_malloc_usable_size_r>:
 8005286:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800528a:	1f18      	subs	r0, r3, #4
 800528c:	2b00      	cmp	r3, #0
 800528e:	bfbc      	itt	lt
 8005290:	580b      	ldrlt	r3, [r1, r0]
 8005292:	18c0      	addlt	r0, r0, r3
 8005294:	4770      	bx	lr
	...

08005298 <_init>:
 8005298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529a:	bf00      	nop
 800529c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800529e:	bc08      	pop	{r3}
 80052a0:	469e      	mov	lr, r3
 80052a2:	4770      	bx	lr

080052a4 <_fini>:
 80052a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a6:	bf00      	nop
 80052a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052aa:	bc08      	pop	{r3}
 80052ac:	469e      	mov	lr, r3
 80052ae:	4770      	bx	lr
