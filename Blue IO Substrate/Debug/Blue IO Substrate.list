
Blue IO Substrate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009270  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  08009400  08009400  00019400  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098d8  080098d8  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080098d8  080098d8  000198d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098e0  080098e0  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098e0  080098e0  000198e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098e4  080098e4  000198e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080098e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          000003a0  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000574  20000574  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010ae2  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002926  00000000  00000000  00030d29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f40  00000000  00000000  00033650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000bcd  00000000  00000000  00034590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000242ec  00000000  00000000  0003515d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013189  00000000  00000000  00059449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dc73d  00000000  00000000  0006c5d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000546c  00000000  00000000  00148d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0014e17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080093e8 	.word	0x080093e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080093e8 	.word	0x080093e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001002:	4b21      	ldr	r3, [pc, #132]	; (8001088 <MX_ADC1_Init+0x98>)
 8001004:	4a21      	ldr	r2, [pc, #132]	; (800108c <MX_ADC1_Init+0x9c>)
 8001006:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001008:	4b1f      	ldr	r3, [pc, #124]	; (8001088 <MX_ADC1_Init+0x98>)
 800100a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800100e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001010:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <MX_ADC1_Init+0x98>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001016:	4b1c      	ldr	r3, [pc, #112]	; (8001088 <MX_ADC1_Init+0x98>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800101c:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <MX_ADC1_Init+0x98>)
 800101e:	2201      	movs	r2, #1
 8001020:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001022:	4b19      	ldr	r3, [pc, #100]	; (8001088 <MX_ADC1_Init+0x98>)
 8001024:	2200      	movs	r2, #0
 8001026:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <MX_ADC1_Init+0x98>)
 800102c:	2200      	movs	r2, #0
 800102e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <MX_ADC1_Init+0x98>)
 8001032:	4a17      	ldr	r2, [pc, #92]	; (8001090 <MX_ADC1_Init+0xa0>)
 8001034:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <MX_ADC1_Init+0x98>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <MX_ADC1_Init+0x98>)
 800103e:	2201      	movs	r2, #1
 8001040:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_ADC1_Init+0x98>)
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_ADC1_Init+0x98>)
 800104c:	2201      	movs	r2, #1
 800104e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001050:	480d      	ldr	r0, [pc, #52]	; (8001088 <MX_ADC1_Init+0x98>)
 8001052:	f001 fa8b 	bl	800256c <HAL_ADC_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800105c:	f000 fd22 	bl	8001aa4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001060:	2309      	movs	r3, #9
 8001062:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001064:	2301      	movs	r3, #1
 8001066:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106c:	463b      	mov	r3, r7
 800106e:	4619      	mov	r1, r3
 8001070:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_ADC1_Init+0x98>)
 8001072:	f001 fabf 	bl	80025f4 <HAL_ADC_ConfigChannel>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800107c:	f000 fd12 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200001f0 	.word	0x200001f0
 800108c:	40012000 	.word	0x40012000
 8001090:	0f000001 	.word	0x0f000001

08001094 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	; 0x28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a24      	ldr	r2, [pc, #144]	; (8001144 <HAL_ADC_MspInit+0xb0>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d141      	bne.n	800113a <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	4b23      	ldr	r3, [pc, #140]	; (8001148 <HAL_ADC_MspInit+0xb4>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	4a22      	ldr	r2, [pc, #136]	; (8001148 <HAL_ADC_MspInit+0xb4>)
 80010c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c4:	6453      	str	r3, [r2, #68]	; 0x44
 80010c6:	4b20      	ldr	r3, [pc, #128]	; (8001148 <HAL_ADC_MspInit+0xb4>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <HAL_ADC_MspInit+0xb4>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a1b      	ldr	r2, [pc, #108]	; (8001148 <HAL_ADC_MspInit+0xb4>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b19      	ldr	r3, [pc, #100]	; (8001148 <HAL_ADC_MspInit+0xb4>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <HAL_ADC_MspInit+0xb4>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a14      	ldr	r2, [pc, #80]	; (8001148 <HAL_ADC_MspInit+0xb4>)
 80010f8:	f043 0302 	orr.w	r3, r3, #2
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_ADC_MspInit+0xb4>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC1_Pin|ADC0_Pin;
 800110a:	230c      	movs	r3, #12
 800110c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110e:	2303      	movs	r3, #3
 8001110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	480b      	ldr	r0, [pc, #44]	; (800114c <HAL_ADC_MspInit+0xb8>)
 800111e:	f001 fed9 	bl	8002ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC2_Pin|ADC3_Pin;
 8001122:	2303      	movs	r3, #3
 8001124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001126:	2303      	movs	r3, #3
 8001128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	4806      	ldr	r0, [pc, #24]	; (8001150 <HAL_ADC_MspInit+0xbc>)
 8001136:	f001 fecd 	bl	8002ed4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800113a:	bf00      	nop
 800113c:	3728      	adds	r7, #40	; 0x28
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40012000 	.word	0x40012000
 8001148:	40023800 	.word	0x40023800
 800114c:	40020000 	.word	0x40020000
 8001150:	40020400 	.word	0x40020400

08001154 <MX_CAN2_Init>:

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001158:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <MX_CAN2_Init+0x60>)
 800115a:	4a17      	ldr	r2, [pc, #92]	; (80011b8 <MX_CAN2_Init+0x64>)
 800115c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <MX_CAN2_Init+0x60>)
 8001160:	2210      	movs	r2, #16
 8001162:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001164:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <MX_CAN2_Init+0x60>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800116a:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <MX_CAN2_Init+0x60>)
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001170:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <MX_CAN2_Init+0x60>)
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001176:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <MX_CAN2_Init+0x60>)
 8001178:	2200      	movs	r2, #0
 800117a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800117c:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <MX_CAN2_Init+0x60>)
 800117e:	2200      	movs	r2, #0
 8001180:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <MX_CAN2_Init+0x60>)
 8001184:	2200      	movs	r2, #0
 8001186:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <MX_CAN2_Init+0x60>)
 800118a:	2200      	movs	r2, #0
 800118c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <MX_CAN2_Init+0x60>)
 8001190:	2200      	movs	r2, #0
 8001192:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001194:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <MX_CAN2_Init+0x60>)
 8001196:	2200      	movs	r2, #0
 8001198:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <MX_CAN2_Init+0x60>)
 800119c:	2200      	movs	r2, #0
 800119e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80011a0:	4804      	ldr	r0, [pc, #16]	; (80011b4 <MX_CAN2_Init+0x60>)
 80011a2:	f001 fc45 	bl	8002a30 <HAL_CAN_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 80011ac:	f000 fc7a 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000238 	.word	0x20000238
 80011b8:	40006800 	.word	0x40006800

080011bc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN2)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a20      	ldr	r2, [pc, #128]	; (800125c <HAL_CAN_MspInit+0xa0>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d13a      	bne.n	8001254 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* CAN2 clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <HAL_CAN_MspInit+0xa4>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	4a1e      	ldr	r2, [pc, #120]	; (8001260 <HAL_CAN_MspInit+0xa4>)
 80011e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
 80011ee:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <HAL_CAN_MspInit+0xa4>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <HAL_CAN_MspInit+0xa4>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	4a17      	ldr	r2, [pc, #92]	; (8001260 <HAL_CAN_MspInit+0xa4>)
 8001204:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001208:	6413      	str	r3, [r2, #64]	; 0x40
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <HAL_CAN_MspInit+0xa4>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <HAL_CAN_MspInit+0xa4>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a10      	ldr	r2, [pc, #64]	; (8001260 <HAL_CAN_MspInit+0xa4>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <HAL_CAN_MspInit+0xa4>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = Can0_RX_Pin|Can0_TX_Pin;
 8001232:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001240:	2303      	movs	r3, #3
 8001242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001244:	2309      	movs	r3, #9
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <HAL_CAN_MspInit+0xa8>)
 8001250:	f001 fe40 	bl	8002ed4 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001254:	bf00      	nop
 8001256:	3728      	adds	r7, #40	; 0x28
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40006800 	.word	0x40006800
 8001260:	40023800 	.word	0x40023800
 8001264:	40020400 	.word	0x40020400

08001268 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08c      	sub	sp, #48	; 0x30
 800126c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	61bb      	str	r3, [r7, #24]
 8001282:	4b71      	ldr	r3, [pc, #452]	; (8001448 <MX_GPIO_Init+0x1e0>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a70      	ldr	r2, [pc, #448]	; (8001448 <MX_GPIO_Init+0x1e0>)
 8001288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b6e      	ldr	r3, [pc, #440]	; (8001448 <MX_GPIO_Init+0x1e0>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001296:	61bb      	str	r3, [r7, #24]
 8001298:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	4b6a      	ldr	r3, [pc, #424]	; (8001448 <MX_GPIO_Init+0x1e0>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a69      	ldr	r2, [pc, #420]	; (8001448 <MX_GPIO_Init+0x1e0>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b67      	ldr	r3, [pc, #412]	; (8001448 <MX_GPIO_Init+0x1e0>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	4b63      	ldr	r3, [pc, #396]	; (8001448 <MX_GPIO_Init+0x1e0>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a62      	ldr	r2, [pc, #392]	; (8001448 <MX_GPIO_Init+0x1e0>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b60      	ldr	r3, [pc, #384]	; (8001448 <MX_GPIO_Init+0x1e0>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	4b5c      	ldr	r3, [pc, #368]	; (8001448 <MX_GPIO_Init+0x1e0>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a5b      	ldr	r2, [pc, #364]	; (8001448 <MX_GPIO_Init+0x1e0>)
 80012dc:	f043 0310 	orr.w	r3, r3, #16
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b59      	ldr	r3, [pc, #356]	; (8001448 <MX_GPIO_Init+0x1e0>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0310 	and.w	r3, r3, #16
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	4b55      	ldr	r3, [pc, #340]	; (8001448 <MX_GPIO_Init+0x1e0>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a54      	ldr	r2, [pc, #336]	; (8001448 <MX_GPIO_Init+0x1e0>)
 80012f8:	f043 0308 	orr.w	r3, r3, #8
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b52      	ldr	r3, [pc, #328]	; (8001448 <MX_GPIO_Init+0x1e0>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	4b4e      	ldr	r3, [pc, #312]	; (8001448 <MX_GPIO_Init+0x1e0>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a4d      	ldr	r2, [pc, #308]	; (8001448 <MX_GPIO_Init+0x1e0>)
 8001314:	f043 0304 	orr.w	r3, r3, #4
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b4b      	ldr	r3, [pc, #300]	; (8001448 <MX_GPIO_Init+0x1e0>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0304 	and.w	r3, r3, #4
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	2104      	movs	r1, #4
 800132a:	4848      	ldr	r0, [pc, #288]	; (800144c <MX_GPIO_Init+0x1e4>)
 800132c:	f001 ff86 	bl	800323c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001336:	4846      	ldr	r0, [pc, #280]	; (8001450 <MX_GPIO_Init+0x1e8>)
 8001338:	f001 ff80 	bl	800323c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SW0_Pin|SW1_Pin|Cycle_LED_Pin, GPIO_PIN_RESET);
 800133c:	2200      	movs	r2, #0
 800133e:	f44f 4186 	mov.w	r1, #17152	; 0x4300
 8001342:	4844      	ldr	r0, [pc, #272]	; (8001454 <MX_GPIO_Init+0x1ec>)
 8001344:	f001 ff7a 	bl	800323c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Valve0_Pin|Valve1_Pin|Valve2_Pin|Valve3_Pin, GPIO_PIN_RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800134e:	4842      	ldr	r0, [pc, #264]	; (8001458 <MX_GPIO_Init+0x1f0>)
 8001350:	f001 ff74 	bl	800323c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Valve4_Pin|Valve5_Pin|Valve6_Pin|Valve7_Pin, GPIO_PIN_RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800135a:	4840      	ldr	r0, [pc, #256]	; (800145c <MX_GPIO_Init+0x1f4>)
 800135c:	f001 ff6e 	bl	800323c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8001360:	2304      	movs	r3, #4
 8001362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001364:	2301      	movs	r3, #1
 8001366:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2300      	movs	r3, #0
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8001370:	f107 031c 	add.w	r3, r7, #28
 8001374:	4619      	mov	r1, r3
 8001376:	4835      	ldr	r0, [pc, #212]	; (800144c <MX_GPIO_Init+0x1e4>)
 8001378:	f001 fdac 	bl	8002ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800137c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001382:	2301      	movs	r3, #1
 8001384:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	4619      	mov	r1, r3
 8001394:	482e      	ldr	r0, [pc, #184]	; (8001450 <MX_GPIO_Init+0x1e8>)
 8001396:	f001 fd9d 	bl	8002ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = SW0_Pin|SW1_Pin|Cycle_LED_Pin;
 800139a:	f44f 4386 	mov.w	r3, #17152	; 0x4300
 800139e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a0:	2301      	movs	r3, #1
 80013a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a8:	2300      	movs	r3, #0
 80013aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	4619      	mov	r1, r3
 80013b2:	4828      	ldr	r0, [pc, #160]	; (8001454 <MX_GPIO_Init+0x1ec>)
 80013b4:	f001 fd8e 	bl	8002ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Valve0_Pin|Valve1_Pin|Valve2_Pin|Valve3_Pin;
 80013b8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80013bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013be:	2301      	movs	r3, #1
 80013c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ca:	f107 031c 	add.w	r3, r7, #28
 80013ce:	4619      	mov	r1, r3
 80013d0:	4821      	ldr	r0, [pc, #132]	; (8001458 <MX_GPIO_Init+0x1f0>)
 80013d2:	f001 fd7f 	bl	8002ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Valve4_Pin|Valve5_Pin|Valve6_Pin|Valve7_Pin;
 80013d6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80013da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013dc:	2301      	movs	r3, #1
 80013de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e4:	2300      	movs	r3, #0
 80013e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e8:	f107 031c 	add.w	r3, r7, #28
 80013ec:	4619      	mov	r1, r3
 80013ee:	481b      	ldr	r0, [pc, #108]	; (800145c <MX_GPIO_Init+0x1f4>)
 80013f0:	f001 fd70 	bl	8002ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = Photo0_Pin|Photo1_Pin;
 80013f4:	2318      	movs	r3, #24
 80013f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f8:	2300      	movs	r3, #0
 80013fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001400:	f107 031c 	add.w	r3, r7, #28
 8001404:	4619      	mov	r1, r3
 8001406:	4813      	ldr	r0, [pc, #76]	; (8001454 <MX_GPIO_Init+0x1ec>)
 8001408:	f001 fd64 	bl	8002ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Photo2_Pin|Photo3_Pin|Photo4_Pin|Photo5_Pin;
 800140c:	f44f 734c 	mov.w	r3, #816	; 0x330
 8001410:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001412:	2300      	movs	r3, #0
 8001414:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141a:	f107 031c 	add.w	r3, r7, #28
 800141e:	4619      	mov	r1, r3
 8001420:	480a      	ldr	r0, [pc, #40]	; (800144c <MX_GPIO_Init+0x1e4>)
 8001422:	f001 fd57 	bl	8002ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = Photo6_Pin|Photo7_Pin;
 8001426:	2303      	movs	r3, #3
 8001428:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800142a:	2300      	movs	r3, #0
 800142c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001432:	f107 031c 	add.w	r3, r7, #28
 8001436:	4619      	mov	r1, r3
 8001438:	4805      	ldr	r0, [pc, #20]	; (8001450 <MX_GPIO_Init+0x1e8>)
 800143a:	f001 fd4b 	bl	8002ed4 <HAL_GPIO_Init>

}
 800143e:	bf00      	nop
 8001440:	3730      	adds	r7, #48	; 0x30
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800
 800144c:	40020400 	.word	0x40020400
 8001450:	40021000 	.word	0x40021000
 8001454:	40020c00 	.word	0x40020c00
 8001458:	40020800 	.word	0x40020800
 800145c:	40020000 	.word	0x40020000

08001460 <HAL_TIM_PeriodElapsedCallback>:

int overflow0 = 0;
int overflow1 = 0;
int overflow2 = 0;
int overflow3 = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM5){
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a39      	ldr	r2, [pc, #228]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d116      	bne.n	80014a0 <HAL_TIM_PeriodElapsedCallback+0x40>
		__HAL_TIM_CLEAR_FLAG(&htim5, TIM_IT_UPDATE);
 8001472:	4b39      	ldr	r3, [pc, #228]	; (8001558 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f06f 0201 	mvn.w	r2, #1
 800147a:	611a      	str	r2, [r3, #16]
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim5)){//0->65535
 800147c:	4b36      	ldr	r3, [pc, #216]	; (8001558 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0310 	and.w	r3, r3, #16
 8001486:	2b10      	cmp	r3, #16
 8001488:	d105      	bne.n	8001496 <HAL_TIM_PeriodElapsedCallback+0x36>
			overflow0 --;
 800148a:	4b34      	ldr	r3, [pc, #208]	; (800155c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	3b01      	subs	r3, #1
 8001490:	4a32      	ldr	r2, [pc, #200]	; (800155c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	e004      	b.n	80014a0 <HAL_TIM_PeriodElapsedCallback+0x40>
		}else{//65535->0
			overflow0 ++;
 8001496:	4b31      	ldr	r3, [pc, #196]	; (800155c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	3301      	adds	r3, #1
 800149c:	4a2f      	ldr	r2, [pc, #188]	; (800155c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800149e:	6013      	str	r3, [r2, #0]
		}
	}
	if(htim->Instance == TIM3){
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a2e      	ldr	r2, [pc, #184]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d116      	bne.n	80014d8 <HAL_TIM_PeriodElapsedCallback+0x78>
		__HAL_TIM_CLEAR_FLAG(&htim3, TIM_IT_UPDATE);
 80014aa:	4b2e      	ldr	r3, [pc, #184]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f06f 0201 	mvn.w	r2, #1
 80014b2:	611a      	str	r2, [r3, #16]
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)){
 80014b4:	4b2b      	ldr	r3, [pc, #172]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0310 	and.w	r3, r3, #16
 80014be:	2b10      	cmp	r3, #16
 80014c0:	d105      	bne.n	80014ce <HAL_TIM_PeriodElapsedCallback+0x6e>
			overflow1 --;
 80014c2:	4b29      	ldr	r3, [pc, #164]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	4a27      	ldr	r2, [pc, #156]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	e004      	b.n	80014d8 <HAL_TIM_PeriodElapsedCallback+0x78>
		}else{
			overflow1 ++;
 80014ce:	4b26      	ldr	r3, [pc, #152]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	3301      	adds	r3, #1
 80014d4:	4a24      	ldr	r2, [pc, #144]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80014d6:	6013      	str	r3, [r2, #0]
		}
	}
	if(htim->Instance == TIM2){
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014e0:	d116      	bne.n	8001510 <HAL_TIM_PeriodElapsedCallback+0xb0>
		__HAL_TIM_CLEAR_FLAG(&htim2, TIM_IT_UPDATE);
 80014e2:	4b22      	ldr	r3, [pc, #136]	; (800156c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f06f 0201 	mvn.w	r2, #1
 80014ea:	611a      	str	r2, [r3, #16]
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 80014ec:	4b1f      	ldr	r3, [pc, #124]	; (800156c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0310 	and.w	r3, r3, #16
 80014f6:	2b10      	cmp	r3, #16
 80014f8:	d105      	bne.n	8001506 <HAL_TIM_PeriodElapsedCallback+0xa6>
			overflow2 --;
 80014fa:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	3b01      	subs	r3, #1
 8001500:	4a1b      	ldr	r2, [pc, #108]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	e004      	b.n	8001510 <HAL_TIM_PeriodElapsedCallback+0xb0>
		}else{
			overflow2 ++;
 8001506:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	3301      	adds	r3, #1
 800150c:	4a18      	ldr	r2, [pc, #96]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800150e:	6013      	str	r3, [r2, #0]
		}
	}
	if(htim->Instance == TIM4){
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a17      	ldr	r2, [pc, #92]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d116      	bne.n	8001548 <HAL_TIM_PeriodElapsedCallback+0xe8>
		__HAL_TIM_CLEAR_FLAG(&htim4, TIM_IT_UPDATE);
 800151a:	4b17      	ldr	r3, [pc, #92]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f06f 0201 	mvn.w	r2, #1
 8001522:	611a      	str	r2, [r3, #16]
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)){
 8001524:	4b14      	ldr	r3, [pc, #80]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0310 	and.w	r3, r3, #16
 800152e:	2b10      	cmp	r3, #16
 8001530:	d105      	bne.n	800153e <HAL_TIM_PeriodElapsedCallback+0xde>
			overflow3 --;
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	3b01      	subs	r3, #1
 8001538:	4a10      	ldr	r2, [pc, #64]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800153a:	6013      	str	r3, [r2, #0]
		}else{
			overflow3 ++;
		}
	}
}
 800153c:	e004      	b.n	8001548 <HAL_TIM_PeriodElapsedCallback+0xe8>
			overflow3 ++;
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	3301      	adds	r3, #1
 8001544:	4a0d      	ldr	r2, [pc, #52]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001546:	6013      	str	r3, [r2, #0]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	40000c00 	.word	0x40000c00
 8001558:	2000034c 	.word	0x2000034c
 800155c:	20000260 	.word	0x20000260
 8001560:	40000400 	.word	0x40000400
 8001564:	200002bc 	.word	0x200002bc
 8001568:	20000264 	.word	0x20000264
 800156c:	20000274 	.word	0x20000274
 8001570:	20000268 	.word	0x20000268
 8001574:	40000800 	.word	0x40000800
 8001578:	20000304 	.word	0x20000304
 800157c:	2000026c 	.word	0x2000026c

08001580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001588:	f000 ff5a 	bl	8002440 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800158c:	f000 fa20 	bl	80019d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001590:	f7ff fe6a 	bl	8001268 <MX_GPIO_Init>
  MX_CAN2_Init();
 8001594:	f7ff fdde 	bl	8001154 <MX_CAN2_Init>
  MX_ADC1_Init();
 8001598:	f7ff fd2a 	bl	8000ff0 <MX_ADC1_Init>
  MX_TIM2_Init();
 800159c:	f000 fbda 	bl	8001d54 <MX_TIM2_Init>
  MX_TIM3_Init();
 80015a0:	f000 fc2c 	bl	8001dfc <MX_TIM3_Init>
  MX_TIM4_Init();
 80015a4:	f000 fc7e 	bl	8001ea4 <MX_TIM4_Init>
  MX_TIM5_Init();
 80015a8:	f000 fcd0 	bl	8001f4c <MX_TIM5_Init>
  MX_USART2_UART_Init();
 80015ac:	f000 fe48 	bl	8002240 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80015b0:	f000 fe72 	bl	8002298 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_ALL);//エンコー�?読み取りスター�?
 80015b4:	213c      	movs	r1, #60	; 0x3c
 80015b6:	48d4      	ldr	r0, [pc, #848]	; (8001908 <main+0x388>)
 80015b8:	f002 fc08 	bl	8003dcc <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim5);//割り込み有効�?
 80015bc:	48d2      	ldr	r0, [pc, #840]	; (8001908 <main+0x388>)
 80015be:	f002 faef 	bl	8003ba0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 80015c2:	213c      	movs	r1, #60	; 0x3c
 80015c4:	48d1      	ldr	r0, [pc, #836]	; (800190c <main+0x38c>)
 80015c6:	f002 fc01 	bl	8003dcc <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 80015ca:	48d0      	ldr	r0, [pc, #832]	; (800190c <main+0x38c>)
 80015cc:	f002 fae8 	bl	8003ba0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 80015d0:	213c      	movs	r1, #60	; 0x3c
 80015d2:	48cf      	ldr	r0, [pc, #828]	; (8001910 <main+0x390>)
 80015d4:	f002 fbfa 	bl	8003dcc <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80015d8:	48cd      	ldr	r0, [pc, #820]	; (8001910 <main+0x390>)
 80015da:	f002 fae1 	bl	8003ba0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 80015de:	213c      	movs	r1, #60	; 0x3c
 80015e0:	48cc      	ldr	r0, [pc, #816]	; (8001914 <main+0x394>)
 80015e2:	f002 fbf3 	bl	8003dcc <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 80015e6:	48cb      	ldr	r0, [pc, #812]	; (8001914 <main+0x394>)
 80015e8:	f002 fada 	bl	8003ba0 <HAL_TIM_Base_Start_IT>

  HAL_CAN_Start(&hcan2);
 80015ec:	48ca      	ldr	r0, [pc, #808]	; (8001918 <main+0x398>)
 80015ee:	f001 fb1a 	bl	8002c26 <HAL_CAN_Start>
  uint32_t cnt3_f;
  char scnt0[100];
  char scnt1[100];
  char scnt2[100];
  char scnt3[100];
  overflow0 = 0;
 80015f2:	4bca      	ldr	r3, [pc, #808]	; (800191c <main+0x39c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
  overflow1 = 0;
 80015f8:	4bc9      	ldr	r3, [pc, #804]	; (8001920 <main+0x3a0>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
  overflow2 = 0;
 80015fe:	4bc9      	ldr	r3, [pc, #804]	; (8001924 <main+0x3a4>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
  overflow3 = 0;
 8001604:	4bc8      	ldr	r3, [pc, #800]	; (8001928 <main+0x3a8>)
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //ENC
	  cnt0_f = (long)(overflow0)*0x10000 + (long)TIM5 ->CNT;//TIMx->CNTとすることで随時値を読�?ことが可能
 800160a:	4bc4      	ldr	r3, [pc, #784]	; (800191c <main+0x39c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	041b      	lsls	r3, r3, #16
 8001610:	4ac6      	ldr	r2, [pc, #792]	; (800192c <main+0x3ac>)
 8001612:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001614:	4413      	add	r3, r2
 8001616:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
	  cnt1_f = (long)(overflow1)*0x10000 + (long)TIM3 ->CNT;
 800161a:	4bc1      	ldr	r3, [pc, #772]	; (8001920 <main+0x3a0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	041b      	lsls	r3, r3, #16
 8001620:	4ac3      	ldr	r2, [pc, #780]	; (8001930 <main+0x3b0>)
 8001622:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001624:	4413      	add	r3, r2
 8001626:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	  cnt2_f = (long)(overflow2)*0x10000 + (long)TIM2 ->CNT;
 800162a:	4bbe      	ldr	r3, [pc, #760]	; (8001924 <main+0x3a4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	041b      	lsls	r3, r3, #16
 8001630:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001634:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001636:	4413      	add	r3, r2
 8001638:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
	  cnt3_f = (long)(overflow3)*0x10000 + (long)TIM4 ->CNT;
 800163c:	4bba      	ldr	r3, [pc, #744]	; (8001928 <main+0x3a8>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	041b      	lsls	r3, r3, #16
 8001642:	4abc      	ldr	r2, [pc, #752]	; (8001934 <main+0x3b4>)
 8001644:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001646:	4413      	add	r3, r2
 8001648:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
	  sprintf(scnt0, "ENC0:%d ", cnt0_f);
 800164c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001650:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8001654:	49b8      	ldr	r1, [pc, #736]	; (8001938 <main+0x3b8>)
 8001656:	4618      	mov	r0, r3
 8001658:	f004 fa26 	bl	8005aa8 <siprintf>
	  sprintf(scnt1, "ENC1:%d ", cnt1_f);
 800165c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001660:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8001664:	49b5      	ldr	r1, [pc, #724]	; (800193c <main+0x3bc>)
 8001666:	4618      	mov	r0, r3
 8001668:	f004 fa1e 	bl	8005aa8 <siprintf>
	  sprintf(scnt2, "ENC2:%d ", cnt2_f);
 800166c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001670:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8001674:	49b2      	ldr	r1, [pc, #712]	; (8001940 <main+0x3c0>)
 8001676:	4618      	mov	r0, r3
 8001678:	f004 fa16 	bl	8005aa8 <siprintf>
	  sprintf(scnt3, "ENC3:%d\r\n", cnt3_f);
 800167c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001680:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8001684:	49af      	ldr	r1, [pc, #700]	; (8001944 <main+0x3c4>)
 8001686:	4618      	mov	r0, r3
 8001688:	f004 fa0e 	bl	8005aa8 <siprintf>
	  HAL_UART_Transmit(&huart3, scnt0, strlen(scnt0) + 1, 0xFFFF);
 800168c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe fded 	bl	8000270 <strlen>
 8001696:	4603      	mov	r3, r0
 8001698:	b29b      	uxth	r3, r3
 800169a:	3301      	adds	r3, #1
 800169c:	b29a      	uxth	r2, r3
 800169e:	f507 71c6 	add.w	r1, r7, #396	; 0x18c
 80016a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016a6:	48a8      	ldr	r0, [pc, #672]	; (8001948 <main+0x3c8>)
 80016a8:	f002 ff0b 	bl	80044c2 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, scnt1, strlen(scnt1) + 1, 0xFFFF);
 80016ac:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe fddd 	bl	8000270 <strlen>
 80016b6:	4603      	mov	r3, r0
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	3301      	adds	r3, #1
 80016bc:	b29a      	uxth	r2, r3
 80016be:	f507 7194 	add.w	r1, r7, #296	; 0x128
 80016c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016c6:	48a0      	ldr	r0, [pc, #640]	; (8001948 <main+0x3c8>)
 80016c8:	f002 fefb 	bl	80044c2 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, scnt2, strlen(scnt2) + 1, 0xFFFF);
 80016cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe fdcd 	bl	8000270 <strlen>
 80016d6:	4603      	mov	r3, r0
 80016d8:	b29b      	uxth	r3, r3
 80016da:	3301      	adds	r3, #1
 80016dc:	b29a      	uxth	r2, r3
 80016de:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80016e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016e6:	4898      	ldr	r0, [pc, #608]	; (8001948 <main+0x3c8>)
 80016e8:	f002 feeb 	bl	80044c2 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, scnt3, strlen(scnt3) + 1, 0xFFFF);
 80016ec:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7fe fdbd 	bl	8000270 <strlen>
 80016f6:	4603      	mov	r3, r0
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	3301      	adds	r3, #1
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001702:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001706:	4890      	ldr	r0, [pc, #576]	; (8001948 <main+0x3c8>)
 8001708:	f002 fedb 	bl	80044c2 <HAL_UART_Transmit>

	  //LED
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 800170c:	2201      	movs	r2, #1
 800170e:	2104      	movs	r1, #4
 8001710:	488e      	ldr	r0, [pc, #568]	; (800194c <main+0x3cc>)
 8001712:	f001 fd93 	bl	800323c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8001716:	2201      	movs	r2, #1
 8001718:	2180      	movs	r1, #128	; 0x80
 800171a:	488d      	ldr	r0, [pc, #564]	; (8001950 <main+0x3d0>)
 800171c:	f001 fd8e 	bl	800323c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8001720:	2201      	movs	r2, #1
 8001722:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001726:	488a      	ldr	r0, [pc, #552]	; (8001950 <main+0x3d0>)
 8001728:	f001 fd88 	bl	800323c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 800172c:	2201      	movs	r2, #1
 800172e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001732:	4887      	ldr	r0, [pc, #540]	; (8001950 <main+0x3d0>)
 8001734:	f001 fd82 	bl	800323c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001738:	2201      	movs	r2, #1
 800173a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800173e:	4885      	ldr	r0, [pc, #532]	; (8001954 <main+0x3d4>)
 8001740:	f001 fd7c 	bl	800323c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8001744:	2064      	movs	r0, #100	; 0x64
 8001746:	f000 feed 	bl	8002524 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800174a:	2200      	movs	r2, #0
 800174c:	2104      	movs	r1, #4
 800174e:	487f      	ldr	r0, [pc, #508]	; (800194c <main+0x3cc>)
 8001750:	f001 fd74 	bl	800323c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8001754:	2200      	movs	r2, #0
 8001756:	2180      	movs	r1, #128	; 0x80
 8001758:	487d      	ldr	r0, [pc, #500]	; (8001950 <main+0x3d0>)
 800175a:	f001 fd6f 	bl	800323c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001764:	487a      	ldr	r0, [pc, #488]	; (8001950 <main+0x3d0>)
 8001766:	f001 fd69 	bl	800323c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 800176a:	2200      	movs	r2, #0
 800176c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001770:	4877      	ldr	r0, [pc, #476]	; (8001950 <main+0x3d0>)
 8001772:	f001 fd63 	bl	800323c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001776:	2200      	movs	r2, #0
 8001778:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800177c:	4875      	ldr	r0, [pc, #468]	; (8001954 <main+0x3d4>)
 800177e:	f001 fd5d 	bl	800323c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8001782:	2064      	movs	r0, #100	; 0x64
 8001784:	f000 fece 	bl	8002524 <HAL_Delay>

	  //Photo
	  uint8_t p0 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3);
 8001788:	2108      	movs	r1, #8
 800178a:	4872      	ldr	r0, [pc, #456]	; (8001954 <main+0x3d4>)
 800178c:	f001 fd3e 	bl	800320c <HAL_GPIO_ReadPin>
 8001790:	4603      	mov	r3, r0
 8001792:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
	  uint8_t p1 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4);
 8001796:	2110      	movs	r1, #16
 8001798:	486e      	ldr	r0, [pc, #440]	; (8001954 <main+0x3d4>)
 800179a:	f001 fd37 	bl	800320c <HAL_GPIO_ReadPin>
 800179e:	4603      	mov	r3, r0
 80017a0:	f887 31f6 	strb.w	r3, [r7, #502]	; 0x1f6
	  uint8_t p2 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 80017a4:	2110      	movs	r1, #16
 80017a6:	4869      	ldr	r0, [pc, #420]	; (800194c <main+0x3cc>)
 80017a8:	f001 fd30 	bl	800320c <HAL_GPIO_ReadPin>
 80017ac:	4603      	mov	r3, r0
 80017ae:	f887 31f5 	strb.w	r3, [r7, #501]	; 0x1f5
	  uint8_t p3 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 80017b2:	2120      	movs	r1, #32
 80017b4:	4865      	ldr	r0, [pc, #404]	; (800194c <main+0x3cc>)
 80017b6:	f001 fd29 	bl	800320c <HAL_GPIO_ReadPin>
 80017ba:	4603      	mov	r3, r0
 80017bc:	f887 31f4 	strb.w	r3, [r7, #500]	; 0x1f4
	  uint8_t p4 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 80017c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017c4:	4861      	ldr	r0, [pc, #388]	; (800194c <main+0x3cc>)
 80017c6:	f001 fd21 	bl	800320c <HAL_GPIO_ReadPin>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f887 31f3 	strb.w	r3, [r7, #499]	; 0x1f3
	  uint8_t p5 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);
 80017d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017d4:	485d      	ldr	r0, [pc, #372]	; (800194c <main+0x3cc>)
 80017d6:	f001 fd19 	bl	800320c <HAL_GPIO_ReadPin>
 80017da:	4603      	mov	r3, r0
 80017dc:	f887 31f2 	strb.w	r3, [r7, #498]	; 0x1f2
	  uint8_t p6 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0);
 80017e0:	2101      	movs	r1, #1
 80017e2:	485b      	ldr	r0, [pc, #364]	; (8001950 <main+0x3d0>)
 80017e4:	f001 fd12 	bl	800320c <HAL_GPIO_ReadPin>
 80017e8:	4603      	mov	r3, r0
 80017ea:	f887 31f1 	strb.w	r3, [r7, #497]	; 0x1f1
	  uint8_t p7 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_1);
 80017ee:	2102      	movs	r1, #2
 80017f0:	4857      	ldr	r0, [pc, #348]	; (8001950 <main+0x3d0>)
 80017f2:	f001 fd0b 	bl	800320c <HAL_GPIO_ReadPin>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f887 31f0 	strb.w	r3, [r7, #496]	; 0x1f0
	  char ph3[10];
	  char ph4[10];
	  char ph5[10];
	  char ph6[10];
	  char ph7[10];
	  sprintf(ph0, "PHOTO0:%d ",p0);
 80017fc:	f897 21f7 	ldrb.w	r2, [r7, #503]	; 0x1f7
 8001800:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001804:	4954      	ldr	r1, [pc, #336]	; (8001958 <main+0x3d8>)
 8001806:	4618      	mov	r0, r3
 8001808:	f004 f94e 	bl	8005aa8 <siprintf>
	  sprintf(ph1, "PHOTO1:%d ",p1);
 800180c:	f897 21f6 	ldrb.w	r2, [r7, #502]	; 0x1f6
 8001810:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001814:	4951      	ldr	r1, [pc, #324]	; (800195c <main+0x3dc>)
 8001816:	4618      	mov	r0, r3
 8001818:	f004 f946 	bl	8005aa8 <siprintf>
	  sprintf(ph2, "PHOTO2:%d ",p2);
 800181c:	f897 21f5 	ldrb.w	r2, [r7, #501]	; 0x1f5
 8001820:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001824:	494e      	ldr	r1, [pc, #312]	; (8001960 <main+0x3e0>)
 8001826:	4618      	mov	r0, r3
 8001828:	f004 f93e 	bl	8005aa8 <siprintf>
	  sprintf(ph3, "PHOTO3:%d ",p3);
 800182c:	f897 21f4 	ldrb.w	r2, [r7, #500]	; 0x1f4
 8001830:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001834:	494b      	ldr	r1, [pc, #300]	; (8001964 <main+0x3e4>)
 8001836:	4618      	mov	r0, r3
 8001838:	f004 f936 	bl	8005aa8 <siprintf>
	  sprintf(ph4, "PHOTO4:%d ",p4);
 800183c:	f897 21f3 	ldrb.w	r2, [r7, #499]	; 0x1f3
 8001840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001844:	4948      	ldr	r1, [pc, #288]	; (8001968 <main+0x3e8>)
 8001846:	4618      	mov	r0, r3
 8001848:	f004 f92e 	bl	8005aa8 <siprintf>
	  sprintf(ph5, "PHOTO5:%d ",p5);
 800184c:	f897 21f2 	ldrb.w	r2, [r7, #498]	; 0x1f2
 8001850:	f107 0318 	add.w	r3, r7, #24
 8001854:	4945      	ldr	r1, [pc, #276]	; (800196c <main+0x3ec>)
 8001856:	4618      	mov	r0, r3
 8001858:	f004 f926 	bl	8005aa8 <siprintf>
	  sprintf(ph6, "PHOTO6:%d ",p6);
 800185c:	f897 21f1 	ldrb.w	r2, [r7, #497]	; 0x1f1
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	4942      	ldr	r1, [pc, #264]	; (8001970 <main+0x3f0>)
 8001866:	4618      	mov	r0, r3
 8001868:	f004 f91e 	bl	8005aa8 <siprintf>
	  sprintf(ph7, "PHOTO7:%d\r\n ",p7);
 800186c:	f897 21f0 	ldrb.w	r2, [r7, #496]	; 0x1f0
 8001870:	463b      	mov	r3, r7
 8001872:	4940      	ldr	r1, [pc, #256]	; (8001974 <main+0x3f4>)
 8001874:	4618      	mov	r0, r3
 8001876:	f004 f917 	bl	8005aa8 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)ph0, strlen(ph0), 0xFFFF);
 800187a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fcf6 	bl	8000270 <strlen>
 8001884:	4603      	mov	r3, r0
 8001886:	b29a      	uxth	r2, r3
 8001888:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800188c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001890:	482d      	ldr	r0, [pc, #180]	; (8001948 <main+0x3c8>)
 8001892:	f002 fe16 	bl	80044c2 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, (uint8_t*)ph1, strlen(ph1), 0xFFFF);
 8001896:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fce8 	bl	8000270 <strlen>
 80018a0:	4603      	mov	r3, r0
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80018a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ac:	4826      	ldr	r0, [pc, #152]	; (8001948 <main+0x3c8>)
 80018ae:	f002 fe08 	bl	80044c2 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, (uint8_t*)ph2, strlen(ph2), 0xFFFF);
 80018b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fcda 	bl	8000270 <strlen>
 80018bc:	4603      	mov	r3, r0
 80018be:	b29a      	uxth	r2, r3
 80018c0:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80018c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018c8:	481f      	ldr	r0, [pc, #124]	; (8001948 <main+0x3c8>)
 80018ca:	f002 fdfa 	bl	80044c2 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, (uint8_t*)ph3, strlen(ph3), 0xFFFF);
 80018ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fccc 	bl	8000270 <strlen>
 80018d8:	4603      	mov	r3, r0
 80018da:	b29a      	uxth	r2, r3
 80018dc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80018e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018e4:	4818      	ldr	r0, [pc, #96]	; (8001948 <main+0x3c8>)
 80018e6:	f002 fdec 	bl	80044c2 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, (uint8_t*)ph4, strlen(ph4), 0xFFFF);
 80018ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fcbe 	bl	8000270 <strlen>
 80018f4:	4603      	mov	r3, r0
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80018fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001900:	4811      	ldr	r0, [pc, #68]	; (8001948 <main+0x3c8>)
 8001902:	f002 fdde 	bl	80044c2 <HAL_UART_Transmit>
 8001906:	e037      	b.n	8001978 <main+0x3f8>
 8001908:	2000034c 	.word	0x2000034c
 800190c:	200002bc 	.word	0x200002bc
 8001910:	20000274 	.word	0x20000274
 8001914:	20000304 	.word	0x20000304
 8001918:	20000238 	.word	0x20000238
 800191c:	20000260 	.word	0x20000260
 8001920:	20000264 	.word	0x20000264
 8001924:	20000268 	.word	0x20000268
 8001928:	2000026c 	.word	0x2000026c
 800192c:	40000c00 	.word	0x40000c00
 8001930:	40000400 	.word	0x40000400
 8001934:	40000800 	.word	0x40000800
 8001938:	08009400 	.word	0x08009400
 800193c:	0800940c 	.word	0x0800940c
 8001940:	08009418 	.word	0x08009418
 8001944:	08009424 	.word	0x08009424
 8001948:	200003dc 	.word	0x200003dc
 800194c:	40020400 	.word	0x40020400
 8001950:	40021000 	.word	0x40021000
 8001954:	40020c00 	.word	0x40020c00
 8001958:	08009430 	.word	0x08009430
 800195c:	0800943c 	.word	0x0800943c
 8001960:	08009448 	.word	0x08009448
 8001964:	08009454 	.word	0x08009454
 8001968:	08009460 	.word	0x08009460
 800196c:	0800946c 	.word	0x0800946c
 8001970:	08009478 	.word	0x08009478
 8001974:	08009484 	.word	0x08009484
	  HAL_UART_Transmit(&huart3, (uint8_t*)ph5, strlen(ph5), 0xFFFF);
 8001978:	f107 0318 	add.w	r3, r7, #24
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fc77 	bl	8000270 <strlen>
 8001982:	4603      	mov	r3, r0
 8001984:	b29a      	uxth	r2, r3
 8001986:	f107 0118 	add.w	r1, r7, #24
 800198a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800198e:	480f      	ldr	r0, [pc, #60]	; (80019cc <main+0x44c>)
 8001990:	f002 fd97 	bl	80044c2 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, (uint8_t*)ph6, strlen(ph6), 0xFFFF);
 8001994:	f107 030c 	add.w	r3, r7, #12
 8001998:	4618      	mov	r0, r3
 800199a:	f7fe fc69 	bl	8000270 <strlen>
 800199e:	4603      	mov	r3, r0
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	f107 010c 	add.w	r1, r7, #12
 80019a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019aa:	4808      	ldr	r0, [pc, #32]	; (80019cc <main+0x44c>)
 80019ac:	f002 fd89 	bl	80044c2 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, (uint8_t*)ph7, strlen(ph7), 0xFFFF);
 80019b0:	463b      	mov	r3, r7
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe fc5c 	bl	8000270 <strlen>
 80019b8:	4603      	mov	r3, r0
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	4639      	mov	r1, r7
 80019be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019c2:	4802      	ldr	r0, [pc, #8]	; (80019cc <main+0x44c>)
 80019c4:	f002 fd7d 	bl	80044c2 <HAL_UART_Transmit>
  {
 80019c8:	e61f      	b.n	800160a <main+0x8a>
 80019ca:	bf00      	nop
 80019cc:	200003dc 	.word	0x200003dc

080019d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b094      	sub	sp, #80	; 0x50
 80019d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019d6:	f107 0320 	add.w	r3, r7, #32
 80019da:	2230      	movs	r2, #48	; 0x30
 80019dc:	2100      	movs	r1, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f004 f8c5 	bl	8005b6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019e4:	f107 030c 	add.w	r3, r7, #12
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f4:	2300      	movs	r3, #0
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	4b28      	ldr	r3, [pc, #160]	; (8001a9c <SystemClock_Config+0xcc>)
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	4a27      	ldr	r2, [pc, #156]	; (8001a9c <SystemClock_Config+0xcc>)
 80019fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a02:	6413      	str	r3, [r2, #64]	; 0x40
 8001a04:	4b25      	ldr	r3, [pc, #148]	; (8001a9c <SystemClock_Config+0xcc>)
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a10:	2300      	movs	r3, #0
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	4b22      	ldr	r3, [pc, #136]	; (8001aa0 <SystemClock_Config+0xd0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a21      	ldr	r2, [pc, #132]	; (8001aa0 <SystemClock_Config+0xd0>)
 8001a1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	4b1f      	ldr	r3, [pc, #124]	; (8001aa0 <SystemClock_Config+0xd0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a36:	2302      	movs	r3, #2
 8001a38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a40:	2308      	movs	r3, #8
 8001a42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001a44:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001a48:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a4e:	2304      	movs	r3, #4
 8001a50:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a52:	f107 0320 	add.w	r3, r7, #32
 8001a56:	4618      	mov	r0, r3
 8001a58:	f001 fc0a 	bl	8003270 <HAL_RCC_OscConfig>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001a62:	f000 f81f 	bl	8001aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a66:	230f      	movs	r3, #15
 8001a68:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a72:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a7c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a7e:	f107 030c 	add.w	r3, r7, #12
 8001a82:	2105      	movs	r1, #5
 8001a84:	4618      	mov	r0, r3
 8001a86:	f001 fe6b 	bl	8003760 <HAL_RCC_ClockConfig>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001a90:	f000 f808 	bl	8001aa4 <Error_Handler>
  }
}
 8001a94:	bf00      	nop
 8001a96:	3750      	adds	r7, #80	; 0x50
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40007000 	.word	0x40007000

08001aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa8:	b672      	cpsid	i
}
 8001aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aac:	e7fe      	b.n	8001aac <Error_Handler+0x8>
	...

08001ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <HAL_MspInit+0x4c>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	4a0f      	ldr	r2, [pc, #60]	; (8001afc <HAL_MspInit+0x4c>)
 8001ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac6:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <HAL_MspInit+0x4c>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	603b      	str	r3, [r7, #0]
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <HAL_MspInit+0x4c>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	4a08      	ldr	r2, [pc, #32]	; (8001afc <HAL_MspInit+0x4c>)
 8001adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_MspInit+0x4c>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800

08001b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b04:	e7fe      	b.n	8001b04 <NMI_Handler+0x4>

08001b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <HardFault_Handler+0x4>

08001b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <MemManage_Handler+0x4>

08001b12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b16:	e7fe      	b.n	8001b16 <BusFault_Handler+0x4>

08001b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <UsageFault_Handler+0x4>

08001b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b4c:	f000 fcca 	bl	80024e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b58:	4802      	ldr	r0, [pc, #8]	; (8001b64 <TIM2_IRQHandler+0x10>)
 8001b5a:	f002 f9c5 	bl	8003ee8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000274 	.word	0x20000274

08001b68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b6c:	4802      	ldr	r0, [pc, #8]	; (8001b78 <TIM3_IRQHandler+0x10>)
 8001b6e:	f002 f9bb 	bl	8003ee8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200002bc 	.word	0x200002bc

08001b7c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b80:	4802      	ldr	r0, [pc, #8]	; (8001b8c <TIM4_IRQHandler+0x10>)
 8001b82:	f002 f9b1 	bl	8003ee8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000304 	.word	0x20000304

08001b90 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001b94:	4802      	ldr	r0, [pc, #8]	; (8001ba0 <TIM5_IRQHandler+0x10>)
 8001b96:	f002 f9a7 	bl	8003ee8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	2000034c 	.word	0x2000034c

08001ba4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return 1;
 8001ba8:	2301      	movs	r3, #1
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <_kill>:

int _kill(int pid, int sig)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bbe:	f004 f829 	bl	8005c14 <__errno>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2216      	movs	r2, #22
 8001bc6:	601a      	str	r2, [r3, #0]
  return -1;
 8001bc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <_exit>:

void _exit (int status)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff ffe7 	bl	8001bb4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001be6:	e7fe      	b.n	8001be6 <_exit+0x12>

08001be8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	e00a      	b.n	8001c10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bfa:	f3af 8000 	nop.w
 8001bfe:	4601      	mov	r1, r0
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	60ba      	str	r2, [r7, #8]
 8001c06:	b2ca      	uxtb	r2, r1
 8001c08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	dbf0      	blt.n	8001bfa <_read+0x12>
  }

  return len;
 8001c18:	687b      	ldr	r3, [r7, #4]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b086      	sub	sp, #24
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	60f8      	str	r0, [r7, #12]
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	e009      	b.n	8001c48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	1c5a      	adds	r2, r3, #1
 8001c38:	60ba      	str	r2, [r7, #8]
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	3301      	adds	r3, #1
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	dbf1      	blt.n	8001c34 <_write+0x12>
  }
  return len;
 8001c50:	687b      	ldr	r3, [r7, #4]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <_close>:

int _close(int file)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c82:	605a      	str	r2, [r3, #4]
  return 0;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <_isatty>:

int _isatty(int file)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c9a:	2301      	movs	r3, #1
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
	...

08001cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ccc:	4a14      	ldr	r2, [pc, #80]	; (8001d20 <_sbrk+0x5c>)
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <_sbrk+0x60>)
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cd8:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <_sbrk+0x64>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d102      	bne.n	8001ce6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <_sbrk+0x64>)
 8001ce2:	4a12      	ldr	r2, [pc, #72]	; (8001d2c <_sbrk+0x68>)
 8001ce4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <_sbrk+0x64>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d207      	bcs.n	8001d04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cf4:	f003 ff8e 	bl	8005c14 <__errno>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	220c      	movs	r2, #12
 8001cfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001d02:	e009      	b.n	8001d18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d04:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <_sbrk+0x64>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d0a:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <_sbrk+0x64>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	4a05      	ldr	r2, [pc, #20]	; (8001d28 <_sbrk+0x64>)
 8001d14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d16:	68fb      	ldr	r3, [r7, #12]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20020000 	.word	0x20020000
 8001d24:	00000400 	.word	0x00000400
 8001d28:	20000270 	.word	0x20000270
 8001d2c:	20000578 	.word	0x20000578

08001d30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <SystemInit+0x20>)
 8001d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d3a:	4a05      	ldr	r2, [pc, #20]	; (8001d50 <SystemInit+0x20>)
 8001d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08c      	sub	sp, #48	; 0x30
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d5a:	f107 030c 	add.w	r3, r7, #12
 8001d5e:	2224      	movs	r2, #36	; 0x24
 8001d60:	2100      	movs	r1, #0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f003 ff03 	bl	8005b6e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d68:	1d3b      	adds	r3, r7, #4
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d70:	4b21      	ldr	r3, [pc, #132]	; (8001df8 <MX_TIM2_Init+0xa4>)
 8001d72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d78:	4b1f      	ldr	r3, [pc, #124]	; (8001df8 <MX_TIM2_Init+0xa4>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7e:	4b1e      	ldr	r3, [pc, #120]	; (8001df8 <MX_TIM2_Init+0xa4>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001d84:	4b1c      	ldr	r3, [pc, #112]	; (8001df8 <MX_TIM2_Init+0xa4>)
 8001d86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <MX_TIM2_Init+0xa4>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d92:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <MX_TIM2_Init+0xa4>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001da0:	2301      	movs	r3, #1
 8001da2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001da4:	2300      	movs	r3, #0
 8001da6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001dac:	2300      	movs	r3, #0
 8001dae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001db0:	2301      	movs	r3, #1
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001db4:	2300      	movs	r3, #0
 8001db6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001dbc:	f107 030c 	add.w	r3, r7, #12
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	480d      	ldr	r0, [pc, #52]	; (8001df8 <MX_TIM2_Init+0xa4>)
 8001dc4:	f001 ff5c 	bl	8003c80 <HAL_TIM_Encoder_Init>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001dce:	f7ff fe69 	bl	8001aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4806      	ldr	r0, [pc, #24]	; (8001df8 <MX_TIM2_Init+0xa4>)
 8001de0:	f002 fa6c 	bl	80042bc <HAL_TIMEx_MasterConfigSynchronization>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001dea:	f7ff fe5b 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001dee:	bf00      	nop
 8001df0:	3730      	adds	r7, #48	; 0x30
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000274 	.word	0x20000274

08001dfc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08c      	sub	sp, #48	; 0x30
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e02:	f107 030c 	add.w	r3, r7, #12
 8001e06:	2224      	movs	r2, #36	; 0x24
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f003 feaf 	bl	8005b6e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e10:	1d3b      	adds	r3, r7, #4
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e18:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <MX_TIM3_Init+0xa0>)
 8001e1a:	4a21      	ldr	r2, [pc, #132]	; (8001ea0 <MX_TIM3_Init+0xa4>)
 8001e1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e1e:	4b1f      	ldr	r3, [pc, #124]	; (8001e9c <MX_TIM3_Init+0xa0>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e24:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <MX_TIM3_Init+0xa0>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e2a:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <MX_TIM3_Init+0xa0>)
 8001e2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e32:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <MX_TIM3_Init+0xa0>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e38:	4b18      	ldr	r3, [pc, #96]	; (8001e9c <MX_TIM3_Init+0xa0>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e46:	2301      	movs	r3, #1
 8001e48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e52:	2300      	movs	r3, #0
 8001e54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e56:	2301      	movs	r3, #1
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001e62:	f107 030c 	add.w	r3, r7, #12
 8001e66:	4619      	mov	r1, r3
 8001e68:	480c      	ldr	r0, [pc, #48]	; (8001e9c <MX_TIM3_Init+0xa0>)
 8001e6a:	f001 ff09 	bl	8003c80 <HAL_TIM_Encoder_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001e74:	f7ff fe16 	bl	8001aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	4619      	mov	r1, r3
 8001e84:	4805      	ldr	r0, [pc, #20]	; (8001e9c <MX_TIM3_Init+0xa0>)
 8001e86:	f002 fa19 	bl	80042bc <HAL_TIMEx_MasterConfigSynchronization>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001e90:	f7ff fe08 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e94:	bf00      	nop
 8001e96:	3730      	adds	r7, #48	; 0x30
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	200002bc 	.word	0x200002bc
 8001ea0:	40000400 	.word	0x40000400

08001ea4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08c      	sub	sp, #48	; 0x30
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001eaa:	f107 030c 	add.w	r3, r7, #12
 8001eae:	2224      	movs	r2, #36	; 0x24
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f003 fe5b 	bl	8005b6e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb8:	1d3b      	adds	r3, r7, #4
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ec0:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <MX_TIM4_Init+0xa0>)
 8001ec2:	4a21      	ldr	r2, [pc, #132]	; (8001f48 <MX_TIM4_Init+0xa4>)
 8001ec4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001ec6:	4b1f      	ldr	r3, [pc, #124]	; (8001f44 <MX_TIM4_Init+0xa0>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ecc:	4b1d      	ldr	r3, [pc, #116]	; (8001f44 <MX_TIM4_Init+0xa0>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001ed2:	4b1c      	ldr	r3, [pc, #112]	; (8001f44 <MX_TIM4_Init+0xa0>)
 8001ed4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ed8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eda:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <MX_TIM4_Init+0xa0>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee0:	4b18      	ldr	r3, [pc, #96]	; (8001f44 <MX_TIM4_Init+0xa0>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001eea:	2300      	movs	r3, #0
 8001eec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001efa:	2300      	movs	r3, #0
 8001efc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001efe:	2301      	movs	r3, #1
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f02:	2300      	movs	r3, #0
 8001f04:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001f0a:	f107 030c 	add.w	r3, r7, #12
 8001f0e:	4619      	mov	r1, r3
 8001f10:	480c      	ldr	r0, [pc, #48]	; (8001f44 <MX_TIM4_Init+0xa0>)
 8001f12:	f001 feb5 	bl	8003c80 <HAL_TIM_Encoder_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001f1c:	f7ff fdc2 	bl	8001aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f20:	2300      	movs	r3, #0
 8001f22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4805      	ldr	r0, [pc, #20]	; (8001f44 <MX_TIM4_Init+0xa0>)
 8001f2e:	f002 f9c5 	bl	80042bc <HAL_TIMEx_MasterConfigSynchronization>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001f38:	f7ff fdb4 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f3c:	bf00      	nop
 8001f3e:	3730      	adds	r7, #48	; 0x30
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20000304 	.word	0x20000304
 8001f48:	40000800 	.word	0x40000800

08001f4c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08c      	sub	sp, #48	; 0x30
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f52:	f107 030c 	add.w	r3, r7, #12
 8001f56:	2224      	movs	r2, #36	; 0x24
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f003 fe07 	bl	8005b6e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f60:	1d3b      	adds	r3, r7, #4
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001f68:	4b20      	ldr	r3, [pc, #128]	; (8001fec <MX_TIM5_Init+0xa0>)
 8001f6a:	4a21      	ldr	r2, [pc, #132]	; (8001ff0 <MX_TIM5_Init+0xa4>)
 8001f6c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001f6e:	4b1f      	ldr	r3, [pc, #124]	; (8001fec <MX_TIM5_Init+0xa0>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f74:	4b1d      	ldr	r3, [pc, #116]	; (8001fec <MX_TIM5_Init+0xa0>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001f7a:	4b1c      	ldr	r3, [pc, #112]	; (8001fec <MX_TIM5_Init+0xa0>)
 8001f7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f80:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f82:	4b1a      	ldr	r3, [pc, #104]	; (8001fec <MX_TIM5_Init+0xa0>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f88:	4b18      	ldr	r3, [pc, #96]	; (8001fec <MX_TIM5_Init+0xa0>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f96:	2301      	movs	r3, #1
 8001f98:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001faa:	2300      	movs	r3, #0
 8001fac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001fb2:	f107 030c 	add.w	r3, r7, #12
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	480c      	ldr	r0, [pc, #48]	; (8001fec <MX_TIM5_Init+0xa0>)
 8001fba:	f001 fe61 	bl	8003c80 <HAL_TIM_Encoder_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001fc4:	f7ff fd6e 	bl	8001aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001fd0:	1d3b      	adds	r3, r7, #4
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4805      	ldr	r0, [pc, #20]	; (8001fec <MX_TIM5_Init+0xa0>)
 8001fd6:	f002 f971 	bl	80042bc <HAL_TIMEx_MasterConfigSynchronization>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001fe0:	f7ff fd60 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001fe4:	bf00      	nop
 8001fe6:	3730      	adds	r7, #48	; 0x30
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	2000034c 	.word	0x2000034c
 8001ff0:	40000c00 	.word	0x40000c00

08001ff4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b090      	sub	sp, #64	; 0x40
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002014:	d153      	bne.n	80020be <HAL_TIM_Encoder_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	62bb      	str	r3, [r7, #40]	; 0x28
 800201a:	4b82      	ldr	r3, [pc, #520]	; (8002224 <HAL_TIM_Encoder_MspInit+0x230>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	4a81      	ldr	r2, [pc, #516]	; (8002224 <HAL_TIM_Encoder_MspInit+0x230>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	6413      	str	r3, [r2, #64]	; 0x40
 8002026:	4b7f      	ldr	r3, [pc, #508]	; (8002224 <HAL_TIM_Encoder_MspInit+0x230>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002030:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
 8002036:	4b7b      	ldr	r3, [pc, #492]	; (8002224 <HAL_TIM_Encoder_MspInit+0x230>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a7a      	ldr	r2, [pc, #488]	; (8002224 <HAL_TIM_Encoder_MspInit+0x230>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b78      	ldr	r3, [pc, #480]	; (8002224 <HAL_TIM_Encoder_MspInit+0x230>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	627b      	str	r3, [r7, #36]	; 0x24
 800204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	623b      	str	r3, [r7, #32]
 8002052:	4b74      	ldr	r3, [pc, #464]	; (8002224 <HAL_TIM_Encoder_MspInit+0x230>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a73      	ldr	r2, [pc, #460]	; (8002224 <HAL_TIM_Encoder_MspInit+0x230>)
 8002058:	f043 0302 	orr.w	r3, r3, #2
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
 800205e:	4b71      	ldr	r3, [pc, #452]	; (8002224 <HAL_TIM_Encoder_MspInit+0x230>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	623b      	str	r3, [r7, #32]
 8002068:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Enc2_TX_Pin;
 800206a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800206e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002070:	2302      	movs	r3, #2
 8002072:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002078:	2300      	movs	r3, #0
 800207a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800207c:	2301      	movs	r3, #1
 800207e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(Enc2_TX_GPIO_Port, &GPIO_InitStruct);
 8002080:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002084:	4619      	mov	r1, r3
 8002086:	4868      	ldr	r0, [pc, #416]	; (8002228 <HAL_TIM_Encoder_MspInit+0x234>)
 8002088:	f000 ff24 	bl	8002ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Enc2_RX_Pin;
 800208c:	2308      	movs	r3, #8
 800208e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	2302      	movs	r3, #2
 8002092:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002098:	2300      	movs	r3, #0
 800209a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800209c:	2301      	movs	r3, #1
 800209e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(Enc2_RX_GPIO_Port, &GPIO_InitStruct);
 80020a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020a4:	4619      	mov	r1, r3
 80020a6:	4861      	ldr	r0, [pc, #388]	; (800222c <HAL_TIM_Encoder_MspInit+0x238>)
 80020a8:	f000 ff14 	bl	8002ed4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020ac:	2200      	movs	r2, #0
 80020ae:	2100      	movs	r1, #0
 80020b0:	201c      	movs	r0, #28
 80020b2:	f000 fed8 	bl	8002e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020b6:	201c      	movs	r0, #28
 80020b8:	f000 fef1 	bl	8002e9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80020bc:	e0ad      	b.n	800221a <HAL_TIM_Encoder_MspInit+0x226>
  else if(tim_encoderHandle->Instance==TIM3)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a5b      	ldr	r2, [pc, #364]	; (8002230 <HAL_TIM_Encoder_MspInit+0x23c>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d134      	bne.n	8002132 <HAL_TIM_Encoder_MspInit+0x13e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020c8:	2300      	movs	r3, #0
 80020ca:	61fb      	str	r3, [r7, #28]
 80020cc:	4b55      	ldr	r3, [pc, #340]	; (8002224 <HAL_TIM_Encoder_MspInit+0x230>)
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	4a54      	ldr	r2, [pc, #336]	; (8002224 <HAL_TIM_Encoder_MspInit+0x230>)
 80020d2:	f043 0302 	orr.w	r3, r3, #2
 80020d6:	6413      	str	r3, [r2, #64]	; 0x40
 80020d8:	4b52      	ldr	r3, [pc, #328]	; (8002224 <HAL_TIM_Encoder_MspInit+0x230>)
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	61fb      	str	r3, [r7, #28]
 80020e2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e4:	2300      	movs	r3, #0
 80020e6:	61bb      	str	r3, [r7, #24]
 80020e8:	4b4e      	ldr	r3, [pc, #312]	; (8002224 <HAL_TIM_Encoder_MspInit+0x230>)
 80020ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ec:	4a4d      	ldr	r2, [pc, #308]	; (8002224 <HAL_TIM_Encoder_MspInit+0x230>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	6313      	str	r3, [r2, #48]	; 0x30
 80020f4:	4b4b      	ldr	r3, [pc, #300]	; (8002224 <HAL_TIM_Encoder_MspInit+0x230>)
 80020f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	61bb      	str	r3, [r7, #24]
 80020fe:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = Enc1_TX_Pin|Enc1_RX_Pin;
 8002100:	23c0      	movs	r3, #192	; 0xc0
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002104:	2302      	movs	r3, #2
 8002106:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210c:	2300      	movs	r3, #0
 800210e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002110:	2302      	movs	r3, #2
 8002112:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002114:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002118:	4619      	mov	r1, r3
 800211a:	4843      	ldr	r0, [pc, #268]	; (8002228 <HAL_TIM_Encoder_MspInit+0x234>)
 800211c:	f000 feda 	bl	8002ed4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002120:	2200      	movs	r2, #0
 8002122:	2100      	movs	r1, #0
 8002124:	201d      	movs	r0, #29
 8002126:	f000 fe9e 	bl	8002e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800212a:	201d      	movs	r0, #29
 800212c:	f000 feb7 	bl	8002e9e <HAL_NVIC_EnableIRQ>
}
 8002130:	e073      	b.n	800221a <HAL_TIM_Encoder_MspInit+0x226>
  else if(tim_encoderHandle->Instance==TIM4)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a3f      	ldr	r2, [pc, #252]	; (8002234 <HAL_TIM_Encoder_MspInit+0x240>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d135      	bne.n	80021a8 <HAL_TIM_Encoder_MspInit+0x1b4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	4b38      	ldr	r3, [pc, #224]	; (8002224 <HAL_TIM_Encoder_MspInit+0x230>)
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	4a37      	ldr	r2, [pc, #220]	; (8002224 <HAL_TIM_Encoder_MspInit+0x230>)
 8002146:	f043 0304 	orr.w	r3, r3, #4
 800214a:	6413      	str	r3, [r2, #64]	; 0x40
 800214c:	4b35      	ldr	r3, [pc, #212]	; (8002224 <HAL_TIM_Encoder_MspInit+0x230>)
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002158:	2300      	movs	r3, #0
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	4b31      	ldr	r3, [pc, #196]	; (8002224 <HAL_TIM_Encoder_MspInit+0x230>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	4a30      	ldr	r2, [pc, #192]	; (8002224 <HAL_TIM_Encoder_MspInit+0x230>)
 8002162:	f043 0308 	orr.w	r3, r3, #8
 8002166:	6313      	str	r3, [r2, #48]	; 0x30
 8002168:	4b2e      	ldr	r3, [pc, #184]	; (8002224 <HAL_TIM_Encoder_MspInit+0x230>)
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	f003 0308 	and.w	r3, r3, #8
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Enc3_TX_Pin|Enc3_RX_Pin;
 8002174:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002178:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217a:	2302      	movs	r3, #2
 800217c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002182:	2300      	movs	r3, #0
 8002184:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002186:	2302      	movs	r3, #2
 8002188:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800218a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800218e:	4619      	mov	r1, r3
 8002190:	4829      	ldr	r0, [pc, #164]	; (8002238 <HAL_TIM_Encoder_MspInit+0x244>)
 8002192:	f000 fe9f 	bl	8002ed4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002196:	2200      	movs	r2, #0
 8002198:	2100      	movs	r1, #0
 800219a:	201e      	movs	r0, #30
 800219c:	f000 fe63 	bl	8002e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80021a0:	201e      	movs	r0, #30
 80021a2:	f000 fe7c 	bl	8002e9e <HAL_NVIC_EnableIRQ>
}
 80021a6:	e038      	b.n	800221a <HAL_TIM_Encoder_MspInit+0x226>
  else if(tim_encoderHandle->Instance==TIM5)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a23      	ldr	r2, [pc, #140]	; (800223c <HAL_TIM_Encoder_MspInit+0x248>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d133      	bne.n	800221a <HAL_TIM_Encoder_MspInit+0x226>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <HAL_TIM_Encoder_MspInit+0x230>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	4a1a      	ldr	r2, [pc, #104]	; (8002224 <HAL_TIM_Encoder_MspInit+0x230>)
 80021bc:	f043 0308 	orr.w	r3, r3, #8
 80021c0:	6413      	str	r3, [r2, #64]	; 0x40
 80021c2:	4b18      	ldr	r3, [pc, #96]	; (8002224 <HAL_TIM_Encoder_MspInit+0x230>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	4b14      	ldr	r3, [pc, #80]	; (8002224 <HAL_TIM_Encoder_MspInit+0x230>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	4a13      	ldr	r2, [pc, #76]	; (8002224 <HAL_TIM_Encoder_MspInit+0x230>)
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	6313      	str	r3, [r2, #48]	; 0x30
 80021de:	4b11      	ldr	r3, [pc, #68]	; (8002224 <HAL_TIM_Encoder_MspInit+0x230>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Enc0_TX_Pin|Enc0_RX_Pin;
 80021ea:	2303      	movs	r3, #3
 80021ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ee:	2302      	movs	r3, #2
 80021f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f6:	2300      	movs	r3, #0
 80021f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80021fa:	2302      	movs	r3, #2
 80021fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002202:	4619      	mov	r1, r3
 8002204:	4808      	ldr	r0, [pc, #32]	; (8002228 <HAL_TIM_Encoder_MspInit+0x234>)
 8002206:	f000 fe65 	bl	8002ed4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800220a:	2200      	movs	r2, #0
 800220c:	2100      	movs	r1, #0
 800220e:	2032      	movs	r0, #50	; 0x32
 8002210:	f000 fe29 	bl	8002e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002214:	2032      	movs	r0, #50	; 0x32
 8002216:	f000 fe42 	bl	8002e9e <HAL_NVIC_EnableIRQ>
}
 800221a:	bf00      	nop
 800221c:	3740      	adds	r7, #64	; 0x40
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40023800 	.word	0x40023800
 8002228:	40020000 	.word	0x40020000
 800222c:	40020400 	.word	0x40020400
 8002230:	40000400 	.word	0x40000400
 8002234:	40000800 	.word	0x40000800
 8002238:	40020c00 	.word	0x40020c00
 800223c:	40000c00 	.word	0x40000c00

08002240 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002244:	4b12      	ldr	r3, [pc, #72]	; (8002290 <MX_USART2_UART_Init+0x50>)
 8002246:	4a13      	ldr	r2, [pc, #76]	; (8002294 <MX_USART2_UART_Init+0x54>)
 8002248:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800224a:	4b11      	ldr	r3, [pc, #68]	; (8002290 <MX_USART2_UART_Init+0x50>)
 800224c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002250:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002252:	4b0f      	ldr	r3, [pc, #60]	; (8002290 <MX_USART2_UART_Init+0x50>)
 8002254:	2200      	movs	r2, #0
 8002256:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002258:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <MX_USART2_UART_Init+0x50>)
 800225a:	2200      	movs	r2, #0
 800225c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800225e:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <MX_USART2_UART_Init+0x50>)
 8002260:	2200      	movs	r2, #0
 8002262:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002264:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <MX_USART2_UART_Init+0x50>)
 8002266:	220c      	movs	r2, #12
 8002268:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800226a:	4b09      	ldr	r3, [pc, #36]	; (8002290 <MX_USART2_UART_Init+0x50>)
 800226c:	2200      	movs	r2, #0
 800226e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002270:	4b07      	ldr	r3, [pc, #28]	; (8002290 <MX_USART2_UART_Init+0x50>)
 8002272:	2200      	movs	r2, #0
 8002274:	61da      	str	r2, [r3, #28]
  if (HAL_MultiProcessor_Init(&huart2, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8002276:	2200      	movs	r2, #0
 8002278:	2100      	movs	r1, #0
 800227a:	4805      	ldr	r0, [pc, #20]	; (8002290 <MX_USART2_UART_Init+0x50>)
 800227c:	f002 f8ae 	bl	80043dc <HAL_MultiProcessor_Init>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8002286:	f7ff fc0d 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000394 	.word	0x20000394
 8002294:	40004400 	.word	0x40004400

08002298 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800229c:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <MX_USART3_UART_Init+0x50>)
 800229e:	4a13      	ldr	r2, [pc, #76]	; (80022ec <MX_USART3_UART_Init+0x54>)
 80022a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80022a2:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <MX_USART3_UART_Init+0x50>)
 80022a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022aa:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <MX_USART3_UART_Init+0x50>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022b0:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <MX_USART3_UART_Init+0x50>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022b6:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <MX_USART3_UART_Init+0x50>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022bc:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <MX_USART3_UART_Init+0x50>)
 80022be:	220c      	movs	r2, #12
 80022c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022c2:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <MX_USART3_UART_Init+0x50>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022c8:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <MX_USART3_UART_Init+0x50>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	61da      	str	r2, [r3, #28]
  if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 80022ce:	2200      	movs	r2, #0
 80022d0:	2100      	movs	r1, #0
 80022d2:	4805      	ldr	r0, [pc, #20]	; (80022e8 <MX_USART3_UART_Init+0x50>)
 80022d4:	f002 f882 	bl	80043dc <HAL_MultiProcessor_Init>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <MX_USART3_UART_Init+0x4a>
  {
    Error_Handler();
 80022de:	f7ff fbe1 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	200003dc 	.word	0x200003dc
 80022ec:	40004800 	.word	0x40004800

080022f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08c      	sub	sp, #48	; 0x30
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f8:	f107 031c 	add.w	r3, r7, #28
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a32      	ldr	r2, [pc, #200]	; (80023d8 <HAL_UART_MspInit+0xe8>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d12c      	bne.n	800236c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	61bb      	str	r3, [r7, #24]
 8002316:	4b31      	ldr	r3, [pc, #196]	; (80023dc <HAL_UART_MspInit+0xec>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	4a30      	ldr	r2, [pc, #192]	; (80023dc <HAL_UART_MspInit+0xec>)
 800231c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002320:	6413      	str	r3, [r2, #64]	; 0x40
 8002322:	4b2e      	ldr	r3, [pc, #184]	; (80023dc <HAL_UART_MspInit+0xec>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	61bb      	str	r3, [r7, #24]
 800232c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	4b2a      	ldr	r3, [pc, #168]	; (80023dc <HAL_UART_MspInit+0xec>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	4a29      	ldr	r2, [pc, #164]	; (80023dc <HAL_UART_MspInit+0xec>)
 8002338:	f043 0308 	orr.w	r3, r3, #8
 800233c:	6313      	str	r3, [r2, #48]	; 0x30
 800233e:	4b27      	ldr	r3, [pc, #156]	; (80023dc <HAL_UART_MspInit+0xec>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = Serial1_TX_Pin|Serial1_RX_Pin;
 800234a:	2360      	movs	r3, #96	; 0x60
 800234c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234e:	2302      	movs	r3, #2
 8002350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002356:	2303      	movs	r3, #3
 8002358:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800235a:	2307      	movs	r3, #7
 800235c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800235e:	f107 031c 	add.w	r3, r7, #28
 8002362:	4619      	mov	r1, r3
 8002364:	481e      	ldr	r0, [pc, #120]	; (80023e0 <HAL_UART_MspInit+0xf0>)
 8002366:	f000 fdb5 	bl	8002ed4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800236a:	e031      	b.n	80023d0 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART3)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a1c      	ldr	r2, [pc, #112]	; (80023e4 <HAL_UART_MspInit+0xf4>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d12c      	bne.n	80023d0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	4b18      	ldr	r3, [pc, #96]	; (80023dc <HAL_UART_MspInit+0xec>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	4a17      	ldr	r2, [pc, #92]	; (80023dc <HAL_UART_MspInit+0xec>)
 8002380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002384:	6413      	str	r3, [r2, #64]	; 0x40
 8002386:	4b15      	ldr	r3, [pc, #84]	; (80023dc <HAL_UART_MspInit+0xec>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	4b11      	ldr	r3, [pc, #68]	; (80023dc <HAL_UART_MspInit+0xec>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	4a10      	ldr	r2, [pc, #64]	; (80023dc <HAL_UART_MspInit+0xec>)
 800239c:	f043 0304 	orr.w	r3, r3, #4
 80023a0:	6313      	str	r3, [r2, #48]	; 0x30
 80023a2:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <HAL_UART_MspInit+0xec>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Serial0_TX_Pin|Serial0_RX_Pin;
 80023ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80023b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b4:	2302      	movs	r3, #2
 80023b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023bc:	2303      	movs	r3, #3
 80023be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023c0:	2307      	movs	r3, #7
 80023c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023c4:	f107 031c 	add.w	r3, r7, #28
 80023c8:	4619      	mov	r1, r3
 80023ca:	4807      	ldr	r0, [pc, #28]	; (80023e8 <HAL_UART_MspInit+0xf8>)
 80023cc:	f000 fd82 	bl	8002ed4 <HAL_GPIO_Init>
}
 80023d0:	bf00      	nop
 80023d2:	3730      	adds	r7, #48	; 0x30
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40004400 	.word	0x40004400
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40020c00 	.word	0x40020c00
 80023e4:	40004800 	.word	0x40004800
 80023e8:	40020800 	.word	0x40020800

080023ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80023ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002424 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80023f0:	f7ff fc9e 	bl	8001d30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023f4:	480c      	ldr	r0, [pc, #48]	; (8002428 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023f6:	490d      	ldr	r1, [pc, #52]	; (800242c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023f8:	4a0d      	ldr	r2, [pc, #52]	; (8002430 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023fc:	e002      	b.n	8002404 <LoopCopyDataInit>

080023fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002402:	3304      	adds	r3, #4

08002404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002408:	d3f9      	bcc.n	80023fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800240a:	4a0a      	ldr	r2, [pc, #40]	; (8002434 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800240c:	4c0a      	ldr	r4, [pc, #40]	; (8002438 <LoopFillZerobss+0x22>)
  movs r3, #0
 800240e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002410:	e001      	b.n	8002416 <LoopFillZerobss>

08002412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002414:	3204      	adds	r2, #4

08002416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002418:	d3fb      	bcc.n	8002412 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800241a:	f003 fc01 	bl	8005c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800241e:	f7ff f8af 	bl	8001580 <main>
  bx  lr    
 8002422:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002424:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800242c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002430:	080098e8 	.word	0x080098e8
  ldr r2, =_sbss
 8002434:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002438:	20000574 	.word	0x20000574

0800243c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800243c:	e7fe      	b.n	800243c <ADC_IRQHandler>
	...

08002440 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002444:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <HAL_Init+0x40>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a0d      	ldr	r2, [pc, #52]	; (8002480 <HAL_Init+0x40>)
 800244a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800244e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <HAL_Init+0x40>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <HAL_Init+0x40>)
 8002456:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800245a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800245c:	4b08      	ldr	r3, [pc, #32]	; (8002480 <HAL_Init+0x40>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a07      	ldr	r2, [pc, #28]	; (8002480 <HAL_Init+0x40>)
 8002462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002466:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002468:	2003      	movs	r0, #3
 800246a:	f000 fcf1 	bl	8002e50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800246e:	200f      	movs	r0, #15
 8002470:	f000 f808 	bl	8002484 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002474:	f7ff fb1c 	bl	8001ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40023c00 	.word	0x40023c00

08002484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800248c:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <HAL_InitTick+0x54>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b12      	ldr	r3, [pc, #72]	; (80024dc <HAL_InitTick+0x58>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	4619      	mov	r1, r3
 8002496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800249a:	fbb3 f3f1 	udiv	r3, r3, r1
 800249e:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 fd09 	bl	8002eba <HAL_SYSTICK_Config>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e00e      	b.n	80024d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b0f      	cmp	r3, #15
 80024b6:	d80a      	bhi.n	80024ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024b8:	2200      	movs	r2, #0
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	f04f 30ff 	mov.w	r0, #4294967295
 80024c0:	f000 fcd1 	bl	8002e66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024c4:	4a06      	ldr	r2, [pc, #24]	; (80024e0 <HAL_InitTick+0x5c>)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
 80024cc:	e000      	b.n	80024d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000000 	.word	0x20000000
 80024dc:	20000008 	.word	0x20000008
 80024e0:	20000004 	.word	0x20000004

080024e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024e8:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_IncTick+0x20>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	461a      	mov	r2, r3
 80024ee:	4b06      	ldr	r3, [pc, #24]	; (8002508 <HAL_IncTick+0x24>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4413      	add	r3, r2
 80024f4:	4a04      	ldr	r2, [pc, #16]	; (8002508 <HAL_IncTick+0x24>)
 80024f6:	6013      	str	r3, [r2, #0]
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	20000008 	.word	0x20000008
 8002508:	20000424 	.word	0x20000424

0800250c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return uwTick;
 8002510:	4b03      	ldr	r3, [pc, #12]	; (8002520 <HAL_GetTick+0x14>)
 8002512:	681b      	ldr	r3, [r3, #0]
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	20000424 	.word	0x20000424

08002524 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800252c:	f7ff ffee 	bl	800250c <HAL_GetTick>
 8002530:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253c:	d005      	beq.n	800254a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800253e:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <HAL_Delay+0x44>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4413      	add	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800254a:	bf00      	nop
 800254c:	f7ff ffde 	bl	800250c <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	429a      	cmp	r2, r3
 800255a:	d8f7      	bhi.n	800254c <HAL_Delay+0x28>
  {
  }
}
 800255c:	bf00      	nop
 800255e:	bf00      	nop
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20000008 	.word	0x20000008

0800256c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002574:	2300      	movs	r3, #0
 8002576:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e033      	b.n	80025ea <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	2b00      	cmp	r3, #0
 8002588:	d109      	bne.n	800259e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7fe fd82 	bl	8001094 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	f003 0310 	and.w	r3, r3, #16
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d118      	bne.n	80025dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025b2:	f023 0302 	bic.w	r3, r3, #2
 80025b6:	f043 0202 	orr.w	r2, r3, #2
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f93a 	bl	8002838 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	f023 0303 	bic.w	r3, r3, #3
 80025d2:	f043 0201 	orr.w	r2, r3, #1
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	641a      	str	r2, [r3, #64]	; 0x40
 80025da:	e001      	b.n	80025e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002608:	2b01      	cmp	r3, #1
 800260a:	d101      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x1c>
 800260c:	2302      	movs	r3, #2
 800260e:	e105      	b.n	800281c <HAL_ADC_ConfigChannel+0x228>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2b09      	cmp	r3, #9
 800261e:	d925      	bls.n	800266c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68d9      	ldr	r1, [r3, #12]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	b29b      	uxth	r3, r3
 800262c:	461a      	mov	r2, r3
 800262e:	4613      	mov	r3, r2
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	4413      	add	r3, r2
 8002634:	3b1e      	subs	r3, #30
 8002636:	2207      	movs	r2, #7
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43da      	mvns	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	400a      	ands	r2, r1
 8002644:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68d9      	ldr	r1, [r3, #12]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	b29b      	uxth	r3, r3
 8002656:	4618      	mov	r0, r3
 8002658:	4603      	mov	r3, r0
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	4403      	add	r3, r0
 800265e:	3b1e      	subs	r3, #30
 8002660:	409a      	lsls	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	60da      	str	r2, [r3, #12]
 800266a:	e022      	b.n	80026b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6919      	ldr	r1, [r3, #16]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	b29b      	uxth	r3, r3
 8002678:	461a      	mov	r2, r3
 800267a:	4613      	mov	r3, r2
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	4413      	add	r3, r2
 8002680:	2207      	movs	r2, #7
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43da      	mvns	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	400a      	ands	r2, r1
 800268e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6919      	ldr	r1, [r3, #16]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	4618      	mov	r0, r3
 80026a2:	4603      	mov	r3, r0
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	4403      	add	r3, r0
 80026a8:	409a      	lsls	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b06      	cmp	r3, #6
 80026b8:	d824      	bhi.n	8002704 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	3b05      	subs	r3, #5
 80026cc:	221f      	movs	r2, #31
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43da      	mvns	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	400a      	ands	r2, r1
 80026da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	4618      	mov	r0, r3
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	3b05      	subs	r3, #5
 80026f6:	fa00 f203 	lsl.w	r2, r0, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	635a      	str	r2, [r3, #52]	; 0x34
 8002702:	e04c      	b.n	800279e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b0c      	cmp	r3, #12
 800270a:	d824      	bhi.n	8002756 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	3b23      	subs	r3, #35	; 0x23
 800271e:	221f      	movs	r2, #31
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43da      	mvns	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	400a      	ands	r2, r1
 800272c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	b29b      	uxth	r3, r3
 800273a:	4618      	mov	r0, r3
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	3b23      	subs	r3, #35	; 0x23
 8002748:	fa00 f203 	lsl.w	r2, r0, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	631a      	str	r2, [r3, #48]	; 0x30
 8002754:	e023      	b.n	800279e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	3b41      	subs	r3, #65	; 0x41
 8002768:	221f      	movs	r2, #31
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43da      	mvns	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	400a      	ands	r2, r1
 8002776:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	b29b      	uxth	r3, r3
 8002784:	4618      	mov	r0, r3
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	3b41      	subs	r3, #65	; 0x41
 8002792:	fa00 f203 	lsl.w	r2, r0, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800279e:	4b22      	ldr	r3, [pc, #136]	; (8002828 <HAL_ADC_ConfigChannel+0x234>)
 80027a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a21      	ldr	r2, [pc, #132]	; (800282c <HAL_ADC_ConfigChannel+0x238>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d109      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0x1cc>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b12      	cmp	r3, #18
 80027b2:	d105      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a19      	ldr	r2, [pc, #100]	; (800282c <HAL_ADC_ConfigChannel+0x238>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d123      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x21e>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2b10      	cmp	r3, #16
 80027d0:	d003      	beq.n	80027da <HAL_ADC_ConfigChannel+0x1e6>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2b11      	cmp	r3, #17
 80027d8:	d11b      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2b10      	cmp	r3, #16
 80027ec:	d111      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027ee:	4b10      	ldr	r3, [pc, #64]	; (8002830 <HAL_ADC_ConfigChannel+0x23c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a10      	ldr	r2, [pc, #64]	; (8002834 <HAL_ADC_ConfigChannel+0x240>)
 80027f4:	fba2 2303 	umull	r2, r3, r2, r3
 80027f8:	0c9a      	lsrs	r2, r3, #18
 80027fa:	4613      	mov	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002804:	e002      	b.n	800280c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	3b01      	subs	r3, #1
 800280a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f9      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	40012300 	.word	0x40012300
 800282c:	40012000 	.word	0x40012000
 8002830:	20000000 	.word	0x20000000
 8002834:	431bde83 	.word	0x431bde83

08002838 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002840:	4b79      	ldr	r3, [pc, #484]	; (8002a28 <ADC_Init+0x1f0>)
 8002842:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	431a      	orrs	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800286c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6859      	ldr	r1, [r3, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	021a      	lsls	r2, r3, #8
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002890:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6859      	ldr	r1, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6899      	ldr	r1, [r3, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ca:	4a58      	ldr	r2, [pc, #352]	; (8002a2c <ADC_Init+0x1f4>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d022      	beq.n	8002916 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6899      	ldr	r1, [r3, #8]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002900:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6899      	ldr	r1, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	e00f      	b.n	8002936 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002924:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002934:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0202 	bic.w	r2, r2, #2
 8002944:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6899      	ldr	r1, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	7e1b      	ldrb	r3, [r3, #24]
 8002950:	005a      	lsls	r2, r3, #1
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d01b      	beq.n	800299c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002972:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002982:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6859      	ldr	r1, [r3, #4]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	3b01      	subs	r3, #1
 8002990:	035a      	lsls	r2, r3, #13
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	e007      	b.n	80029ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029aa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80029ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	051a      	lsls	r2, r3, #20
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6899      	ldr	r1, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029ee:	025a      	lsls	r2, r3, #9
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6899      	ldr	r1, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	029a      	lsls	r2, r3, #10
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	609a      	str	r2, [r3, #8]
}
 8002a1c:	bf00      	nop
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	40012300 	.word	0x40012300
 8002a2c:	0f000001 	.word	0x0f000001

08002a30 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e0ed      	b.n	8002c1e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d102      	bne.n	8002a54 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7fe fbb4 	bl	80011bc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0201 	orr.w	r2, r2, #1
 8002a62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a64:	f7ff fd52 	bl	800250c <HAL_GetTick>
 8002a68:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a6a:	e012      	b.n	8002a92 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a6c:	f7ff fd4e 	bl	800250c <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b0a      	cmp	r3, #10
 8002a78:	d90b      	bls.n	8002a92 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2205      	movs	r2, #5
 8002a8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e0c5      	b.n	8002c1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0e5      	beq.n	8002a6c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0202 	bic.w	r2, r2, #2
 8002aae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ab0:	f7ff fd2c 	bl	800250c <HAL_GetTick>
 8002ab4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ab6:	e012      	b.n	8002ade <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ab8:	f7ff fd28 	bl	800250c <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b0a      	cmp	r3, #10
 8002ac4:	d90b      	bls.n	8002ade <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2205      	movs	r2, #5
 8002ad6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e09f      	b.n	8002c1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1e5      	bne.n	8002ab8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	7e1b      	ldrb	r3, [r3, #24]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d108      	bne.n	8002b06 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	e007      	b.n	8002b16 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	7e5b      	ldrb	r3, [r3, #25]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d108      	bne.n	8002b30 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	e007      	b.n	8002b40 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	7e9b      	ldrb	r3, [r3, #26]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d108      	bne.n	8002b5a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0220 	orr.w	r2, r2, #32
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	e007      	b.n	8002b6a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0220 	bic.w	r2, r2, #32
 8002b68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	7edb      	ldrb	r3, [r3, #27]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d108      	bne.n	8002b84 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0210 	bic.w	r2, r2, #16
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	e007      	b.n	8002b94 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0210 	orr.w	r2, r2, #16
 8002b92:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	7f1b      	ldrb	r3, [r3, #28]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d108      	bne.n	8002bae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0208 	orr.w	r2, r2, #8
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	e007      	b.n	8002bbe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0208 	bic.w	r2, r2, #8
 8002bbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	7f5b      	ldrb	r3, [r3, #29]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d108      	bne.n	8002bd8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f042 0204 	orr.w	r2, r2, #4
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	e007      	b.n	8002be8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0204 	bic.w	r2, r2, #4
 8002be6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	ea42 0103 	orr.w	r1, r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	1e5a      	subs	r2, r3, #1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b084      	sub	sp, #16
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d12e      	bne.n	8002c98 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0201 	bic.w	r2, r2, #1
 8002c50:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c52:	f7ff fc5b 	bl	800250c <HAL_GetTick>
 8002c56:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c58:	e012      	b.n	8002c80 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c5a:	f7ff fc57 	bl	800250c <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b0a      	cmp	r3, #10
 8002c66:	d90b      	bls.n	8002c80 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2205      	movs	r2, #5
 8002c78:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e012      	b.n	8002ca6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1e5      	bne.n	8002c5a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002c94:	2300      	movs	r3, #0
 8002c96:	e006      	b.n	8002ca6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
  }
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cc0:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ccc:	4013      	ands	r3, r2
 8002cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ce2:	4a04      	ldr	r2, [pc, #16]	; (8002cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	60d3      	str	r3, [r2, #12]
}
 8002ce8:	bf00      	nop
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	e000ed00 	.word	0xe000ed00

08002cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cfc:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <__NVIC_GetPriorityGrouping+0x18>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	0a1b      	lsrs	r3, r3, #8
 8002d02:	f003 0307 	and.w	r3, r3, #7
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	db0b      	blt.n	8002d3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	f003 021f 	and.w	r2, r3, #31
 8002d2c:	4907      	ldr	r1, [pc, #28]	; (8002d4c <__NVIC_EnableIRQ+0x38>)
 8002d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d32:	095b      	lsrs	r3, r3, #5
 8002d34:	2001      	movs	r0, #1
 8002d36:	fa00 f202 	lsl.w	r2, r0, r2
 8002d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	e000e100 	.word	0xe000e100

08002d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	6039      	str	r1, [r7, #0]
 8002d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	db0a      	blt.n	8002d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	490c      	ldr	r1, [pc, #48]	; (8002d9c <__NVIC_SetPriority+0x4c>)
 8002d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6e:	0112      	lsls	r2, r2, #4
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	440b      	add	r3, r1
 8002d74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d78:	e00a      	b.n	8002d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	4908      	ldr	r1, [pc, #32]	; (8002da0 <__NVIC_SetPriority+0x50>)
 8002d80:	79fb      	ldrb	r3, [r7, #7]
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	3b04      	subs	r3, #4
 8002d88:	0112      	lsls	r2, r2, #4
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	761a      	strb	r2, [r3, #24]
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	e000e100 	.word	0xe000e100
 8002da0:	e000ed00 	.word	0xe000ed00

08002da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b089      	sub	sp, #36	; 0x24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f1c3 0307 	rsb	r3, r3, #7
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	bf28      	it	cs
 8002dc2:	2304      	movcs	r3, #4
 8002dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	3304      	adds	r3, #4
 8002dca:	2b06      	cmp	r3, #6
 8002dcc:	d902      	bls.n	8002dd4 <NVIC_EncodePriority+0x30>
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	3b03      	subs	r3, #3
 8002dd2:	e000      	b.n	8002dd6 <NVIC_EncodePriority+0x32>
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43da      	mvns	r2, r3
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	401a      	ands	r2, r3
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dec:	f04f 31ff 	mov.w	r1, #4294967295
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	fa01 f303 	lsl.w	r3, r1, r3
 8002df6:	43d9      	mvns	r1, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dfc:	4313      	orrs	r3, r2
         );
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3724      	adds	r7, #36	; 0x24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
	...

08002e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3b01      	subs	r3, #1
 8002e18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e1c:	d301      	bcc.n	8002e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e00f      	b.n	8002e42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e22:	4a0a      	ldr	r2, [pc, #40]	; (8002e4c <SysTick_Config+0x40>)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e2a:	210f      	movs	r1, #15
 8002e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e30:	f7ff ff8e 	bl	8002d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e34:	4b05      	ldr	r3, [pc, #20]	; (8002e4c <SysTick_Config+0x40>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e3a:	4b04      	ldr	r3, [pc, #16]	; (8002e4c <SysTick_Config+0x40>)
 8002e3c:	2207      	movs	r2, #7
 8002e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	e000e010 	.word	0xe000e010

08002e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff ff29 	bl	8002cb0 <__NVIC_SetPriorityGrouping>
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b086      	sub	sp, #24
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	60b9      	str	r1, [r7, #8]
 8002e70:	607a      	str	r2, [r7, #4]
 8002e72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e78:	f7ff ff3e 	bl	8002cf8 <__NVIC_GetPriorityGrouping>
 8002e7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	68b9      	ldr	r1, [r7, #8]
 8002e82:	6978      	ldr	r0, [r7, #20]
 8002e84:	f7ff ff8e 	bl	8002da4 <NVIC_EncodePriority>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff ff5d 	bl	8002d50 <__NVIC_SetPriority>
}
 8002e96:	bf00      	nop
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b082      	sub	sp, #8
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff ff31 	bl	8002d14 <__NVIC_EnableIRQ>
}
 8002eb2:	bf00      	nop
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff ffa2 	bl	8002e0c <SysTick_Config>
 8002ec8:	4603      	mov	r3, r0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b089      	sub	sp, #36	; 0x24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
 8002eee:	e16b      	b.n	80031c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	4013      	ands	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	f040 815a 	bne.w	80031c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d005      	beq.n	8002f26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d130      	bne.n	8002f88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	2203      	movs	r2, #3
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43db      	mvns	r3, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	43db      	mvns	r3, r3
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	091b      	lsrs	r3, r3, #4
 8002f72:	f003 0201 	and.w	r2, r3, #1
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 0303 	and.w	r3, r3, #3
 8002f90:	2b03      	cmp	r3, #3
 8002f92:	d017      	beq.n	8002fc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 0303 	and.w	r3, r3, #3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d123      	bne.n	8003018 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	08da      	lsrs	r2, r3, #3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3208      	adds	r2, #8
 8002fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	220f      	movs	r2, #15
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	691a      	ldr	r2, [r3, #16]
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4313      	orrs	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	08da      	lsrs	r2, r3, #3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3208      	adds	r2, #8
 8003012:	69b9      	ldr	r1, [r7, #24]
 8003014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	2203      	movs	r2, #3
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	4013      	ands	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 0203 	and.w	r2, r3, #3
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4313      	orrs	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 80b4 	beq.w	80031c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	4b60      	ldr	r3, [pc, #384]	; (80031e0 <HAL_GPIO_Init+0x30c>)
 8003060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003062:	4a5f      	ldr	r2, [pc, #380]	; (80031e0 <HAL_GPIO_Init+0x30c>)
 8003064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003068:	6453      	str	r3, [r2, #68]	; 0x44
 800306a:	4b5d      	ldr	r3, [pc, #372]	; (80031e0 <HAL_GPIO_Init+0x30c>)
 800306c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003076:	4a5b      	ldr	r2, [pc, #364]	; (80031e4 <HAL_GPIO_Init+0x310>)
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	089b      	lsrs	r3, r3, #2
 800307c:	3302      	adds	r3, #2
 800307e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	220f      	movs	r2, #15
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43db      	mvns	r3, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4013      	ands	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a52      	ldr	r2, [pc, #328]	; (80031e8 <HAL_GPIO_Init+0x314>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d02b      	beq.n	80030fa <HAL_GPIO_Init+0x226>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a51      	ldr	r2, [pc, #324]	; (80031ec <HAL_GPIO_Init+0x318>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d025      	beq.n	80030f6 <HAL_GPIO_Init+0x222>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a50      	ldr	r2, [pc, #320]	; (80031f0 <HAL_GPIO_Init+0x31c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d01f      	beq.n	80030f2 <HAL_GPIO_Init+0x21e>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a4f      	ldr	r2, [pc, #316]	; (80031f4 <HAL_GPIO_Init+0x320>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d019      	beq.n	80030ee <HAL_GPIO_Init+0x21a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a4e      	ldr	r2, [pc, #312]	; (80031f8 <HAL_GPIO_Init+0x324>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d013      	beq.n	80030ea <HAL_GPIO_Init+0x216>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a4d      	ldr	r2, [pc, #308]	; (80031fc <HAL_GPIO_Init+0x328>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00d      	beq.n	80030e6 <HAL_GPIO_Init+0x212>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a4c      	ldr	r2, [pc, #304]	; (8003200 <HAL_GPIO_Init+0x32c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d007      	beq.n	80030e2 <HAL_GPIO_Init+0x20e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a4b      	ldr	r2, [pc, #300]	; (8003204 <HAL_GPIO_Init+0x330>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d101      	bne.n	80030de <HAL_GPIO_Init+0x20a>
 80030da:	2307      	movs	r3, #7
 80030dc:	e00e      	b.n	80030fc <HAL_GPIO_Init+0x228>
 80030de:	2308      	movs	r3, #8
 80030e0:	e00c      	b.n	80030fc <HAL_GPIO_Init+0x228>
 80030e2:	2306      	movs	r3, #6
 80030e4:	e00a      	b.n	80030fc <HAL_GPIO_Init+0x228>
 80030e6:	2305      	movs	r3, #5
 80030e8:	e008      	b.n	80030fc <HAL_GPIO_Init+0x228>
 80030ea:	2304      	movs	r3, #4
 80030ec:	e006      	b.n	80030fc <HAL_GPIO_Init+0x228>
 80030ee:	2303      	movs	r3, #3
 80030f0:	e004      	b.n	80030fc <HAL_GPIO_Init+0x228>
 80030f2:	2302      	movs	r3, #2
 80030f4:	e002      	b.n	80030fc <HAL_GPIO_Init+0x228>
 80030f6:	2301      	movs	r3, #1
 80030f8:	e000      	b.n	80030fc <HAL_GPIO_Init+0x228>
 80030fa:	2300      	movs	r3, #0
 80030fc:	69fa      	ldr	r2, [r7, #28]
 80030fe:	f002 0203 	and.w	r2, r2, #3
 8003102:	0092      	lsls	r2, r2, #2
 8003104:	4093      	lsls	r3, r2
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	4313      	orrs	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800310c:	4935      	ldr	r1, [pc, #212]	; (80031e4 <HAL_GPIO_Init+0x310>)
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	089b      	lsrs	r3, r3, #2
 8003112:	3302      	adds	r3, #2
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800311a:	4b3b      	ldr	r3, [pc, #236]	; (8003208 <HAL_GPIO_Init+0x334>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	43db      	mvns	r3, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4013      	ands	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800313e:	4a32      	ldr	r2, [pc, #200]	; (8003208 <HAL_GPIO_Init+0x334>)
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003144:	4b30      	ldr	r3, [pc, #192]	; (8003208 <HAL_GPIO_Init+0x334>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	43db      	mvns	r3, r3
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4013      	ands	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003168:	4a27      	ldr	r2, [pc, #156]	; (8003208 <HAL_GPIO_Init+0x334>)
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800316e:	4b26      	ldr	r3, [pc, #152]	; (8003208 <HAL_GPIO_Init+0x334>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	43db      	mvns	r3, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4013      	ands	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	4313      	orrs	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003192:	4a1d      	ldr	r2, [pc, #116]	; (8003208 <HAL_GPIO_Init+0x334>)
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003198:	4b1b      	ldr	r3, [pc, #108]	; (8003208 <HAL_GPIO_Init+0x334>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	43db      	mvns	r3, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4013      	ands	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031bc:	4a12      	ldr	r2, [pc, #72]	; (8003208 <HAL_GPIO_Init+0x334>)
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	3301      	adds	r3, #1
 80031c6:	61fb      	str	r3, [r7, #28]
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	2b0f      	cmp	r3, #15
 80031cc:	f67f ae90 	bls.w	8002ef0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031d0:	bf00      	nop
 80031d2:	bf00      	nop
 80031d4:	3724      	adds	r7, #36	; 0x24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40023800 	.word	0x40023800
 80031e4:	40013800 	.word	0x40013800
 80031e8:	40020000 	.word	0x40020000
 80031ec:	40020400 	.word	0x40020400
 80031f0:	40020800 	.word	0x40020800
 80031f4:	40020c00 	.word	0x40020c00
 80031f8:	40021000 	.word	0x40021000
 80031fc:	40021400 	.word	0x40021400
 8003200:	40021800 	.word	0x40021800
 8003204:	40021c00 	.word	0x40021c00
 8003208:	40013c00 	.word	0x40013c00

0800320c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	691a      	ldr	r2, [r3, #16]
 800321c:	887b      	ldrh	r3, [r7, #2]
 800321e:	4013      	ands	r3, r2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003224:	2301      	movs	r3, #1
 8003226:	73fb      	strb	r3, [r7, #15]
 8003228:	e001      	b.n	800322e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800322a:	2300      	movs	r3, #0
 800322c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800322e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	807b      	strh	r3, [r7, #2]
 8003248:	4613      	mov	r3, r2
 800324a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800324c:	787b      	ldrb	r3, [r7, #1]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003252:	887a      	ldrh	r2, [r7, #2]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003258:	e003      	b.n	8003262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800325a:	887b      	ldrh	r3, [r7, #2]
 800325c:	041a      	lsls	r2, r3, #16
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	619a      	str	r2, [r3, #24]
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
	...

08003270 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e267      	b.n	8003752 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d075      	beq.n	800337a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800328e:	4b88      	ldr	r3, [pc, #544]	; (80034b0 <HAL_RCC_OscConfig+0x240>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 030c 	and.w	r3, r3, #12
 8003296:	2b04      	cmp	r3, #4
 8003298:	d00c      	beq.n	80032b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800329a:	4b85      	ldr	r3, [pc, #532]	; (80034b0 <HAL_RCC_OscConfig+0x240>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	d112      	bne.n	80032cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032a6:	4b82      	ldr	r3, [pc, #520]	; (80034b0 <HAL_RCC_OscConfig+0x240>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032b2:	d10b      	bne.n	80032cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b4:	4b7e      	ldr	r3, [pc, #504]	; (80034b0 <HAL_RCC_OscConfig+0x240>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d05b      	beq.n	8003378 <HAL_RCC_OscConfig+0x108>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d157      	bne.n	8003378 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e242      	b.n	8003752 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d4:	d106      	bne.n	80032e4 <HAL_RCC_OscConfig+0x74>
 80032d6:	4b76      	ldr	r3, [pc, #472]	; (80034b0 <HAL_RCC_OscConfig+0x240>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a75      	ldr	r2, [pc, #468]	; (80034b0 <HAL_RCC_OscConfig+0x240>)
 80032dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	e01d      	b.n	8003320 <HAL_RCC_OscConfig+0xb0>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032ec:	d10c      	bne.n	8003308 <HAL_RCC_OscConfig+0x98>
 80032ee:	4b70      	ldr	r3, [pc, #448]	; (80034b0 <HAL_RCC_OscConfig+0x240>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a6f      	ldr	r2, [pc, #444]	; (80034b0 <HAL_RCC_OscConfig+0x240>)
 80032f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	4b6d      	ldr	r3, [pc, #436]	; (80034b0 <HAL_RCC_OscConfig+0x240>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a6c      	ldr	r2, [pc, #432]	; (80034b0 <HAL_RCC_OscConfig+0x240>)
 8003300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	e00b      	b.n	8003320 <HAL_RCC_OscConfig+0xb0>
 8003308:	4b69      	ldr	r3, [pc, #420]	; (80034b0 <HAL_RCC_OscConfig+0x240>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a68      	ldr	r2, [pc, #416]	; (80034b0 <HAL_RCC_OscConfig+0x240>)
 800330e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003312:	6013      	str	r3, [r2, #0]
 8003314:	4b66      	ldr	r3, [pc, #408]	; (80034b0 <HAL_RCC_OscConfig+0x240>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a65      	ldr	r2, [pc, #404]	; (80034b0 <HAL_RCC_OscConfig+0x240>)
 800331a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800331e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d013      	beq.n	8003350 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003328:	f7ff f8f0 	bl	800250c <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003330:	f7ff f8ec 	bl	800250c <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b64      	cmp	r3, #100	; 0x64
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e207      	b.n	8003752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003342:	4b5b      	ldr	r3, [pc, #364]	; (80034b0 <HAL_RCC_OscConfig+0x240>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0f0      	beq.n	8003330 <HAL_RCC_OscConfig+0xc0>
 800334e:	e014      	b.n	800337a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003350:	f7ff f8dc 	bl	800250c <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003358:	f7ff f8d8 	bl	800250c <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b64      	cmp	r3, #100	; 0x64
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e1f3      	b.n	8003752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800336a:	4b51      	ldr	r3, [pc, #324]	; (80034b0 <HAL_RCC_OscConfig+0x240>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1f0      	bne.n	8003358 <HAL_RCC_OscConfig+0xe8>
 8003376:	e000      	b.n	800337a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d063      	beq.n	800344e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003386:	4b4a      	ldr	r3, [pc, #296]	; (80034b0 <HAL_RCC_OscConfig+0x240>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 030c 	and.w	r3, r3, #12
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00b      	beq.n	80033aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003392:	4b47      	ldr	r3, [pc, #284]	; (80034b0 <HAL_RCC_OscConfig+0x240>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800339a:	2b08      	cmp	r3, #8
 800339c:	d11c      	bne.n	80033d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800339e:	4b44      	ldr	r3, [pc, #272]	; (80034b0 <HAL_RCC_OscConfig+0x240>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d116      	bne.n	80033d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033aa:	4b41      	ldr	r3, [pc, #260]	; (80034b0 <HAL_RCC_OscConfig+0x240>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d005      	beq.n	80033c2 <HAL_RCC_OscConfig+0x152>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d001      	beq.n	80033c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e1c7      	b.n	8003752 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c2:	4b3b      	ldr	r3, [pc, #236]	; (80034b0 <HAL_RCC_OscConfig+0x240>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	4937      	ldr	r1, [pc, #220]	; (80034b0 <HAL_RCC_OscConfig+0x240>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033d6:	e03a      	b.n	800344e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d020      	beq.n	8003422 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033e0:	4b34      	ldr	r3, [pc, #208]	; (80034b4 <HAL_RCC_OscConfig+0x244>)
 80033e2:	2201      	movs	r2, #1
 80033e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e6:	f7ff f891 	bl	800250c <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033ee:	f7ff f88d 	bl	800250c <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e1a8      	b.n	8003752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003400:	4b2b      	ldr	r3, [pc, #172]	; (80034b0 <HAL_RCC_OscConfig+0x240>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0f0      	beq.n	80033ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800340c:	4b28      	ldr	r3, [pc, #160]	; (80034b0 <HAL_RCC_OscConfig+0x240>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	4925      	ldr	r1, [pc, #148]	; (80034b0 <HAL_RCC_OscConfig+0x240>)
 800341c:	4313      	orrs	r3, r2
 800341e:	600b      	str	r3, [r1, #0]
 8003420:	e015      	b.n	800344e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003422:	4b24      	ldr	r3, [pc, #144]	; (80034b4 <HAL_RCC_OscConfig+0x244>)
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003428:	f7ff f870 	bl	800250c <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003430:	f7ff f86c 	bl	800250c <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e187      	b.n	8003752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003442:	4b1b      	ldr	r3, [pc, #108]	; (80034b0 <HAL_RCC_OscConfig+0x240>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f0      	bne.n	8003430 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	2b00      	cmp	r3, #0
 8003458:	d036      	beq.n	80034c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d016      	beq.n	8003490 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003462:	4b15      	ldr	r3, [pc, #84]	; (80034b8 <HAL_RCC_OscConfig+0x248>)
 8003464:	2201      	movs	r2, #1
 8003466:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003468:	f7ff f850 	bl	800250c <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003470:	f7ff f84c 	bl	800250c <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e167      	b.n	8003752 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003482:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <HAL_RCC_OscConfig+0x240>)
 8003484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0f0      	beq.n	8003470 <HAL_RCC_OscConfig+0x200>
 800348e:	e01b      	b.n	80034c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003490:	4b09      	ldr	r3, [pc, #36]	; (80034b8 <HAL_RCC_OscConfig+0x248>)
 8003492:	2200      	movs	r2, #0
 8003494:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003496:	f7ff f839 	bl	800250c <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800349c:	e00e      	b.n	80034bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800349e:	f7ff f835 	bl	800250c <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d907      	bls.n	80034bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e150      	b.n	8003752 <HAL_RCC_OscConfig+0x4e2>
 80034b0:	40023800 	.word	0x40023800
 80034b4:	42470000 	.word	0x42470000
 80034b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034bc:	4b88      	ldr	r3, [pc, #544]	; (80036e0 <HAL_RCC_OscConfig+0x470>)
 80034be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1ea      	bne.n	800349e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 8097 	beq.w	8003604 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034d6:	2300      	movs	r3, #0
 80034d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034da:	4b81      	ldr	r3, [pc, #516]	; (80036e0 <HAL_RCC_OscConfig+0x470>)
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10f      	bne.n	8003506 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	4b7d      	ldr	r3, [pc, #500]	; (80036e0 <HAL_RCC_OscConfig+0x470>)
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	4a7c      	ldr	r2, [pc, #496]	; (80036e0 <HAL_RCC_OscConfig+0x470>)
 80034f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034f4:	6413      	str	r3, [r2, #64]	; 0x40
 80034f6:	4b7a      	ldr	r3, [pc, #488]	; (80036e0 <HAL_RCC_OscConfig+0x470>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034fe:	60bb      	str	r3, [r7, #8]
 8003500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003502:	2301      	movs	r3, #1
 8003504:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003506:	4b77      	ldr	r3, [pc, #476]	; (80036e4 <HAL_RCC_OscConfig+0x474>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350e:	2b00      	cmp	r3, #0
 8003510:	d118      	bne.n	8003544 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003512:	4b74      	ldr	r3, [pc, #464]	; (80036e4 <HAL_RCC_OscConfig+0x474>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a73      	ldr	r2, [pc, #460]	; (80036e4 <HAL_RCC_OscConfig+0x474>)
 8003518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800351c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800351e:	f7fe fff5 	bl	800250c <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003526:	f7fe fff1 	bl	800250c <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e10c      	b.n	8003752 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003538:	4b6a      	ldr	r3, [pc, #424]	; (80036e4 <HAL_RCC_OscConfig+0x474>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0f0      	beq.n	8003526 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d106      	bne.n	800355a <HAL_RCC_OscConfig+0x2ea>
 800354c:	4b64      	ldr	r3, [pc, #400]	; (80036e0 <HAL_RCC_OscConfig+0x470>)
 800354e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003550:	4a63      	ldr	r2, [pc, #396]	; (80036e0 <HAL_RCC_OscConfig+0x470>)
 8003552:	f043 0301 	orr.w	r3, r3, #1
 8003556:	6713      	str	r3, [r2, #112]	; 0x70
 8003558:	e01c      	b.n	8003594 <HAL_RCC_OscConfig+0x324>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	2b05      	cmp	r3, #5
 8003560:	d10c      	bne.n	800357c <HAL_RCC_OscConfig+0x30c>
 8003562:	4b5f      	ldr	r3, [pc, #380]	; (80036e0 <HAL_RCC_OscConfig+0x470>)
 8003564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003566:	4a5e      	ldr	r2, [pc, #376]	; (80036e0 <HAL_RCC_OscConfig+0x470>)
 8003568:	f043 0304 	orr.w	r3, r3, #4
 800356c:	6713      	str	r3, [r2, #112]	; 0x70
 800356e:	4b5c      	ldr	r3, [pc, #368]	; (80036e0 <HAL_RCC_OscConfig+0x470>)
 8003570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003572:	4a5b      	ldr	r2, [pc, #364]	; (80036e0 <HAL_RCC_OscConfig+0x470>)
 8003574:	f043 0301 	orr.w	r3, r3, #1
 8003578:	6713      	str	r3, [r2, #112]	; 0x70
 800357a:	e00b      	b.n	8003594 <HAL_RCC_OscConfig+0x324>
 800357c:	4b58      	ldr	r3, [pc, #352]	; (80036e0 <HAL_RCC_OscConfig+0x470>)
 800357e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003580:	4a57      	ldr	r2, [pc, #348]	; (80036e0 <HAL_RCC_OscConfig+0x470>)
 8003582:	f023 0301 	bic.w	r3, r3, #1
 8003586:	6713      	str	r3, [r2, #112]	; 0x70
 8003588:	4b55      	ldr	r3, [pc, #340]	; (80036e0 <HAL_RCC_OscConfig+0x470>)
 800358a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358c:	4a54      	ldr	r2, [pc, #336]	; (80036e0 <HAL_RCC_OscConfig+0x470>)
 800358e:	f023 0304 	bic.w	r3, r3, #4
 8003592:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d015      	beq.n	80035c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800359c:	f7fe ffb6 	bl	800250c <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a2:	e00a      	b.n	80035ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035a4:	f7fe ffb2 	bl	800250c <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e0cb      	b.n	8003752 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ba:	4b49      	ldr	r3, [pc, #292]	; (80036e0 <HAL_RCC_OscConfig+0x470>)
 80035bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0ee      	beq.n	80035a4 <HAL_RCC_OscConfig+0x334>
 80035c6:	e014      	b.n	80035f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c8:	f7fe ffa0 	bl	800250c <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ce:	e00a      	b.n	80035e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035d0:	f7fe ff9c 	bl	800250c <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	f241 3288 	movw	r2, #5000	; 0x1388
 80035de:	4293      	cmp	r3, r2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e0b5      	b.n	8003752 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035e6:	4b3e      	ldr	r3, [pc, #248]	; (80036e0 <HAL_RCC_OscConfig+0x470>)
 80035e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1ee      	bne.n	80035d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035f2:	7dfb      	ldrb	r3, [r7, #23]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d105      	bne.n	8003604 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f8:	4b39      	ldr	r3, [pc, #228]	; (80036e0 <HAL_RCC_OscConfig+0x470>)
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	4a38      	ldr	r2, [pc, #224]	; (80036e0 <HAL_RCC_OscConfig+0x470>)
 80035fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003602:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 80a1 	beq.w	8003750 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800360e:	4b34      	ldr	r3, [pc, #208]	; (80036e0 <HAL_RCC_OscConfig+0x470>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 030c 	and.w	r3, r3, #12
 8003616:	2b08      	cmp	r3, #8
 8003618:	d05c      	beq.n	80036d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	2b02      	cmp	r3, #2
 8003620:	d141      	bne.n	80036a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003622:	4b31      	ldr	r3, [pc, #196]	; (80036e8 <HAL_RCC_OscConfig+0x478>)
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003628:	f7fe ff70 	bl	800250c <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003630:	f7fe ff6c 	bl	800250c <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e087      	b.n	8003752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003642:	4b27      	ldr	r3, [pc, #156]	; (80036e0 <HAL_RCC_OscConfig+0x470>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f0      	bne.n	8003630 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69da      	ldr	r2, [r3, #28]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	431a      	orrs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	019b      	lsls	r3, r3, #6
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003664:	085b      	lsrs	r3, r3, #1
 8003666:	3b01      	subs	r3, #1
 8003668:	041b      	lsls	r3, r3, #16
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	061b      	lsls	r3, r3, #24
 8003672:	491b      	ldr	r1, [pc, #108]	; (80036e0 <HAL_RCC_OscConfig+0x470>)
 8003674:	4313      	orrs	r3, r2
 8003676:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003678:	4b1b      	ldr	r3, [pc, #108]	; (80036e8 <HAL_RCC_OscConfig+0x478>)
 800367a:	2201      	movs	r2, #1
 800367c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367e:	f7fe ff45 	bl	800250c <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003686:	f7fe ff41 	bl	800250c <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e05c      	b.n	8003752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003698:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <HAL_RCC_OscConfig+0x470>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0f0      	beq.n	8003686 <HAL_RCC_OscConfig+0x416>
 80036a4:	e054      	b.n	8003750 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a6:	4b10      	ldr	r3, [pc, #64]	; (80036e8 <HAL_RCC_OscConfig+0x478>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ac:	f7fe ff2e 	bl	800250c <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b4:	f7fe ff2a 	bl	800250c <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e045      	b.n	8003752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c6:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <HAL_RCC_OscConfig+0x470>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f0      	bne.n	80036b4 <HAL_RCC_OscConfig+0x444>
 80036d2:	e03d      	b.n	8003750 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d107      	bne.n	80036ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e038      	b.n	8003752 <HAL_RCC_OscConfig+0x4e2>
 80036e0:	40023800 	.word	0x40023800
 80036e4:	40007000 	.word	0x40007000
 80036e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036ec:	4b1b      	ldr	r3, [pc, #108]	; (800375c <HAL_RCC_OscConfig+0x4ec>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d028      	beq.n	800374c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003704:	429a      	cmp	r2, r3
 8003706:	d121      	bne.n	800374c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003712:	429a      	cmp	r2, r3
 8003714:	d11a      	bne.n	800374c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800371c:	4013      	ands	r3, r2
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003722:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003724:	4293      	cmp	r3, r2
 8003726:	d111      	bne.n	800374c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003732:	085b      	lsrs	r3, r3, #1
 8003734:	3b01      	subs	r3, #1
 8003736:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003738:	429a      	cmp	r2, r3
 800373a:	d107      	bne.n	800374c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003746:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003748:	429a      	cmp	r2, r3
 800374a:	d001      	beq.n	8003750 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e000      	b.n	8003752 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3718      	adds	r7, #24
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	40023800 	.word	0x40023800

08003760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e0cc      	b.n	800390e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003774:	4b68      	ldr	r3, [pc, #416]	; (8003918 <HAL_RCC_ClockConfig+0x1b8>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	429a      	cmp	r2, r3
 8003780:	d90c      	bls.n	800379c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003782:	4b65      	ldr	r3, [pc, #404]	; (8003918 <HAL_RCC_ClockConfig+0x1b8>)
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800378a:	4b63      	ldr	r3, [pc, #396]	; (8003918 <HAL_RCC_ClockConfig+0x1b8>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	429a      	cmp	r2, r3
 8003796:	d001      	beq.n	800379c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e0b8      	b.n	800390e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d020      	beq.n	80037ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d005      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037b4:	4b59      	ldr	r3, [pc, #356]	; (800391c <HAL_RCC_ClockConfig+0x1bc>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	4a58      	ldr	r2, [pc, #352]	; (800391c <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0308 	and.w	r3, r3, #8
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d005      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037cc:	4b53      	ldr	r3, [pc, #332]	; (800391c <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	4a52      	ldr	r2, [pc, #328]	; (800391c <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037d8:	4b50      	ldr	r3, [pc, #320]	; (800391c <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	494d      	ldr	r1, [pc, #308]	; (800391c <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d044      	beq.n	8003880 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d107      	bne.n	800380e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fe:	4b47      	ldr	r3, [pc, #284]	; (800391c <HAL_RCC_ClockConfig+0x1bc>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d119      	bne.n	800383e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e07f      	b.n	800390e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2b02      	cmp	r3, #2
 8003814:	d003      	beq.n	800381e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800381a:	2b03      	cmp	r3, #3
 800381c:	d107      	bne.n	800382e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800381e:	4b3f      	ldr	r3, [pc, #252]	; (800391c <HAL_RCC_ClockConfig+0x1bc>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d109      	bne.n	800383e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e06f      	b.n	800390e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800382e:	4b3b      	ldr	r3, [pc, #236]	; (800391c <HAL_RCC_ClockConfig+0x1bc>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e067      	b.n	800390e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800383e:	4b37      	ldr	r3, [pc, #220]	; (800391c <HAL_RCC_ClockConfig+0x1bc>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f023 0203 	bic.w	r2, r3, #3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	4934      	ldr	r1, [pc, #208]	; (800391c <HAL_RCC_ClockConfig+0x1bc>)
 800384c:	4313      	orrs	r3, r2
 800384e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003850:	f7fe fe5c 	bl	800250c <HAL_GetTick>
 8003854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003856:	e00a      	b.n	800386e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003858:	f7fe fe58 	bl	800250c <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	f241 3288 	movw	r2, #5000	; 0x1388
 8003866:	4293      	cmp	r3, r2
 8003868:	d901      	bls.n	800386e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e04f      	b.n	800390e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386e:	4b2b      	ldr	r3, [pc, #172]	; (800391c <HAL_RCC_ClockConfig+0x1bc>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 020c 	and.w	r2, r3, #12
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	429a      	cmp	r2, r3
 800387e:	d1eb      	bne.n	8003858 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003880:	4b25      	ldr	r3, [pc, #148]	; (8003918 <HAL_RCC_ClockConfig+0x1b8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	d20c      	bcs.n	80038a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388e:	4b22      	ldr	r3, [pc, #136]	; (8003918 <HAL_RCC_ClockConfig+0x1b8>)
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003896:	4b20      	ldr	r3, [pc, #128]	; (8003918 <HAL_RCC_ClockConfig+0x1b8>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0307 	and.w	r3, r3, #7
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d001      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e032      	b.n	800390e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d008      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038b4:	4b19      	ldr	r3, [pc, #100]	; (800391c <HAL_RCC_ClockConfig+0x1bc>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	4916      	ldr	r1, [pc, #88]	; (800391c <HAL_RCC_ClockConfig+0x1bc>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d009      	beq.n	80038e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038d2:	4b12      	ldr	r3, [pc, #72]	; (800391c <HAL_RCC_ClockConfig+0x1bc>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	490e      	ldr	r1, [pc, #56]	; (800391c <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038e6:	f000 f821 	bl	800392c <HAL_RCC_GetSysClockFreq>
 80038ea:	4602      	mov	r2, r0
 80038ec:	4b0b      	ldr	r3, [pc, #44]	; (800391c <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	091b      	lsrs	r3, r3, #4
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	490a      	ldr	r1, [pc, #40]	; (8003920 <HAL_RCC_ClockConfig+0x1c0>)
 80038f8:	5ccb      	ldrb	r3, [r1, r3]
 80038fa:	fa22 f303 	lsr.w	r3, r2, r3
 80038fe:	4a09      	ldr	r2, [pc, #36]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 8003900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003902:	4b09      	ldr	r3, [pc, #36]	; (8003928 <HAL_RCC_ClockConfig+0x1c8>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f7fe fdbc 	bl	8002484 <HAL_InitTick>

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	40023c00 	.word	0x40023c00
 800391c:	40023800 	.word	0x40023800
 8003920:	08009494 	.word	0x08009494
 8003924:	20000000 	.word	0x20000000
 8003928:	20000004 	.word	0x20000004

0800392c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800392c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003930:	b094      	sub	sp, #80	; 0x50
 8003932:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003934:	2300      	movs	r3, #0
 8003936:	647b      	str	r3, [r7, #68]	; 0x44
 8003938:	2300      	movs	r3, #0
 800393a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800393c:	2300      	movs	r3, #0
 800393e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003940:	2300      	movs	r3, #0
 8003942:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003944:	4b79      	ldr	r3, [pc, #484]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f003 030c 	and.w	r3, r3, #12
 800394c:	2b08      	cmp	r3, #8
 800394e:	d00d      	beq.n	800396c <HAL_RCC_GetSysClockFreq+0x40>
 8003950:	2b08      	cmp	r3, #8
 8003952:	f200 80e1 	bhi.w	8003b18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003956:	2b00      	cmp	r3, #0
 8003958:	d002      	beq.n	8003960 <HAL_RCC_GetSysClockFreq+0x34>
 800395a:	2b04      	cmp	r3, #4
 800395c:	d003      	beq.n	8003966 <HAL_RCC_GetSysClockFreq+0x3a>
 800395e:	e0db      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003960:	4b73      	ldr	r3, [pc, #460]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x204>)
 8003962:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003964:	e0db      	b.n	8003b1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003966:	4b73      	ldr	r3, [pc, #460]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x208>)
 8003968:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800396a:	e0d8      	b.n	8003b1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800396c:	4b6f      	ldr	r3, [pc, #444]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x200>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003974:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003976:	4b6d      	ldr	r3, [pc, #436]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d063      	beq.n	8003a4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003982:	4b6a      	ldr	r3, [pc, #424]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	099b      	lsrs	r3, r3, #6
 8003988:	2200      	movs	r2, #0
 800398a:	63bb      	str	r3, [r7, #56]	; 0x38
 800398c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800398e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003994:	633b      	str	r3, [r7, #48]	; 0x30
 8003996:	2300      	movs	r3, #0
 8003998:	637b      	str	r3, [r7, #52]	; 0x34
 800399a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800399e:	4622      	mov	r2, r4
 80039a0:	462b      	mov	r3, r5
 80039a2:	f04f 0000 	mov.w	r0, #0
 80039a6:	f04f 0100 	mov.w	r1, #0
 80039aa:	0159      	lsls	r1, r3, #5
 80039ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039b0:	0150      	lsls	r0, r2, #5
 80039b2:	4602      	mov	r2, r0
 80039b4:	460b      	mov	r3, r1
 80039b6:	4621      	mov	r1, r4
 80039b8:	1a51      	subs	r1, r2, r1
 80039ba:	6139      	str	r1, [r7, #16]
 80039bc:	4629      	mov	r1, r5
 80039be:	eb63 0301 	sbc.w	r3, r3, r1
 80039c2:	617b      	str	r3, [r7, #20]
 80039c4:	f04f 0200 	mov.w	r2, #0
 80039c8:	f04f 0300 	mov.w	r3, #0
 80039cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039d0:	4659      	mov	r1, fp
 80039d2:	018b      	lsls	r3, r1, #6
 80039d4:	4651      	mov	r1, sl
 80039d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039da:	4651      	mov	r1, sl
 80039dc:	018a      	lsls	r2, r1, #6
 80039de:	4651      	mov	r1, sl
 80039e0:	ebb2 0801 	subs.w	r8, r2, r1
 80039e4:	4659      	mov	r1, fp
 80039e6:	eb63 0901 	sbc.w	r9, r3, r1
 80039ea:	f04f 0200 	mov.w	r2, #0
 80039ee:	f04f 0300 	mov.w	r3, #0
 80039f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039fe:	4690      	mov	r8, r2
 8003a00:	4699      	mov	r9, r3
 8003a02:	4623      	mov	r3, r4
 8003a04:	eb18 0303 	adds.w	r3, r8, r3
 8003a08:	60bb      	str	r3, [r7, #8]
 8003a0a:	462b      	mov	r3, r5
 8003a0c:	eb49 0303 	adc.w	r3, r9, r3
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	f04f 0200 	mov.w	r2, #0
 8003a16:	f04f 0300 	mov.w	r3, #0
 8003a1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a1e:	4629      	mov	r1, r5
 8003a20:	024b      	lsls	r3, r1, #9
 8003a22:	4621      	mov	r1, r4
 8003a24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a28:	4621      	mov	r1, r4
 8003a2a:	024a      	lsls	r2, r1, #9
 8003a2c:	4610      	mov	r0, r2
 8003a2e:	4619      	mov	r1, r3
 8003a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a32:	2200      	movs	r2, #0
 8003a34:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a3c:	f7fd f924 	bl	8000c88 <__aeabi_uldivmod>
 8003a40:	4602      	mov	r2, r0
 8003a42:	460b      	mov	r3, r1
 8003a44:	4613      	mov	r3, r2
 8003a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a48:	e058      	b.n	8003afc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a4a:	4b38      	ldr	r3, [pc, #224]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	099b      	lsrs	r3, r3, #6
 8003a50:	2200      	movs	r2, #0
 8003a52:	4618      	mov	r0, r3
 8003a54:	4611      	mov	r1, r2
 8003a56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a5a:	623b      	str	r3, [r7, #32]
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a64:	4642      	mov	r2, r8
 8003a66:	464b      	mov	r3, r9
 8003a68:	f04f 0000 	mov.w	r0, #0
 8003a6c:	f04f 0100 	mov.w	r1, #0
 8003a70:	0159      	lsls	r1, r3, #5
 8003a72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a76:	0150      	lsls	r0, r2, #5
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4641      	mov	r1, r8
 8003a7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a82:	4649      	mov	r1, r9
 8003a84:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a88:	f04f 0200 	mov.w	r2, #0
 8003a8c:	f04f 0300 	mov.w	r3, #0
 8003a90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a9c:	ebb2 040a 	subs.w	r4, r2, sl
 8003aa0:	eb63 050b 	sbc.w	r5, r3, fp
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	f04f 0300 	mov.w	r3, #0
 8003aac:	00eb      	lsls	r3, r5, #3
 8003aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ab2:	00e2      	lsls	r2, r4, #3
 8003ab4:	4614      	mov	r4, r2
 8003ab6:	461d      	mov	r5, r3
 8003ab8:	4643      	mov	r3, r8
 8003aba:	18e3      	adds	r3, r4, r3
 8003abc:	603b      	str	r3, [r7, #0]
 8003abe:	464b      	mov	r3, r9
 8003ac0:	eb45 0303 	adc.w	r3, r5, r3
 8003ac4:	607b      	str	r3, [r7, #4]
 8003ac6:	f04f 0200 	mov.w	r2, #0
 8003aca:	f04f 0300 	mov.w	r3, #0
 8003ace:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ad2:	4629      	mov	r1, r5
 8003ad4:	028b      	lsls	r3, r1, #10
 8003ad6:	4621      	mov	r1, r4
 8003ad8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003adc:	4621      	mov	r1, r4
 8003ade:	028a      	lsls	r2, r1, #10
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	61bb      	str	r3, [r7, #24]
 8003aea:	61fa      	str	r2, [r7, #28]
 8003aec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003af0:	f7fd f8ca 	bl	8000c88 <__aeabi_uldivmod>
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	4613      	mov	r3, r2
 8003afa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003afc:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	0c1b      	lsrs	r3, r3, #16
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	3301      	adds	r3, #1
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003b0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b16:	e002      	b.n	8003b1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b18:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3750      	adds	r7, #80	; 0x50
 8003b24:	46bd      	mov	sp, r7
 8003b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	00f42400 	.word	0x00f42400
 8003b34:	007a1200 	.word	0x007a1200

08003b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b3c:	4b03      	ldr	r3, [pc, #12]	; (8003b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	20000000 	.word	0x20000000

08003b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b54:	f7ff fff0 	bl	8003b38 <HAL_RCC_GetHCLKFreq>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	0a9b      	lsrs	r3, r3, #10
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	4903      	ldr	r1, [pc, #12]	; (8003b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b66:	5ccb      	ldrb	r3, [r1, r3]
 8003b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40023800 	.word	0x40023800
 8003b74:	080094a4 	.word	0x080094a4

08003b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b7c:	f7ff ffdc 	bl	8003b38 <HAL_RCC_GetHCLKFreq>
 8003b80:	4602      	mov	r2, r0
 8003b82:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	0b5b      	lsrs	r3, r3, #13
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	4903      	ldr	r1, [pc, #12]	; (8003b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b8e:	5ccb      	ldrb	r3, [r1, r3]
 8003b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	080094a4 	.word	0x080094a4

08003ba0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d001      	beq.n	8003bb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e04e      	b.n	8003c56 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a23      	ldr	r2, [pc, #140]	; (8003c64 <HAL_TIM_Base_Start_IT+0xc4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d022      	beq.n	8003c20 <HAL_TIM_Base_Start_IT+0x80>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be2:	d01d      	beq.n	8003c20 <HAL_TIM_Base_Start_IT+0x80>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a1f      	ldr	r2, [pc, #124]	; (8003c68 <HAL_TIM_Base_Start_IT+0xc8>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d018      	beq.n	8003c20 <HAL_TIM_Base_Start_IT+0x80>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a1e      	ldr	r2, [pc, #120]	; (8003c6c <HAL_TIM_Base_Start_IT+0xcc>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d013      	beq.n	8003c20 <HAL_TIM_Base_Start_IT+0x80>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a1c      	ldr	r2, [pc, #112]	; (8003c70 <HAL_TIM_Base_Start_IT+0xd0>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d00e      	beq.n	8003c20 <HAL_TIM_Base_Start_IT+0x80>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a1b      	ldr	r2, [pc, #108]	; (8003c74 <HAL_TIM_Base_Start_IT+0xd4>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d009      	beq.n	8003c20 <HAL_TIM_Base_Start_IT+0x80>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a19      	ldr	r2, [pc, #100]	; (8003c78 <HAL_TIM_Base_Start_IT+0xd8>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d004      	beq.n	8003c20 <HAL_TIM_Base_Start_IT+0x80>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a18      	ldr	r2, [pc, #96]	; (8003c7c <HAL_TIM_Base_Start_IT+0xdc>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d111      	bne.n	8003c44 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2b06      	cmp	r3, #6
 8003c30:	d010      	beq.n	8003c54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f042 0201 	orr.w	r2, r2, #1
 8003c40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c42:	e007      	b.n	8003c54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0201 	orr.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	40010000 	.word	0x40010000
 8003c68:	40000400 	.word	0x40000400
 8003c6c:	40000800 	.word	0x40000800
 8003c70:	40000c00 	.word	0x40000c00
 8003c74:	40010400 	.word	0x40010400
 8003c78:	40014000 	.word	0x40014000
 8003c7c:	40001800 	.word	0x40001800

08003c80 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e097      	b.n	8003dc4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d106      	bne.n	8003cae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f7fe f9a3 	bl	8001ff4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6812      	ldr	r2, [r2, #0]
 8003cc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cc4:	f023 0307 	bic.w	r3, r3, #7
 8003cc8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	4610      	mov	r0, r2
 8003cd6:	f000 fa1f 	bl	8004118 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d02:	f023 0303 	bic.w	r3, r3, #3
 8003d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	021b      	lsls	r3, r3, #8
 8003d12:	4313      	orrs	r3, r2
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003d20:	f023 030c 	bic.w	r3, r3, #12
 8003d24:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	68da      	ldr	r2, [r3, #12]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	021b      	lsls	r3, r3, #8
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	011a      	lsls	r2, r3, #4
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	031b      	lsls	r3, r3, #12
 8003d50:	4313      	orrs	r3, r2
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003d5e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003d66:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	4313      	orrs	r3, r2
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3718      	adds	r7, #24
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ddc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003de4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003dec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003df4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d110      	bne.n	8003e1e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d102      	bne.n	8003e08 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e02:	7b7b      	ldrb	r3, [r7, #13]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d001      	beq.n	8003e0c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e069      	b.n	8003ee0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e1c:	e031      	b.n	8003e82 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	2b04      	cmp	r3, #4
 8003e22:	d110      	bne.n	8003e46 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e24:	7bbb      	ldrb	r3, [r7, #14]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d102      	bne.n	8003e30 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e2a:	7b3b      	ldrb	r3, [r7, #12]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d001      	beq.n	8003e34 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e055      	b.n	8003ee0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e44:	e01d      	b.n	8003e82 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d108      	bne.n	8003e5e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e4c:	7bbb      	ldrb	r3, [r7, #14]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d105      	bne.n	8003e5e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e52:	7b7b      	ldrb	r3, [r7, #13]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d102      	bne.n	8003e5e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e58:	7b3b      	ldrb	r3, [r7, #12]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d001      	beq.n	8003e62 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e03e      	b.n	8003ee0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2202      	movs	r2, #2
 8003e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2202      	movs	r2, #2
 8003e76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <HAL_TIM_Encoder_Start+0xc4>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d008      	beq.n	8003ea0 <HAL_TIM_Encoder_Start+0xd4>
 8003e8e:	e00f      	b.n	8003eb0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2201      	movs	r2, #1
 8003e96:	2100      	movs	r1, #0
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 f9e9 	bl	8004270 <TIM_CCxChannelCmd>
      break;
 8003e9e:	e016      	b.n	8003ece <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	2104      	movs	r1, #4
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 f9e1 	bl	8004270 <TIM_CCxChannelCmd>
      break;
 8003eae:	e00e      	b.n	8003ece <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 f9d9 	bl	8004270 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	2104      	movs	r1, #4
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 f9d2 	bl	8004270 <TIM_CCxChannelCmd>
      break;
 8003ecc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f042 0201 	orr.w	r2, r2, #1
 8003edc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d020      	beq.n	8003f4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d01b      	beq.n	8003f4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f06f 0202 	mvn.w	r2, #2
 8003f1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f8d2 	bl	80040dc <HAL_TIM_IC_CaptureCallback>
 8003f38:	e005      	b.n	8003f46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f8c4 	bl	80040c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f8d5 	bl	80040f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d020      	beq.n	8003f98 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d01b      	beq.n	8003f98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f06f 0204 	mvn.w	r2, #4
 8003f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f8ac 	bl	80040dc <HAL_TIM_IC_CaptureCallback>
 8003f84:	e005      	b.n	8003f92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f89e 	bl	80040c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f8af 	bl	80040f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	f003 0308 	and.w	r3, r3, #8
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d020      	beq.n	8003fe4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d01b      	beq.n	8003fe4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f06f 0208 	mvn.w	r2, #8
 8003fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2204      	movs	r2, #4
 8003fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	f003 0303 	and.w	r3, r3, #3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f886 	bl	80040dc <HAL_TIM_IC_CaptureCallback>
 8003fd0:	e005      	b.n	8003fde <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f878 	bl	80040c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f889 	bl	80040f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f003 0310 	and.w	r3, r3, #16
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d020      	beq.n	8004030 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f003 0310 	and.w	r3, r3, #16
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d01b      	beq.n	8004030 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f06f 0210 	mvn.w	r2, #16
 8004000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2208      	movs	r2, #8
 8004006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f860 	bl	80040dc <HAL_TIM_IC_CaptureCallback>
 800401c:	e005      	b.n	800402a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f852 	bl	80040c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f863 	bl	80040f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00c      	beq.n	8004054 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d007      	beq.n	8004054 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f06f 0201 	mvn.w	r2, #1
 800404c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7fd fa06 	bl	8001460 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00c      	beq.n	8004078 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004064:	2b00      	cmp	r3, #0
 8004066:	d007      	beq.n	8004078 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f9a8 	bl	80043c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00c      	beq.n	800409c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004088:	2b00      	cmp	r3, #0
 800408a:	d007      	beq.n	800409c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f834 	bl	8004104 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f003 0320 	and.w	r3, r3, #32
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00c      	beq.n	80040c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f003 0320 	and.w	r3, r3, #32
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d007      	beq.n	80040c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f06f 0220 	mvn.w	r2, #32
 80040b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f97a 	bl	80043b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040c0:	bf00      	nop
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a46      	ldr	r2, [pc, #280]	; (8004244 <TIM_Base_SetConfig+0x12c>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d013      	beq.n	8004158 <TIM_Base_SetConfig+0x40>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004136:	d00f      	beq.n	8004158 <TIM_Base_SetConfig+0x40>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a43      	ldr	r2, [pc, #268]	; (8004248 <TIM_Base_SetConfig+0x130>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d00b      	beq.n	8004158 <TIM_Base_SetConfig+0x40>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a42      	ldr	r2, [pc, #264]	; (800424c <TIM_Base_SetConfig+0x134>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d007      	beq.n	8004158 <TIM_Base_SetConfig+0x40>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a41      	ldr	r2, [pc, #260]	; (8004250 <TIM_Base_SetConfig+0x138>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d003      	beq.n	8004158 <TIM_Base_SetConfig+0x40>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a40      	ldr	r2, [pc, #256]	; (8004254 <TIM_Base_SetConfig+0x13c>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d108      	bne.n	800416a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a35      	ldr	r2, [pc, #212]	; (8004244 <TIM_Base_SetConfig+0x12c>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d02b      	beq.n	80041ca <TIM_Base_SetConfig+0xb2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004178:	d027      	beq.n	80041ca <TIM_Base_SetConfig+0xb2>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a32      	ldr	r2, [pc, #200]	; (8004248 <TIM_Base_SetConfig+0x130>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d023      	beq.n	80041ca <TIM_Base_SetConfig+0xb2>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a31      	ldr	r2, [pc, #196]	; (800424c <TIM_Base_SetConfig+0x134>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d01f      	beq.n	80041ca <TIM_Base_SetConfig+0xb2>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a30      	ldr	r2, [pc, #192]	; (8004250 <TIM_Base_SetConfig+0x138>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d01b      	beq.n	80041ca <TIM_Base_SetConfig+0xb2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a2f      	ldr	r2, [pc, #188]	; (8004254 <TIM_Base_SetConfig+0x13c>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d017      	beq.n	80041ca <TIM_Base_SetConfig+0xb2>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a2e      	ldr	r2, [pc, #184]	; (8004258 <TIM_Base_SetConfig+0x140>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d013      	beq.n	80041ca <TIM_Base_SetConfig+0xb2>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a2d      	ldr	r2, [pc, #180]	; (800425c <TIM_Base_SetConfig+0x144>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00f      	beq.n	80041ca <TIM_Base_SetConfig+0xb2>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a2c      	ldr	r2, [pc, #176]	; (8004260 <TIM_Base_SetConfig+0x148>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d00b      	beq.n	80041ca <TIM_Base_SetConfig+0xb2>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a2b      	ldr	r2, [pc, #172]	; (8004264 <TIM_Base_SetConfig+0x14c>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d007      	beq.n	80041ca <TIM_Base_SetConfig+0xb2>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a2a      	ldr	r2, [pc, #168]	; (8004268 <TIM_Base_SetConfig+0x150>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d003      	beq.n	80041ca <TIM_Base_SetConfig+0xb2>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a29      	ldr	r2, [pc, #164]	; (800426c <TIM_Base_SetConfig+0x154>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d108      	bne.n	80041dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	4313      	orrs	r3, r2
 80041da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a10      	ldr	r2, [pc, #64]	; (8004244 <TIM_Base_SetConfig+0x12c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d003      	beq.n	8004210 <TIM_Base_SetConfig+0xf8>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a12      	ldr	r2, [pc, #72]	; (8004254 <TIM_Base_SetConfig+0x13c>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d103      	bne.n	8004218 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	691a      	ldr	r2, [r3, #16]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b01      	cmp	r3, #1
 8004228:	d105      	bne.n	8004236 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f023 0201 	bic.w	r2, r3, #1
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	611a      	str	r2, [r3, #16]
  }
}
 8004236:	bf00      	nop
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40010000 	.word	0x40010000
 8004248:	40000400 	.word	0x40000400
 800424c:	40000800 	.word	0x40000800
 8004250:	40000c00 	.word	0x40000c00
 8004254:	40010400 	.word	0x40010400
 8004258:	40014000 	.word	0x40014000
 800425c:	40014400 	.word	0x40014400
 8004260:	40014800 	.word	0x40014800
 8004264:	40001800 	.word	0x40001800
 8004268:	40001c00 	.word	0x40001c00
 800426c:	40002000 	.word	0x40002000

08004270 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	f003 031f 	and.w	r3, r3, #31
 8004282:	2201      	movs	r2, #1
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a1a      	ldr	r2, [r3, #32]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	43db      	mvns	r3, r3
 8004292:	401a      	ands	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a1a      	ldr	r2, [r3, #32]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f003 031f 	and.w	r3, r3, #31
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	fa01 f303 	lsl.w	r3, r1, r3
 80042a8:	431a      	orrs	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	621a      	str	r2, [r3, #32]
}
 80042ae:	bf00      	nop
 80042b0:	371c      	adds	r7, #28
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
	...

080042bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d101      	bne.n	80042d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042d0:	2302      	movs	r3, #2
 80042d2:	e05a      	b.n	800438a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	4313      	orrs	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a21      	ldr	r2, [pc, #132]	; (8004398 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d022      	beq.n	800435e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004320:	d01d      	beq.n	800435e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a1d      	ldr	r2, [pc, #116]	; (800439c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d018      	beq.n	800435e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a1b      	ldr	r2, [pc, #108]	; (80043a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d013      	beq.n	800435e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a1a      	ldr	r2, [pc, #104]	; (80043a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d00e      	beq.n	800435e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a18      	ldr	r2, [pc, #96]	; (80043a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d009      	beq.n	800435e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a17      	ldr	r2, [pc, #92]	; (80043ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d004      	beq.n	800435e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a15      	ldr	r2, [pc, #84]	; (80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d10c      	bne.n	8004378 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004364:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	4313      	orrs	r3, r2
 800436e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3714      	adds	r7, #20
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	40010000 	.word	0x40010000
 800439c:	40000400 	.word	0x40000400
 80043a0:	40000800 	.word	0x40000800
 80043a4:	40000c00 	.word	0x40000c00
 80043a8:	40010400 	.word	0x40010400
 80043ac:	40014000 	.word	0x40014000
 80043b0:	40001800 	.word	0x40001800

080043b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	460b      	mov	r3, r1
 80043e6:	607a      	str	r2, [r7, #4]
 80043e8:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e062      	b.n	80044ba <HAL_MultiProcessor_Init+0xde>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d106      	bne.n	800440e <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f7fd ff71 	bl	80022f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2224      	movs	r2, #36	; 0x24
 8004412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68da      	ldr	r2, [r3, #12]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004424:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f000 f992 	bl	8004750 <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691a      	ldr	r2, [r3, #16]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800443a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695a      	ldr	r2, [r3, #20]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800444a:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691a      	ldr	r2, [r3, #16]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 020f 	bic.w	r2, r2, #15
 800445a:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6919      	ldr	r1, [r3, #16]
 8004462:	7afa      	ldrb	r2, [r7, #11]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800447a:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68d9      	ldr	r1, [r3, #12]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	430a      	orrs	r2, r1
 800448a:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800449a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2220      	movs	r2, #32
 80044a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2220      	movs	r2, #32
 80044ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b08a      	sub	sp, #40	; 0x28
 80044c6:	af02      	add	r7, sp, #8
 80044c8:	60f8      	str	r0, [r7, #12]
 80044ca:	60b9      	str	r1, [r7, #8]
 80044cc:	603b      	str	r3, [r7, #0]
 80044ce:	4613      	mov	r3, r2
 80044d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b20      	cmp	r3, #32
 80044e0:	d175      	bne.n	80045ce <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <HAL_UART_Transmit+0x2c>
 80044e8:	88fb      	ldrh	r3, [r7, #6]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e06e      	b.n	80045d0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2221      	movs	r2, #33	; 0x21
 80044fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004500:	f7fe f804 	bl	800250c <HAL_GetTick>
 8004504:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	88fa      	ldrh	r2, [r7, #6]
 800450a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	88fa      	ldrh	r2, [r7, #6]
 8004510:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800451a:	d108      	bne.n	800452e <HAL_UART_Transmit+0x6c>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d104      	bne.n	800452e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004524:	2300      	movs	r3, #0
 8004526:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	61bb      	str	r3, [r7, #24]
 800452c:	e003      	b.n	8004536 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004532:	2300      	movs	r3, #0
 8004534:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004536:	e02e      	b.n	8004596 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	2200      	movs	r2, #0
 8004540:	2180      	movs	r1, #128	; 0x80
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f848 	bl	80045d8 <UART_WaitOnFlagUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d005      	beq.n	800455a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2220      	movs	r2, #32
 8004552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e03a      	b.n	80045d0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10b      	bne.n	8004578 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	881b      	ldrh	r3, [r3, #0]
 8004564:	461a      	mov	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800456e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	3302      	adds	r3, #2
 8004574:	61bb      	str	r3, [r7, #24]
 8004576:	e007      	b.n	8004588 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	781a      	ldrb	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	3301      	adds	r3, #1
 8004586:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800458c:	b29b      	uxth	r3, r3
 800458e:	3b01      	subs	r3, #1
 8004590:	b29a      	uxth	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800459a:	b29b      	uxth	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1cb      	bne.n	8004538 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	2200      	movs	r2, #0
 80045a8:	2140      	movs	r1, #64	; 0x40
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 f814 	bl	80045d8 <UART_WaitOnFlagUntilTimeout>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d005      	beq.n	80045c2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e006      	b.n	80045d0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80045ca:	2300      	movs	r3, #0
 80045cc:	e000      	b.n	80045d0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80045ce:	2302      	movs	r3, #2
  }
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3720      	adds	r7, #32
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	603b      	str	r3, [r7, #0]
 80045e4:	4613      	mov	r3, r2
 80045e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045e8:	e03b      	b.n	8004662 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f0:	d037      	beq.n	8004662 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f2:	f7fd ff8b 	bl	800250c <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	6a3a      	ldr	r2, [r7, #32]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d302      	bcc.n	8004608 <UART_WaitOnFlagUntilTimeout+0x30>
 8004602:	6a3b      	ldr	r3, [r7, #32]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e03a      	b.n	8004682 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f003 0304 	and.w	r3, r3, #4
 8004616:	2b00      	cmp	r3, #0
 8004618:	d023      	beq.n	8004662 <UART_WaitOnFlagUntilTimeout+0x8a>
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	2b80      	cmp	r3, #128	; 0x80
 800461e:	d020      	beq.n	8004662 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2b40      	cmp	r3, #64	; 0x40
 8004624:	d01d      	beq.n	8004662 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0308 	and.w	r3, r3, #8
 8004630:	2b08      	cmp	r3, #8
 8004632:	d116      	bne.n	8004662 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	617b      	str	r3, [r7, #20]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	617b      	str	r3, [r7, #20]
 8004648:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 f81d 	bl	800468a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2208      	movs	r2, #8
 8004654:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e00f      	b.n	8004682 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	4013      	ands	r3, r2
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	429a      	cmp	r2, r3
 8004670:	bf0c      	ite	eq
 8004672:	2301      	moveq	r3, #1
 8004674:	2300      	movne	r3, #0
 8004676:	b2db      	uxtb	r3, r3
 8004678:	461a      	mov	r2, r3
 800467a:	79fb      	ldrb	r3, [r7, #7]
 800467c:	429a      	cmp	r2, r3
 800467e:	d0b4      	beq.n	80045ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3718      	adds	r7, #24
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800468a:	b480      	push	{r7}
 800468c:	b095      	sub	sp, #84	; 0x54
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	330c      	adds	r3, #12
 8004698:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800469c:	e853 3f00 	ldrex	r3, [r3]
 80046a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80046a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	330c      	adds	r3, #12
 80046b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046b2:	643a      	str	r2, [r7, #64]	; 0x40
 80046b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046ba:	e841 2300 	strex	r3, r2, [r1]
 80046be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1e5      	bne.n	8004692 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	3314      	adds	r3, #20
 80046cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ce:	6a3b      	ldr	r3, [r7, #32]
 80046d0:	e853 3f00 	ldrex	r3, [r3]
 80046d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	f023 0301 	bic.w	r3, r3, #1
 80046dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3314      	adds	r3, #20
 80046e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046ee:	e841 2300 	strex	r3, r2, [r1]
 80046f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1e5      	bne.n	80046c6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d119      	bne.n	8004736 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	330c      	adds	r3, #12
 8004708:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	e853 3f00 	ldrex	r3, [r3]
 8004710:	60bb      	str	r3, [r7, #8]
   return(result);
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f023 0310 	bic.w	r3, r3, #16
 8004718:	647b      	str	r3, [r7, #68]	; 0x44
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	330c      	adds	r3, #12
 8004720:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004722:	61ba      	str	r2, [r7, #24]
 8004724:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004726:	6979      	ldr	r1, [r7, #20]
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	e841 2300 	strex	r3, r2, [r1]
 800472e:	613b      	str	r3, [r7, #16]
   return(result);
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1e5      	bne.n	8004702 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2220      	movs	r2, #32
 800473a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004744:	bf00      	nop
 8004746:	3754      	adds	r7, #84	; 0x54
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004754:	b0c0      	sub	sp, #256	; 0x100
 8004756:	af00      	add	r7, sp, #0
 8004758:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800475c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800476c:	68d9      	ldr	r1, [r3, #12]
 800476e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	ea40 0301 	orr.w	r3, r0, r1
 8004778:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800477a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	431a      	orrs	r2, r3
 8004788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	431a      	orrs	r2, r3
 8004790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	4313      	orrs	r3, r2
 8004798:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800479c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80047a8:	f021 010c 	bic.w	r1, r1, #12
 80047ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047b6:	430b      	orrs	r3, r1
 80047b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80047c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ca:	6999      	ldr	r1, [r3, #24]
 80047cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	ea40 0301 	orr.w	r3, r0, r1
 80047d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	4b8f      	ldr	r3, [pc, #572]	; (8004a1c <UART_SetConfig+0x2cc>)
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d005      	beq.n	80047f0 <UART_SetConfig+0xa0>
 80047e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	4b8d      	ldr	r3, [pc, #564]	; (8004a20 <UART_SetConfig+0x2d0>)
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d104      	bne.n	80047fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047f0:	f7ff f9c2 	bl	8003b78 <HAL_RCC_GetPCLK2Freq>
 80047f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80047f8:	e003      	b.n	8004802 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047fa:	f7ff f9a9 	bl	8003b50 <HAL_RCC_GetPCLK1Freq>
 80047fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800480c:	f040 810c 	bne.w	8004a28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004810:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004814:	2200      	movs	r2, #0
 8004816:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800481a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800481e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004822:	4622      	mov	r2, r4
 8004824:	462b      	mov	r3, r5
 8004826:	1891      	adds	r1, r2, r2
 8004828:	65b9      	str	r1, [r7, #88]	; 0x58
 800482a:	415b      	adcs	r3, r3
 800482c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800482e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004832:	4621      	mov	r1, r4
 8004834:	eb12 0801 	adds.w	r8, r2, r1
 8004838:	4629      	mov	r1, r5
 800483a:	eb43 0901 	adc.w	r9, r3, r1
 800483e:	f04f 0200 	mov.w	r2, #0
 8004842:	f04f 0300 	mov.w	r3, #0
 8004846:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800484a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800484e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004852:	4690      	mov	r8, r2
 8004854:	4699      	mov	r9, r3
 8004856:	4623      	mov	r3, r4
 8004858:	eb18 0303 	adds.w	r3, r8, r3
 800485c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004860:	462b      	mov	r3, r5
 8004862:	eb49 0303 	adc.w	r3, r9, r3
 8004866:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800486a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004876:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800487a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800487e:	460b      	mov	r3, r1
 8004880:	18db      	adds	r3, r3, r3
 8004882:	653b      	str	r3, [r7, #80]	; 0x50
 8004884:	4613      	mov	r3, r2
 8004886:	eb42 0303 	adc.w	r3, r2, r3
 800488a:	657b      	str	r3, [r7, #84]	; 0x54
 800488c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004890:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004894:	f7fc f9f8 	bl	8000c88 <__aeabi_uldivmod>
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	4b61      	ldr	r3, [pc, #388]	; (8004a24 <UART_SetConfig+0x2d4>)
 800489e:	fba3 2302 	umull	r2, r3, r3, r2
 80048a2:	095b      	lsrs	r3, r3, #5
 80048a4:	011c      	lsls	r4, r3, #4
 80048a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048aa:	2200      	movs	r2, #0
 80048ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80048b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80048b8:	4642      	mov	r2, r8
 80048ba:	464b      	mov	r3, r9
 80048bc:	1891      	adds	r1, r2, r2
 80048be:	64b9      	str	r1, [r7, #72]	; 0x48
 80048c0:	415b      	adcs	r3, r3
 80048c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048c8:	4641      	mov	r1, r8
 80048ca:	eb12 0a01 	adds.w	sl, r2, r1
 80048ce:	4649      	mov	r1, r9
 80048d0:	eb43 0b01 	adc.w	fp, r3, r1
 80048d4:	f04f 0200 	mov.w	r2, #0
 80048d8:	f04f 0300 	mov.w	r3, #0
 80048dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048e8:	4692      	mov	sl, r2
 80048ea:	469b      	mov	fp, r3
 80048ec:	4643      	mov	r3, r8
 80048ee:	eb1a 0303 	adds.w	r3, sl, r3
 80048f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048f6:	464b      	mov	r3, r9
 80048f8:	eb4b 0303 	adc.w	r3, fp, r3
 80048fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800490c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004910:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004914:	460b      	mov	r3, r1
 8004916:	18db      	adds	r3, r3, r3
 8004918:	643b      	str	r3, [r7, #64]	; 0x40
 800491a:	4613      	mov	r3, r2
 800491c:	eb42 0303 	adc.w	r3, r2, r3
 8004920:	647b      	str	r3, [r7, #68]	; 0x44
 8004922:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004926:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800492a:	f7fc f9ad 	bl	8000c88 <__aeabi_uldivmod>
 800492e:	4602      	mov	r2, r0
 8004930:	460b      	mov	r3, r1
 8004932:	4611      	mov	r1, r2
 8004934:	4b3b      	ldr	r3, [pc, #236]	; (8004a24 <UART_SetConfig+0x2d4>)
 8004936:	fba3 2301 	umull	r2, r3, r3, r1
 800493a:	095b      	lsrs	r3, r3, #5
 800493c:	2264      	movs	r2, #100	; 0x64
 800493e:	fb02 f303 	mul.w	r3, r2, r3
 8004942:	1acb      	subs	r3, r1, r3
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800494a:	4b36      	ldr	r3, [pc, #216]	; (8004a24 <UART_SetConfig+0x2d4>)
 800494c:	fba3 2302 	umull	r2, r3, r3, r2
 8004950:	095b      	lsrs	r3, r3, #5
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004958:	441c      	add	r4, r3
 800495a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800495e:	2200      	movs	r2, #0
 8004960:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004964:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004968:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800496c:	4642      	mov	r2, r8
 800496e:	464b      	mov	r3, r9
 8004970:	1891      	adds	r1, r2, r2
 8004972:	63b9      	str	r1, [r7, #56]	; 0x38
 8004974:	415b      	adcs	r3, r3
 8004976:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004978:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800497c:	4641      	mov	r1, r8
 800497e:	1851      	adds	r1, r2, r1
 8004980:	6339      	str	r1, [r7, #48]	; 0x30
 8004982:	4649      	mov	r1, r9
 8004984:	414b      	adcs	r3, r1
 8004986:	637b      	str	r3, [r7, #52]	; 0x34
 8004988:	f04f 0200 	mov.w	r2, #0
 800498c:	f04f 0300 	mov.w	r3, #0
 8004990:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004994:	4659      	mov	r1, fp
 8004996:	00cb      	lsls	r3, r1, #3
 8004998:	4651      	mov	r1, sl
 800499a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800499e:	4651      	mov	r1, sl
 80049a0:	00ca      	lsls	r2, r1, #3
 80049a2:	4610      	mov	r0, r2
 80049a4:	4619      	mov	r1, r3
 80049a6:	4603      	mov	r3, r0
 80049a8:	4642      	mov	r2, r8
 80049aa:	189b      	adds	r3, r3, r2
 80049ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049b0:	464b      	mov	r3, r9
 80049b2:	460a      	mov	r2, r1
 80049b4:	eb42 0303 	adc.w	r3, r2, r3
 80049b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80049c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80049cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80049d0:	460b      	mov	r3, r1
 80049d2:	18db      	adds	r3, r3, r3
 80049d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80049d6:	4613      	mov	r3, r2
 80049d8:	eb42 0303 	adc.w	r3, r2, r3
 80049dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80049e6:	f7fc f94f 	bl	8000c88 <__aeabi_uldivmod>
 80049ea:	4602      	mov	r2, r0
 80049ec:	460b      	mov	r3, r1
 80049ee:	4b0d      	ldr	r3, [pc, #52]	; (8004a24 <UART_SetConfig+0x2d4>)
 80049f0:	fba3 1302 	umull	r1, r3, r3, r2
 80049f4:	095b      	lsrs	r3, r3, #5
 80049f6:	2164      	movs	r1, #100	; 0x64
 80049f8:	fb01 f303 	mul.w	r3, r1, r3
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	3332      	adds	r3, #50	; 0x32
 8004a02:	4a08      	ldr	r2, [pc, #32]	; (8004a24 <UART_SetConfig+0x2d4>)
 8004a04:	fba2 2303 	umull	r2, r3, r2, r3
 8004a08:	095b      	lsrs	r3, r3, #5
 8004a0a:	f003 0207 	and.w	r2, r3, #7
 8004a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4422      	add	r2, r4
 8004a16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a18:	e106      	b.n	8004c28 <UART_SetConfig+0x4d8>
 8004a1a:	bf00      	nop
 8004a1c:	40011000 	.word	0x40011000
 8004a20:	40011400 	.word	0x40011400
 8004a24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a3a:	4642      	mov	r2, r8
 8004a3c:	464b      	mov	r3, r9
 8004a3e:	1891      	adds	r1, r2, r2
 8004a40:	6239      	str	r1, [r7, #32]
 8004a42:	415b      	adcs	r3, r3
 8004a44:	627b      	str	r3, [r7, #36]	; 0x24
 8004a46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a4a:	4641      	mov	r1, r8
 8004a4c:	1854      	adds	r4, r2, r1
 8004a4e:	4649      	mov	r1, r9
 8004a50:	eb43 0501 	adc.w	r5, r3, r1
 8004a54:	f04f 0200 	mov.w	r2, #0
 8004a58:	f04f 0300 	mov.w	r3, #0
 8004a5c:	00eb      	lsls	r3, r5, #3
 8004a5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a62:	00e2      	lsls	r2, r4, #3
 8004a64:	4614      	mov	r4, r2
 8004a66:	461d      	mov	r5, r3
 8004a68:	4643      	mov	r3, r8
 8004a6a:	18e3      	adds	r3, r4, r3
 8004a6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a70:	464b      	mov	r3, r9
 8004a72:	eb45 0303 	adc.w	r3, r5, r3
 8004a76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a8a:	f04f 0200 	mov.w	r2, #0
 8004a8e:	f04f 0300 	mov.w	r3, #0
 8004a92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a96:	4629      	mov	r1, r5
 8004a98:	008b      	lsls	r3, r1, #2
 8004a9a:	4621      	mov	r1, r4
 8004a9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	008a      	lsls	r2, r1, #2
 8004aa4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004aa8:	f7fc f8ee 	bl	8000c88 <__aeabi_uldivmod>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4b60      	ldr	r3, [pc, #384]	; (8004c34 <UART_SetConfig+0x4e4>)
 8004ab2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ab6:	095b      	lsrs	r3, r3, #5
 8004ab8:	011c      	lsls	r4, r3, #4
 8004aba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ac4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ac8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004acc:	4642      	mov	r2, r8
 8004ace:	464b      	mov	r3, r9
 8004ad0:	1891      	adds	r1, r2, r2
 8004ad2:	61b9      	str	r1, [r7, #24]
 8004ad4:	415b      	adcs	r3, r3
 8004ad6:	61fb      	str	r3, [r7, #28]
 8004ad8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004adc:	4641      	mov	r1, r8
 8004ade:	1851      	adds	r1, r2, r1
 8004ae0:	6139      	str	r1, [r7, #16]
 8004ae2:	4649      	mov	r1, r9
 8004ae4:	414b      	adcs	r3, r1
 8004ae6:	617b      	str	r3, [r7, #20]
 8004ae8:	f04f 0200 	mov.w	r2, #0
 8004aec:	f04f 0300 	mov.w	r3, #0
 8004af0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004af4:	4659      	mov	r1, fp
 8004af6:	00cb      	lsls	r3, r1, #3
 8004af8:	4651      	mov	r1, sl
 8004afa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004afe:	4651      	mov	r1, sl
 8004b00:	00ca      	lsls	r2, r1, #3
 8004b02:	4610      	mov	r0, r2
 8004b04:	4619      	mov	r1, r3
 8004b06:	4603      	mov	r3, r0
 8004b08:	4642      	mov	r2, r8
 8004b0a:	189b      	adds	r3, r3, r2
 8004b0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b10:	464b      	mov	r3, r9
 8004b12:	460a      	mov	r2, r1
 8004b14:	eb42 0303 	adc.w	r3, r2, r3
 8004b18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b26:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	f04f 0300 	mov.w	r3, #0
 8004b30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b34:	4649      	mov	r1, r9
 8004b36:	008b      	lsls	r3, r1, #2
 8004b38:	4641      	mov	r1, r8
 8004b3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b3e:	4641      	mov	r1, r8
 8004b40:	008a      	lsls	r2, r1, #2
 8004b42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b46:	f7fc f89f 	bl	8000c88 <__aeabi_uldivmod>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	4611      	mov	r1, r2
 8004b50:	4b38      	ldr	r3, [pc, #224]	; (8004c34 <UART_SetConfig+0x4e4>)
 8004b52:	fba3 2301 	umull	r2, r3, r3, r1
 8004b56:	095b      	lsrs	r3, r3, #5
 8004b58:	2264      	movs	r2, #100	; 0x64
 8004b5a:	fb02 f303 	mul.w	r3, r2, r3
 8004b5e:	1acb      	subs	r3, r1, r3
 8004b60:	011b      	lsls	r3, r3, #4
 8004b62:	3332      	adds	r3, #50	; 0x32
 8004b64:	4a33      	ldr	r2, [pc, #204]	; (8004c34 <UART_SetConfig+0x4e4>)
 8004b66:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6a:	095b      	lsrs	r3, r3, #5
 8004b6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b70:	441c      	add	r4, r3
 8004b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b76:	2200      	movs	r2, #0
 8004b78:	673b      	str	r3, [r7, #112]	; 0x70
 8004b7a:	677a      	str	r2, [r7, #116]	; 0x74
 8004b7c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b80:	4642      	mov	r2, r8
 8004b82:	464b      	mov	r3, r9
 8004b84:	1891      	adds	r1, r2, r2
 8004b86:	60b9      	str	r1, [r7, #8]
 8004b88:	415b      	adcs	r3, r3
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b90:	4641      	mov	r1, r8
 8004b92:	1851      	adds	r1, r2, r1
 8004b94:	6039      	str	r1, [r7, #0]
 8004b96:	4649      	mov	r1, r9
 8004b98:	414b      	adcs	r3, r1
 8004b9a:	607b      	str	r3, [r7, #4]
 8004b9c:	f04f 0200 	mov.w	r2, #0
 8004ba0:	f04f 0300 	mov.w	r3, #0
 8004ba4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ba8:	4659      	mov	r1, fp
 8004baa:	00cb      	lsls	r3, r1, #3
 8004bac:	4651      	mov	r1, sl
 8004bae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bb2:	4651      	mov	r1, sl
 8004bb4:	00ca      	lsls	r2, r1, #3
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4603      	mov	r3, r0
 8004bbc:	4642      	mov	r2, r8
 8004bbe:	189b      	adds	r3, r3, r2
 8004bc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bc2:	464b      	mov	r3, r9
 8004bc4:	460a      	mov	r2, r1
 8004bc6:	eb42 0303 	adc.w	r3, r2, r3
 8004bca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	663b      	str	r3, [r7, #96]	; 0x60
 8004bd6:	667a      	str	r2, [r7, #100]	; 0x64
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004be4:	4649      	mov	r1, r9
 8004be6:	008b      	lsls	r3, r1, #2
 8004be8:	4641      	mov	r1, r8
 8004bea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bee:	4641      	mov	r1, r8
 8004bf0:	008a      	lsls	r2, r1, #2
 8004bf2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004bf6:	f7fc f847 	bl	8000c88 <__aeabi_uldivmod>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4b0d      	ldr	r3, [pc, #52]	; (8004c34 <UART_SetConfig+0x4e4>)
 8004c00:	fba3 1302 	umull	r1, r3, r3, r2
 8004c04:	095b      	lsrs	r3, r3, #5
 8004c06:	2164      	movs	r1, #100	; 0x64
 8004c08:	fb01 f303 	mul.w	r3, r1, r3
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	011b      	lsls	r3, r3, #4
 8004c10:	3332      	adds	r3, #50	; 0x32
 8004c12:	4a08      	ldr	r2, [pc, #32]	; (8004c34 <UART_SetConfig+0x4e4>)
 8004c14:	fba2 2303 	umull	r2, r3, r2, r3
 8004c18:	095b      	lsrs	r3, r3, #5
 8004c1a:	f003 020f 	and.w	r2, r3, #15
 8004c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4422      	add	r2, r4
 8004c26:	609a      	str	r2, [r3, #8]
}
 8004c28:	bf00      	nop
 8004c2a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c34:	51eb851f 	.word	0x51eb851f

08004c38 <__cvt>:
 8004c38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c3c:	ec55 4b10 	vmov	r4, r5, d0
 8004c40:	2d00      	cmp	r5, #0
 8004c42:	460e      	mov	r6, r1
 8004c44:	4619      	mov	r1, r3
 8004c46:	462b      	mov	r3, r5
 8004c48:	bfbb      	ittet	lt
 8004c4a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004c4e:	461d      	movlt	r5, r3
 8004c50:	2300      	movge	r3, #0
 8004c52:	232d      	movlt	r3, #45	; 0x2d
 8004c54:	700b      	strb	r3, [r1, #0]
 8004c56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c58:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004c5c:	4691      	mov	r9, r2
 8004c5e:	f023 0820 	bic.w	r8, r3, #32
 8004c62:	bfbc      	itt	lt
 8004c64:	4622      	movlt	r2, r4
 8004c66:	4614      	movlt	r4, r2
 8004c68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c6c:	d005      	beq.n	8004c7a <__cvt+0x42>
 8004c6e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004c72:	d100      	bne.n	8004c76 <__cvt+0x3e>
 8004c74:	3601      	adds	r6, #1
 8004c76:	2102      	movs	r1, #2
 8004c78:	e000      	b.n	8004c7c <__cvt+0x44>
 8004c7a:	2103      	movs	r1, #3
 8004c7c:	ab03      	add	r3, sp, #12
 8004c7e:	9301      	str	r3, [sp, #4]
 8004c80:	ab02      	add	r3, sp, #8
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	ec45 4b10 	vmov	d0, r4, r5
 8004c88:	4653      	mov	r3, sl
 8004c8a:	4632      	mov	r2, r6
 8004c8c:	f001 f880 	bl	8005d90 <_dtoa_r>
 8004c90:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004c94:	4607      	mov	r7, r0
 8004c96:	d102      	bne.n	8004c9e <__cvt+0x66>
 8004c98:	f019 0f01 	tst.w	r9, #1
 8004c9c:	d022      	beq.n	8004ce4 <__cvt+0xac>
 8004c9e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ca2:	eb07 0906 	add.w	r9, r7, r6
 8004ca6:	d110      	bne.n	8004cca <__cvt+0x92>
 8004ca8:	783b      	ldrb	r3, [r7, #0]
 8004caa:	2b30      	cmp	r3, #48	; 0x30
 8004cac:	d10a      	bne.n	8004cc4 <__cvt+0x8c>
 8004cae:	2200      	movs	r2, #0
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	4620      	mov	r0, r4
 8004cb4:	4629      	mov	r1, r5
 8004cb6:	f7fb ff07 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cba:	b918      	cbnz	r0, 8004cc4 <__cvt+0x8c>
 8004cbc:	f1c6 0601 	rsb	r6, r6, #1
 8004cc0:	f8ca 6000 	str.w	r6, [sl]
 8004cc4:	f8da 3000 	ldr.w	r3, [sl]
 8004cc8:	4499      	add	r9, r3
 8004cca:	2200      	movs	r2, #0
 8004ccc:	2300      	movs	r3, #0
 8004cce:	4620      	mov	r0, r4
 8004cd0:	4629      	mov	r1, r5
 8004cd2:	f7fb fef9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cd6:	b108      	cbz	r0, 8004cdc <__cvt+0xa4>
 8004cd8:	f8cd 900c 	str.w	r9, [sp, #12]
 8004cdc:	2230      	movs	r2, #48	; 0x30
 8004cde:	9b03      	ldr	r3, [sp, #12]
 8004ce0:	454b      	cmp	r3, r9
 8004ce2:	d307      	bcc.n	8004cf4 <__cvt+0xbc>
 8004ce4:	9b03      	ldr	r3, [sp, #12]
 8004ce6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ce8:	1bdb      	subs	r3, r3, r7
 8004cea:	4638      	mov	r0, r7
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	b004      	add	sp, #16
 8004cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cf4:	1c59      	adds	r1, r3, #1
 8004cf6:	9103      	str	r1, [sp, #12]
 8004cf8:	701a      	strb	r2, [r3, #0]
 8004cfa:	e7f0      	b.n	8004cde <__cvt+0xa6>

08004cfc <__exponent>:
 8004cfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2900      	cmp	r1, #0
 8004d02:	bfb8      	it	lt
 8004d04:	4249      	neglt	r1, r1
 8004d06:	f803 2b02 	strb.w	r2, [r3], #2
 8004d0a:	bfb4      	ite	lt
 8004d0c:	222d      	movlt	r2, #45	; 0x2d
 8004d0e:	222b      	movge	r2, #43	; 0x2b
 8004d10:	2909      	cmp	r1, #9
 8004d12:	7042      	strb	r2, [r0, #1]
 8004d14:	dd2a      	ble.n	8004d6c <__exponent+0x70>
 8004d16:	f10d 0207 	add.w	r2, sp, #7
 8004d1a:	4617      	mov	r7, r2
 8004d1c:	260a      	movs	r6, #10
 8004d1e:	4694      	mov	ip, r2
 8004d20:	fb91 f5f6 	sdiv	r5, r1, r6
 8004d24:	fb06 1415 	mls	r4, r6, r5, r1
 8004d28:	3430      	adds	r4, #48	; 0x30
 8004d2a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004d2e:	460c      	mov	r4, r1
 8004d30:	2c63      	cmp	r4, #99	; 0x63
 8004d32:	f102 32ff 	add.w	r2, r2, #4294967295
 8004d36:	4629      	mov	r1, r5
 8004d38:	dcf1      	bgt.n	8004d1e <__exponent+0x22>
 8004d3a:	3130      	adds	r1, #48	; 0x30
 8004d3c:	f1ac 0402 	sub.w	r4, ip, #2
 8004d40:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004d44:	1c41      	adds	r1, r0, #1
 8004d46:	4622      	mov	r2, r4
 8004d48:	42ba      	cmp	r2, r7
 8004d4a:	d30a      	bcc.n	8004d62 <__exponent+0x66>
 8004d4c:	f10d 0209 	add.w	r2, sp, #9
 8004d50:	eba2 020c 	sub.w	r2, r2, ip
 8004d54:	42bc      	cmp	r4, r7
 8004d56:	bf88      	it	hi
 8004d58:	2200      	movhi	r2, #0
 8004d5a:	4413      	add	r3, r2
 8004d5c:	1a18      	subs	r0, r3, r0
 8004d5e:	b003      	add	sp, #12
 8004d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d62:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004d66:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004d6a:	e7ed      	b.n	8004d48 <__exponent+0x4c>
 8004d6c:	2330      	movs	r3, #48	; 0x30
 8004d6e:	3130      	adds	r1, #48	; 0x30
 8004d70:	7083      	strb	r3, [r0, #2]
 8004d72:	70c1      	strb	r1, [r0, #3]
 8004d74:	1d03      	adds	r3, r0, #4
 8004d76:	e7f1      	b.n	8004d5c <__exponent+0x60>

08004d78 <_printf_float>:
 8004d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d7c:	ed2d 8b02 	vpush	{d8}
 8004d80:	b08d      	sub	sp, #52	; 0x34
 8004d82:	460c      	mov	r4, r1
 8004d84:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004d88:	4616      	mov	r6, r2
 8004d8a:	461f      	mov	r7, r3
 8004d8c:	4605      	mov	r5, r0
 8004d8e:	f000 fef7 	bl	8005b80 <_localeconv_r>
 8004d92:	f8d0 a000 	ldr.w	sl, [r0]
 8004d96:	4650      	mov	r0, sl
 8004d98:	f7fb fa6a 	bl	8000270 <strlen>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	930a      	str	r3, [sp, #40]	; 0x28
 8004da0:	6823      	ldr	r3, [r4, #0]
 8004da2:	9305      	str	r3, [sp, #20]
 8004da4:	f8d8 3000 	ldr.w	r3, [r8]
 8004da8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004dac:	3307      	adds	r3, #7
 8004dae:	f023 0307 	bic.w	r3, r3, #7
 8004db2:	f103 0208 	add.w	r2, r3, #8
 8004db6:	f8c8 2000 	str.w	r2, [r8]
 8004dba:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004dbe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004dc2:	9307      	str	r3, [sp, #28]
 8004dc4:	f8cd 8018 	str.w	r8, [sp, #24]
 8004dc8:	ee08 0a10 	vmov	s16, r0
 8004dcc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004dd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004dd4:	4b9e      	ldr	r3, [pc, #632]	; (8005050 <_printf_float+0x2d8>)
 8004dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8004dda:	f7fb fea7 	bl	8000b2c <__aeabi_dcmpun>
 8004dde:	bb88      	cbnz	r0, 8004e44 <_printf_float+0xcc>
 8004de0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004de4:	4b9a      	ldr	r3, [pc, #616]	; (8005050 <_printf_float+0x2d8>)
 8004de6:	f04f 32ff 	mov.w	r2, #4294967295
 8004dea:	f7fb fe81 	bl	8000af0 <__aeabi_dcmple>
 8004dee:	bb48      	cbnz	r0, 8004e44 <_printf_float+0xcc>
 8004df0:	2200      	movs	r2, #0
 8004df2:	2300      	movs	r3, #0
 8004df4:	4640      	mov	r0, r8
 8004df6:	4649      	mov	r1, r9
 8004df8:	f7fb fe70 	bl	8000adc <__aeabi_dcmplt>
 8004dfc:	b110      	cbz	r0, 8004e04 <_printf_float+0x8c>
 8004dfe:	232d      	movs	r3, #45	; 0x2d
 8004e00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e04:	4a93      	ldr	r2, [pc, #588]	; (8005054 <_printf_float+0x2dc>)
 8004e06:	4b94      	ldr	r3, [pc, #592]	; (8005058 <_printf_float+0x2e0>)
 8004e08:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004e0c:	bf94      	ite	ls
 8004e0e:	4690      	movls	r8, r2
 8004e10:	4698      	movhi	r8, r3
 8004e12:	2303      	movs	r3, #3
 8004e14:	6123      	str	r3, [r4, #16]
 8004e16:	9b05      	ldr	r3, [sp, #20]
 8004e18:	f023 0304 	bic.w	r3, r3, #4
 8004e1c:	6023      	str	r3, [r4, #0]
 8004e1e:	f04f 0900 	mov.w	r9, #0
 8004e22:	9700      	str	r7, [sp, #0]
 8004e24:	4633      	mov	r3, r6
 8004e26:	aa0b      	add	r2, sp, #44	; 0x2c
 8004e28:	4621      	mov	r1, r4
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	f000 f9da 	bl	80051e4 <_printf_common>
 8004e30:	3001      	adds	r0, #1
 8004e32:	f040 8090 	bne.w	8004f56 <_printf_float+0x1de>
 8004e36:	f04f 30ff 	mov.w	r0, #4294967295
 8004e3a:	b00d      	add	sp, #52	; 0x34
 8004e3c:	ecbd 8b02 	vpop	{d8}
 8004e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e44:	4642      	mov	r2, r8
 8004e46:	464b      	mov	r3, r9
 8004e48:	4640      	mov	r0, r8
 8004e4a:	4649      	mov	r1, r9
 8004e4c:	f7fb fe6e 	bl	8000b2c <__aeabi_dcmpun>
 8004e50:	b140      	cbz	r0, 8004e64 <_printf_float+0xec>
 8004e52:	464b      	mov	r3, r9
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	bfbc      	itt	lt
 8004e58:	232d      	movlt	r3, #45	; 0x2d
 8004e5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004e5e:	4a7f      	ldr	r2, [pc, #508]	; (800505c <_printf_float+0x2e4>)
 8004e60:	4b7f      	ldr	r3, [pc, #508]	; (8005060 <_printf_float+0x2e8>)
 8004e62:	e7d1      	b.n	8004e08 <_printf_float+0x90>
 8004e64:	6863      	ldr	r3, [r4, #4]
 8004e66:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004e6a:	9206      	str	r2, [sp, #24]
 8004e6c:	1c5a      	adds	r2, r3, #1
 8004e6e:	d13f      	bne.n	8004ef0 <_printf_float+0x178>
 8004e70:	2306      	movs	r3, #6
 8004e72:	6063      	str	r3, [r4, #4]
 8004e74:	9b05      	ldr	r3, [sp, #20]
 8004e76:	6861      	ldr	r1, [r4, #4]
 8004e78:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	9303      	str	r3, [sp, #12]
 8004e80:	ab0a      	add	r3, sp, #40	; 0x28
 8004e82:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004e86:	ab09      	add	r3, sp, #36	; 0x24
 8004e88:	ec49 8b10 	vmov	d0, r8, r9
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	6022      	str	r2, [r4, #0]
 8004e90:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004e94:	4628      	mov	r0, r5
 8004e96:	f7ff fecf 	bl	8004c38 <__cvt>
 8004e9a:	9b06      	ldr	r3, [sp, #24]
 8004e9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e9e:	2b47      	cmp	r3, #71	; 0x47
 8004ea0:	4680      	mov	r8, r0
 8004ea2:	d108      	bne.n	8004eb6 <_printf_float+0x13e>
 8004ea4:	1cc8      	adds	r0, r1, #3
 8004ea6:	db02      	blt.n	8004eae <_printf_float+0x136>
 8004ea8:	6863      	ldr	r3, [r4, #4]
 8004eaa:	4299      	cmp	r1, r3
 8004eac:	dd41      	ble.n	8004f32 <_printf_float+0x1ba>
 8004eae:	f1ab 0302 	sub.w	r3, fp, #2
 8004eb2:	fa5f fb83 	uxtb.w	fp, r3
 8004eb6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004eba:	d820      	bhi.n	8004efe <_printf_float+0x186>
 8004ebc:	3901      	subs	r1, #1
 8004ebe:	465a      	mov	r2, fp
 8004ec0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004ec4:	9109      	str	r1, [sp, #36]	; 0x24
 8004ec6:	f7ff ff19 	bl	8004cfc <__exponent>
 8004eca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ecc:	1813      	adds	r3, r2, r0
 8004ece:	2a01      	cmp	r2, #1
 8004ed0:	4681      	mov	r9, r0
 8004ed2:	6123      	str	r3, [r4, #16]
 8004ed4:	dc02      	bgt.n	8004edc <_printf_float+0x164>
 8004ed6:	6822      	ldr	r2, [r4, #0]
 8004ed8:	07d2      	lsls	r2, r2, #31
 8004eda:	d501      	bpl.n	8004ee0 <_printf_float+0x168>
 8004edc:	3301      	adds	r3, #1
 8004ede:	6123      	str	r3, [r4, #16]
 8004ee0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d09c      	beq.n	8004e22 <_printf_float+0xaa>
 8004ee8:	232d      	movs	r3, #45	; 0x2d
 8004eea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eee:	e798      	b.n	8004e22 <_printf_float+0xaa>
 8004ef0:	9a06      	ldr	r2, [sp, #24]
 8004ef2:	2a47      	cmp	r2, #71	; 0x47
 8004ef4:	d1be      	bne.n	8004e74 <_printf_float+0xfc>
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1bc      	bne.n	8004e74 <_printf_float+0xfc>
 8004efa:	2301      	movs	r3, #1
 8004efc:	e7b9      	b.n	8004e72 <_printf_float+0xfa>
 8004efe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004f02:	d118      	bne.n	8004f36 <_printf_float+0x1be>
 8004f04:	2900      	cmp	r1, #0
 8004f06:	6863      	ldr	r3, [r4, #4]
 8004f08:	dd0b      	ble.n	8004f22 <_printf_float+0x1aa>
 8004f0a:	6121      	str	r1, [r4, #16]
 8004f0c:	b913      	cbnz	r3, 8004f14 <_printf_float+0x19c>
 8004f0e:	6822      	ldr	r2, [r4, #0]
 8004f10:	07d0      	lsls	r0, r2, #31
 8004f12:	d502      	bpl.n	8004f1a <_printf_float+0x1a2>
 8004f14:	3301      	adds	r3, #1
 8004f16:	440b      	add	r3, r1
 8004f18:	6123      	str	r3, [r4, #16]
 8004f1a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004f1c:	f04f 0900 	mov.w	r9, #0
 8004f20:	e7de      	b.n	8004ee0 <_printf_float+0x168>
 8004f22:	b913      	cbnz	r3, 8004f2a <_printf_float+0x1b2>
 8004f24:	6822      	ldr	r2, [r4, #0]
 8004f26:	07d2      	lsls	r2, r2, #31
 8004f28:	d501      	bpl.n	8004f2e <_printf_float+0x1b6>
 8004f2a:	3302      	adds	r3, #2
 8004f2c:	e7f4      	b.n	8004f18 <_printf_float+0x1a0>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e7f2      	b.n	8004f18 <_printf_float+0x1a0>
 8004f32:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f38:	4299      	cmp	r1, r3
 8004f3a:	db05      	blt.n	8004f48 <_printf_float+0x1d0>
 8004f3c:	6823      	ldr	r3, [r4, #0]
 8004f3e:	6121      	str	r1, [r4, #16]
 8004f40:	07d8      	lsls	r0, r3, #31
 8004f42:	d5ea      	bpl.n	8004f1a <_printf_float+0x1a2>
 8004f44:	1c4b      	adds	r3, r1, #1
 8004f46:	e7e7      	b.n	8004f18 <_printf_float+0x1a0>
 8004f48:	2900      	cmp	r1, #0
 8004f4a:	bfd4      	ite	le
 8004f4c:	f1c1 0202 	rsble	r2, r1, #2
 8004f50:	2201      	movgt	r2, #1
 8004f52:	4413      	add	r3, r2
 8004f54:	e7e0      	b.n	8004f18 <_printf_float+0x1a0>
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	055a      	lsls	r2, r3, #21
 8004f5a:	d407      	bmi.n	8004f6c <_printf_float+0x1f4>
 8004f5c:	6923      	ldr	r3, [r4, #16]
 8004f5e:	4642      	mov	r2, r8
 8004f60:	4631      	mov	r1, r6
 8004f62:	4628      	mov	r0, r5
 8004f64:	47b8      	blx	r7
 8004f66:	3001      	adds	r0, #1
 8004f68:	d12c      	bne.n	8004fc4 <_printf_float+0x24c>
 8004f6a:	e764      	b.n	8004e36 <_printf_float+0xbe>
 8004f6c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004f70:	f240 80e0 	bls.w	8005134 <_printf_float+0x3bc>
 8004f74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f78:	2200      	movs	r2, #0
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	f7fb fda4 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f80:	2800      	cmp	r0, #0
 8004f82:	d034      	beq.n	8004fee <_printf_float+0x276>
 8004f84:	4a37      	ldr	r2, [pc, #220]	; (8005064 <_printf_float+0x2ec>)
 8004f86:	2301      	movs	r3, #1
 8004f88:	4631      	mov	r1, r6
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	47b8      	blx	r7
 8004f8e:	3001      	adds	r0, #1
 8004f90:	f43f af51 	beq.w	8004e36 <_printf_float+0xbe>
 8004f94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	db02      	blt.n	8004fa2 <_printf_float+0x22a>
 8004f9c:	6823      	ldr	r3, [r4, #0]
 8004f9e:	07d8      	lsls	r0, r3, #31
 8004fa0:	d510      	bpl.n	8004fc4 <_printf_float+0x24c>
 8004fa2:	ee18 3a10 	vmov	r3, s16
 8004fa6:	4652      	mov	r2, sl
 8004fa8:	4631      	mov	r1, r6
 8004faa:	4628      	mov	r0, r5
 8004fac:	47b8      	blx	r7
 8004fae:	3001      	adds	r0, #1
 8004fb0:	f43f af41 	beq.w	8004e36 <_printf_float+0xbe>
 8004fb4:	f04f 0800 	mov.w	r8, #0
 8004fb8:	f104 091a 	add.w	r9, r4, #26
 8004fbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	4543      	cmp	r3, r8
 8004fc2:	dc09      	bgt.n	8004fd8 <_printf_float+0x260>
 8004fc4:	6823      	ldr	r3, [r4, #0]
 8004fc6:	079b      	lsls	r3, r3, #30
 8004fc8:	f100 8107 	bmi.w	80051da <_printf_float+0x462>
 8004fcc:	68e0      	ldr	r0, [r4, #12]
 8004fce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fd0:	4298      	cmp	r0, r3
 8004fd2:	bfb8      	it	lt
 8004fd4:	4618      	movlt	r0, r3
 8004fd6:	e730      	b.n	8004e3a <_printf_float+0xc2>
 8004fd8:	2301      	movs	r3, #1
 8004fda:	464a      	mov	r2, r9
 8004fdc:	4631      	mov	r1, r6
 8004fde:	4628      	mov	r0, r5
 8004fe0:	47b8      	blx	r7
 8004fe2:	3001      	adds	r0, #1
 8004fe4:	f43f af27 	beq.w	8004e36 <_printf_float+0xbe>
 8004fe8:	f108 0801 	add.w	r8, r8, #1
 8004fec:	e7e6      	b.n	8004fbc <_printf_float+0x244>
 8004fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	dc39      	bgt.n	8005068 <_printf_float+0x2f0>
 8004ff4:	4a1b      	ldr	r2, [pc, #108]	; (8005064 <_printf_float+0x2ec>)
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	4631      	mov	r1, r6
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	47b8      	blx	r7
 8004ffe:	3001      	adds	r0, #1
 8005000:	f43f af19 	beq.w	8004e36 <_printf_float+0xbe>
 8005004:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005008:	4313      	orrs	r3, r2
 800500a:	d102      	bne.n	8005012 <_printf_float+0x29a>
 800500c:	6823      	ldr	r3, [r4, #0]
 800500e:	07d9      	lsls	r1, r3, #31
 8005010:	d5d8      	bpl.n	8004fc4 <_printf_float+0x24c>
 8005012:	ee18 3a10 	vmov	r3, s16
 8005016:	4652      	mov	r2, sl
 8005018:	4631      	mov	r1, r6
 800501a:	4628      	mov	r0, r5
 800501c:	47b8      	blx	r7
 800501e:	3001      	adds	r0, #1
 8005020:	f43f af09 	beq.w	8004e36 <_printf_float+0xbe>
 8005024:	f04f 0900 	mov.w	r9, #0
 8005028:	f104 0a1a 	add.w	sl, r4, #26
 800502c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800502e:	425b      	negs	r3, r3
 8005030:	454b      	cmp	r3, r9
 8005032:	dc01      	bgt.n	8005038 <_printf_float+0x2c0>
 8005034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005036:	e792      	b.n	8004f5e <_printf_float+0x1e6>
 8005038:	2301      	movs	r3, #1
 800503a:	4652      	mov	r2, sl
 800503c:	4631      	mov	r1, r6
 800503e:	4628      	mov	r0, r5
 8005040:	47b8      	blx	r7
 8005042:	3001      	adds	r0, #1
 8005044:	f43f aef7 	beq.w	8004e36 <_printf_float+0xbe>
 8005048:	f109 0901 	add.w	r9, r9, #1
 800504c:	e7ee      	b.n	800502c <_printf_float+0x2b4>
 800504e:	bf00      	nop
 8005050:	7fefffff 	.word	0x7fefffff
 8005054:	080094ac 	.word	0x080094ac
 8005058:	080094b0 	.word	0x080094b0
 800505c:	080094b4 	.word	0x080094b4
 8005060:	080094b8 	.word	0x080094b8
 8005064:	080094bc 	.word	0x080094bc
 8005068:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800506a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800506c:	429a      	cmp	r2, r3
 800506e:	bfa8      	it	ge
 8005070:	461a      	movge	r2, r3
 8005072:	2a00      	cmp	r2, #0
 8005074:	4691      	mov	r9, r2
 8005076:	dc37      	bgt.n	80050e8 <_printf_float+0x370>
 8005078:	f04f 0b00 	mov.w	fp, #0
 800507c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005080:	f104 021a 	add.w	r2, r4, #26
 8005084:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005086:	9305      	str	r3, [sp, #20]
 8005088:	eba3 0309 	sub.w	r3, r3, r9
 800508c:	455b      	cmp	r3, fp
 800508e:	dc33      	bgt.n	80050f8 <_printf_float+0x380>
 8005090:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005094:	429a      	cmp	r2, r3
 8005096:	db3b      	blt.n	8005110 <_printf_float+0x398>
 8005098:	6823      	ldr	r3, [r4, #0]
 800509a:	07da      	lsls	r2, r3, #31
 800509c:	d438      	bmi.n	8005110 <_printf_float+0x398>
 800509e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80050a2:	eba2 0903 	sub.w	r9, r2, r3
 80050a6:	9b05      	ldr	r3, [sp, #20]
 80050a8:	1ad2      	subs	r2, r2, r3
 80050aa:	4591      	cmp	r9, r2
 80050ac:	bfa8      	it	ge
 80050ae:	4691      	movge	r9, r2
 80050b0:	f1b9 0f00 	cmp.w	r9, #0
 80050b4:	dc35      	bgt.n	8005122 <_printf_float+0x3aa>
 80050b6:	f04f 0800 	mov.w	r8, #0
 80050ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050be:	f104 0a1a 	add.w	sl, r4, #26
 80050c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050c6:	1a9b      	subs	r3, r3, r2
 80050c8:	eba3 0309 	sub.w	r3, r3, r9
 80050cc:	4543      	cmp	r3, r8
 80050ce:	f77f af79 	ble.w	8004fc4 <_printf_float+0x24c>
 80050d2:	2301      	movs	r3, #1
 80050d4:	4652      	mov	r2, sl
 80050d6:	4631      	mov	r1, r6
 80050d8:	4628      	mov	r0, r5
 80050da:	47b8      	blx	r7
 80050dc:	3001      	adds	r0, #1
 80050de:	f43f aeaa 	beq.w	8004e36 <_printf_float+0xbe>
 80050e2:	f108 0801 	add.w	r8, r8, #1
 80050e6:	e7ec      	b.n	80050c2 <_printf_float+0x34a>
 80050e8:	4613      	mov	r3, r2
 80050ea:	4631      	mov	r1, r6
 80050ec:	4642      	mov	r2, r8
 80050ee:	4628      	mov	r0, r5
 80050f0:	47b8      	blx	r7
 80050f2:	3001      	adds	r0, #1
 80050f4:	d1c0      	bne.n	8005078 <_printf_float+0x300>
 80050f6:	e69e      	b.n	8004e36 <_printf_float+0xbe>
 80050f8:	2301      	movs	r3, #1
 80050fa:	4631      	mov	r1, r6
 80050fc:	4628      	mov	r0, r5
 80050fe:	9205      	str	r2, [sp, #20]
 8005100:	47b8      	blx	r7
 8005102:	3001      	adds	r0, #1
 8005104:	f43f ae97 	beq.w	8004e36 <_printf_float+0xbe>
 8005108:	9a05      	ldr	r2, [sp, #20]
 800510a:	f10b 0b01 	add.w	fp, fp, #1
 800510e:	e7b9      	b.n	8005084 <_printf_float+0x30c>
 8005110:	ee18 3a10 	vmov	r3, s16
 8005114:	4652      	mov	r2, sl
 8005116:	4631      	mov	r1, r6
 8005118:	4628      	mov	r0, r5
 800511a:	47b8      	blx	r7
 800511c:	3001      	adds	r0, #1
 800511e:	d1be      	bne.n	800509e <_printf_float+0x326>
 8005120:	e689      	b.n	8004e36 <_printf_float+0xbe>
 8005122:	9a05      	ldr	r2, [sp, #20]
 8005124:	464b      	mov	r3, r9
 8005126:	4442      	add	r2, r8
 8005128:	4631      	mov	r1, r6
 800512a:	4628      	mov	r0, r5
 800512c:	47b8      	blx	r7
 800512e:	3001      	adds	r0, #1
 8005130:	d1c1      	bne.n	80050b6 <_printf_float+0x33e>
 8005132:	e680      	b.n	8004e36 <_printf_float+0xbe>
 8005134:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005136:	2a01      	cmp	r2, #1
 8005138:	dc01      	bgt.n	800513e <_printf_float+0x3c6>
 800513a:	07db      	lsls	r3, r3, #31
 800513c:	d53a      	bpl.n	80051b4 <_printf_float+0x43c>
 800513e:	2301      	movs	r3, #1
 8005140:	4642      	mov	r2, r8
 8005142:	4631      	mov	r1, r6
 8005144:	4628      	mov	r0, r5
 8005146:	47b8      	blx	r7
 8005148:	3001      	adds	r0, #1
 800514a:	f43f ae74 	beq.w	8004e36 <_printf_float+0xbe>
 800514e:	ee18 3a10 	vmov	r3, s16
 8005152:	4652      	mov	r2, sl
 8005154:	4631      	mov	r1, r6
 8005156:	4628      	mov	r0, r5
 8005158:	47b8      	blx	r7
 800515a:	3001      	adds	r0, #1
 800515c:	f43f ae6b 	beq.w	8004e36 <_printf_float+0xbe>
 8005160:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005164:	2200      	movs	r2, #0
 8005166:	2300      	movs	r3, #0
 8005168:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800516c:	f7fb fcac 	bl	8000ac8 <__aeabi_dcmpeq>
 8005170:	b9d8      	cbnz	r0, 80051aa <_printf_float+0x432>
 8005172:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005176:	f108 0201 	add.w	r2, r8, #1
 800517a:	4631      	mov	r1, r6
 800517c:	4628      	mov	r0, r5
 800517e:	47b8      	blx	r7
 8005180:	3001      	adds	r0, #1
 8005182:	d10e      	bne.n	80051a2 <_printf_float+0x42a>
 8005184:	e657      	b.n	8004e36 <_printf_float+0xbe>
 8005186:	2301      	movs	r3, #1
 8005188:	4652      	mov	r2, sl
 800518a:	4631      	mov	r1, r6
 800518c:	4628      	mov	r0, r5
 800518e:	47b8      	blx	r7
 8005190:	3001      	adds	r0, #1
 8005192:	f43f ae50 	beq.w	8004e36 <_printf_float+0xbe>
 8005196:	f108 0801 	add.w	r8, r8, #1
 800519a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800519c:	3b01      	subs	r3, #1
 800519e:	4543      	cmp	r3, r8
 80051a0:	dcf1      	bgt.n	8005186 <_printf_float+0x40e>
 80051a2:	464b      	mov	r3, r9
 80051a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80051a8:	e6da      	b.n	8004f60 <_printf_float+0x1e8>
 80051aa:	f04f 0800 	mov.w	r8, #0
 80051ae:	f104 0a1a 	add.w	sl, r4, #26
 80051b2:	e7f2      	b.n	800519a <_printf_float+0x422>
 80051b4:	2301      	movs	r3, #1
 80051b6:	4642      	mov	r2, r8
 80051b8:	e7df      	b.n	800517a <_printf_float+0x402>
 80051ba:	2301      	movs	r3, #1
 80051bc:	464a      	mov	r2, r9
 80051be:	4631      	mov	r1, r6
 80051c0:	4628      	mov	r0, r5
 80051c2:	47b8      	blx	r7
 80051c4:	3001      	adds	r0, #1
 80051c6:	f43f ae36 	beq.w	8004e36 <_printf_float+0xbe>
 80051ca:	f108 0801 	add.w	r8, r8, #1
 80051ce:	68e3      	ldr	r3, [r4, #12]
 80051d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051d2:	1a5b      	subs	r3, r3, r1
 80051d4:	4543      	cmp	r3, r8
 80051d6:	dcf0      	bgt.n	80051ba <_printf_float+0x442>
 80051d8:	e6f8      	b.n	8004fcc <_printf_float+0x254>
 80051da:	f04f 0800 	mov.w	r8, #0
 80051de:	f104 0919 	add.w	r9, r4, #25
 80051e2:	e7f4      	b.n	80051ce <_printf_float+0x456>

080051e4 <_printf_common>:
 80051e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051e8:	4616      	mov	r6, r2
 80051ea:	4699      	mov	r9, r3
 80051ec:	688a      	ldr	r2, [r1, #8]
 80051ee:	690b      	ldr	r3, [r1, #16]
 80051f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051f4:	4293      	cmp	r3, r2
 80051f6:	bfb8      	it	lt
 80051f8:	4613      	movlt	r3, r2
 80051fa:	6033      	str	r3, [r6, #0]
 80051fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005200:	4607      	mov	r7, r0
 8005202:	460c      	mov	r4, r1
 8005204:	b10a      	cbz	r2, 800520a <_printf_common+0x26>
 8005206:	3301      	adds	r3, #1
 8005208:	6033      	str	r3, [r6, #0]
 800520a:	6823      	ldr	r3, [r4, #0]
 800520c:	0699      	lsls	r1, r3, #26
 800520e:	bf42      	ittt	mi
 8005210:	6833      	ldrmi	r3, [r6, #0]
 8005212:	3302      	addmi	r3, #2
 8005214:	6033      	strmi	r3, [r6, #0]
 8005216:	6825      	ldr	r5, [r4, #0]
 8005218:	f015 0506 	ands.w	r5, r5, #6
 800521c:	d106      	bne.n	800522c <_printf_common+0x48>
 800521e:	f104 0a19 	add.w	sl, r4, #25
 8005222:	68e3      	ldr	r3, [r4, #12]
 8005224:	6832      	ldr	r2, [r6, #0]
 8005226:	1a9b      	subs	r3, r3, r2
 8005228:	42ab      	cmp	r3, r5
 800522a:	dc26      	bgt.n	800527a <_printf_common+0x96>
 800522c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005230:	1e13      	subs	r3, r2, #0
 8005232:	6822      	ldr	r2, [r4, #0]
 8005234:	bf18      	it	ne
 8005236:	2301      	movne	r3, #1
 8005238:	0692      	lsls	r2, r2, #26
 800523a:	d42b      	bmi.n	8005294 <_printf_common+0xb0>
 800523c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005240:	4649      	mov	r1, r9
 8005242:	4638      	mov	r0, r7
 8005244:	47c0      	blx	r8
 8005246:	3001      	adds	r0, #1
 8005248:	d01e      	beq.n	8005288 <_printf_common+0xa4>
 800524a:	6823      	ldr	r3, [r4, #0]
 800524c:	6922      	ldr	r2, [r4, #16]
 800524e:	f003 0306 	and.w	r3, r3, #6
 8005252:	2b04      	cmp	r3, #4
 8005254:	bf02      	ittt	eq
 8005256:	68e5      	ldreq	r5, [r4, #12]
 8005258:	6833      	ldreq	r3, [r6, #0]
 800525a:	1aed      	subeq	r5, r5, r3
 800525c:	68a3      	ldr	r3, [r4, #8]
 800525e:	bf0c      	ite	eq
 8005260:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005264:	2500      	movne	r5, #0
 8005266:	4293      	cmp	r3, r2
 8005268:	bfc4      	itt	gt
 800526a:	1a9b      	subgt	r3, r3, r2
 800526c:	18ed      	addgt	r5, r5, r3
 800526e:	2600      	movs	r6, #0
 8005270:	341a      	adds	r4, #26
 8005272:	42b5      	cmp	r5, r6
 8005274:	d11a      	bne.n	80052ac <_printf_common+0xc8>
 8005276:	2000      	movs	r0, #0
 8005278:	e008      	b.n	800528c <_printf_common+0xa8>
 800527a:	2301      	movs	r3, #1
 800527c:	4652      	mov	r2, sl
 800527e:	4649      	mov	r1, r9
 8005280:	4638      	mov	r0, r7
 8005282:	47c0      	blx	r8
 8005284:	3001      	adds	r0, #1
 8005286:	d103      	bne.n	8005290 <_printf_common+0xac>
 8005288:	f04f 30ff 	mov.w	r0, #4294967295
 800528c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005290:	3501      	adds	r5, #1
 8005292:	e7c6      	b.n	8005222 <_printf_common+0x3e>
 8005294:	18e1      	adds	r1, r4, r3
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	2030      	movs	r0, #48	; 0x30
 800529a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800529e:	4422      	add	r2, r4
 80052a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052a8:	3302      	adds	r3, #2
 80052aa:	e7c7      	b.n	800523c <_printf_common+0x58>
 80052ac:	2301      	movs	r3, #1
 80052ae:	4622      	mov	r2, r4
 80052b0:	4649      	mov	r1, r9
 80052b2:	4638      	mov	r0, r7
 80052b4:	47c0      	blx	r8
 80052b6:	3001      	adds	r0, #1
 80052b8:	d0e6      	beq.n	8005288 <_printf_common+0xa4>
 80052ba:	3601      	adds	r6, #1
 80052bc:	e7d9      	b.n	8005272 <_printf_common+0x8e>
	...

080052c0 <_printf_i>:
 80052c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052c4:	7e0f      	ldrb	r7, [r1, #24]
 80052c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052c8:	2f78      	cmp	r7, #120	; 0x78
 80052ca:	4691      	mov	r9, r2
 80052cc:	4680      	mov	r8, r0
 80052ce:	460c      	mov	r4, r1
 80052d0:	469a      	mov	sl, r3
 80052d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80052d6:	d807      	bhi.n	80052e8 <_printf_i+0x28>
 80052d8:	2f62      	cmp	r7, #98	; 0x62
 80052da:	d80a      	bhi.n	80052f2 <_printf_i+0x32>
 80052dc:	2f00      	cmp	r7, #0
 80052de:	f000 80d4 	beq.w	800548a <_printf_i+0x1ca>
 80052e2:	2f58      	cmp	r7, #88	; 0x58
 80052e4:	f000 80c0 	beq.w	8005468 <_printf_i+0x1a8>
 80052e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052f0:	e03a      	b.n	8005368 <_printf_i+0xa8>
 80052f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052f6:	2b15      	cmp	r3, #21
 80052f8:	d8f6      	bhi.n	80052e8 <_printf_i+0x28>
 80052fa:	a101      	add	r1, pc, #4	; (adr r1, 8005300 <_printf_i+0x40>)
 80052fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005300:	08005359 	.word	0x08005359
 8005304:	0800536d 	.word	0x0800536d
 8005308:	080052e9 	.word	0x080052e9
 800530c:	080052e9 	.word	0x080052e9
 8005310:	080052e9 	.word	0x080052e9
 8005314:	080052e9 	.word	0x080052e9
 8005318:	0800536d 	.word	0x0800536d
 800531c:	080052e9 	.word	0x080052e9
 8005320:	080052e9 	.word	0x080052e9
 8005324:	080052e9 	.word	0x080052e9
 8005328:	080052e9 	.word	0x080052e9
 800532c:	08005471 	.word	0x08005471
 8005330:	08005399 	.word	0x08005399
 8005334:	0800542b 	.word	0x0800542b
 8005338:	080052e9 	.word	0x080052e9
 800533c:	080052e9 	.word	0x080052e9
 8005340:	08005493 	.word	0x08005493
 8005344:	080052e9 	.word	0x080052e9
 8005348:	08005399 	.word	0x08005399
 800534c:	080052e9 	.word	0x080052e9
 8005350:	080052e9 	.word	0x080052e9
 8005354:	08005433 	.word	0x08005433
 8005358:	682b      	ldr	r3, [r5, #0]
 800535a:	1d1a      	adds	r2, r3, #4
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	602a      	str	r2, [r5, #0]
 8005360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005364:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005368:	2301      	movs	r3, #1
 800536a:	e09f      	b.n	80054ac <_printf_i+0x1ec>
 800536c:	6820      	ldr	r0, [r4, #0]
 800536e:	682b      	ldr	r3, [r5, #0]
 8005370:	0607      	lsls	r7, r0, #24
 8005372:	f103 0104 	add.w	r1, r3, #4
 8005376:	6029      	str	r1, [r5, #0]
 8005378:	d501      	bpl.n	800537e <_printf_i+0xbe>
 800537a:	681e      	ldr	r6, [r3, #0]
 800537c:	e003      	b.n	8005386 <_printf_i+0xc6>
 800537e:	0646      	lsls	r6, r0, #25
 8005380:	d5fb      	bpl.n	800537a <_printf_i+0xba>
 8005382:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005386:	2e00      	cmp	r6, #0
 8005388:	da03      	bge.n	8005392 <_printf_i+0xd2>
 800538a:	232d      	movs	r3, #45	; 0x2d
 800538c:	4276      	negs	r6, r6
 800538e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005392:	485a      	ldr	r0, [pc, #360]	; (80054fc <_printf_i+0x23c>)
 8005394:	230a      	movs	r3, #10
 8005396:	e012      	b.n	80053be <_printf_i+0xfe>
 8005398:	682b      	ldr	r3, [r5, #0]
 800539a:	6820      	ldr	r0, [r4, #0]
 800539c:	1d19      	adds	r1, r3, #4
 800539e:	6029      	str	r1, [r5, #0]
 80053a0:	0605      	lsls	r5, r0, #24
 80053a2:	d501      	bpl.n	80053a8 <_printf_i+0xe8>
 80053a4:	681e      	ldr	r6, [r3, #0]
 80053a6:	e002      	b.n	80053ae <_printf_i+0xee>
 80053a8:	0641      	lsls	r1, r0, #25
 80053aa:	d5fb      	bpl.n	80053a4 <_printf_i+0xe4>
 80053ac:	881e      	ldrh	r6, [r3, #0]
 80053ae:	4853      	ldr	r0, [pc, #332]	; (80054fc <_printf_i+0x23c>)
 80053b0:	2f6f      	cmp	r7, #111	; 0x6f
 80053b2:	bf0c      	ite	eq
 80053b4:	2308      	moveq	r3, #8
 80053b6:	230a      	movne	r3, #10
 80053b8:	2100      	movs	r1, #0
 80053ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053be:	6865      	ldr	r5, [r4, #4]
 80053c0:	60a5      	str	r5, [r4, #8]
 80053c2:	2d00      	cmp	r5, #0
 80053c4:	bfa2      	ittt	ge
 80053c6:	6821      	ldrge	r1, [r4, #0]
 80053c8:	f021 0104 	bicge.w	r1, r1, #4
 80053cc:	6021      	strge	r1, [r4, #0]
 80053ce:	b90e      	cbnz	r6, 80053d4 <_printf_i+0x114>
 80053d0:	2d00      	cmp	r5, #0
 80053d2:	d04b      	beq.n	800546c <_printf_i+0x1ac>
 80053d4:	4615      	mov	r5, r2
 80053d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80053da:	fb03 6711 	mls	r7, r3, r1, r6
 80053de:	5dc7      	ldrb	r7, [r0, r7]
 80053e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80053e4:	4637      	mov	r7, r6
 80053e6:	42bb      	cmp	r3, r7
 80053e8:	460e      	mov	r6, r1
 80053ea:	d9f4      	bls.n	80053d6 <_printf_i+0x116>
 80053ec:	2b08      	cmp	r3, #8
 80053ee:	d10b      	bne.n	8005408 <_printf_i+0x148>
 80053f0:	6823      	ldr	r3, [r4, #0]
 80053f2:	07de      	lsls	r6, r3, #31
 80053f4:	d508      	bpl.n	8005408 <_printf_i+0x148>
 80053f6:	6923      	ldr	r3, [r4, #16]
 80053f8:	6861      	ldr	r1, [r4, #4]
 80053fa:	4299      	cmp	r1, r3
 80053fc:	bfde      	ittt	le
 80053fe:	2330      	movle	r3, #48	; 0x30
 8005400:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005404:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005408:	1b52      	subs	r2, r2, r5
 800540a:	6122      	str	r2, [r4, #16]
 800540c:	f8cd a000 	str.w	sl, [sp]
 8005410:	464b      	mov	r3, r9
 8005412:	aa03      	add	r2, sp, #12
 8005414:	4621      	mov	r1, r4
 8005416:	4640      	mov	r0, r8
 8005418:	f7ff fee4 	bl	80051e4 <_printf_common>
 800541c:	3001      	adds	r0, #1
 800541e:	d14a      	bne.n	80054b6 <_printf_i+0x1f6>
 8005420:	f04f 30ff 	mov.w	r0, #4294967295
 8005424:	b004      	add	sp, #16
 8005426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	f043 0320 	orr.w	r3, r3, #32
 8005430:	6023      	str	r3, [r4, #0]
 8005432:	4833      	ldr	r0, [pc, #204]	; (8005500 <_printf_i+0x240>)
 8005434:	2778      	movs	r7, #120	; 0x78
 8005436:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	6829      	ldr	r1, [r5, #0]
 800543e:	061f      	lsls	r7, r3, #24
 8005440:	f851 6b04 	ldr.w	r6, [r1], #4
 8005444:	d402      	bmi.n	800544c <_printf_i+0x18c>
 8005446:	065f      	lsls	r7, r3, #25
 8005448:	bf48      	it	mi
 800544a:	b2b6      	uxthmi	r6, r6
 800544c:	07df      	lsls	r7, r3, #31
 800544e:	bf48      	it	mi
 8005450:	f043 0320 	orrmi.w	r3, r3, #32
 8005454:	6029      	str	r1, [r5, #0]
 8005456:	bf48      	it	mi
 8005458:	6023      	strmi	r3, [r4, #0]
 800545a:	b91e      	cbnz	r6, 8005464 <_printf_i+0x1a4>
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	f023 0320 	bic.w	r3, r3, #32
 8005462:	6023      	str	r3, [r4, #0]
 8005464:	2310      	movs	r3, #16
 8005466:	e7a7      	b.n	80053b8 <_printf_i+0xf8>
 8005468:	4824      	ldr	r0, [pc, #144]	; (80054fc <_printf_i+0x23c>)
 800546a:	e7e4      	b.n	8005436 <_printf_i+0x176>
 800546c:	4615      	mov	r5, r2
 800546e:	e7bd      	b.n	80053ec <_printf_i+0x12c>
 8005470:	682b      	ldr	r3, [r5, #0]
 8005472:	6826      	ldr	r6, [r4, #0]
 8005474:	6961      	ldr	r1, [r4, #20]
 8005476:	1d18      	adds	r0, r3, #4
 8005478:	6028      	str	r0, [r5, #0]
 800547a:	0635      	lsls	r5, r6, #24
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	d501      	bpl.n	8005484 <_printf_i+0x1c4>
 8005480:	6019      	str	r1, [r3, #0]
 8005482:	e002      	b.n	800548a <_printf_i+0x1ca>
 8005484:	0670      	lsls	r0, r6, #25
 8005486:	d5fb      	bpl.n	8005480 <_printf_i+0x1c0>
 8005488:	8019      	strh	r1, [r3, #0]
 800548a:	2300      	movs	r3, #0
 800548c:	6123      	str	r3, [r4, #16]
 800548e:	4615      	mov	r5, r2
 8005490:	e7bc      	b.n	800540c <_printf_i+0x14c>
 8005492:	682b      	ldr	r3, [r5, #0]
 8005494:	1d1a      	adds	r2, r3, #4
 8005496:	602a      	str	r2, [r5, #0]
 8005498:	681d      	ldr	r5, [r3, #0]
 800549a:	6862      	ldr	r2, [r4, #4]
 800549c:	2100      	movs	r1, #0
 800549e:	4628      	mov	r0, r5
 80054a0:	f7fa fe96 	bl	80001d0 <memchr>
 80054a4:	b108      	cbz	r0, 80054aa <_printf_i+0x1ea>
 80054a6:	1b40      	subs	r0, r0, r5
 80054a8:	6060      	str	r0, [r4, #4]
 80054aa:	6863      	ldr	r3, [r4, #4]
 80054ac:	6123      	str	r3, [r4, #16]
 80054ae:	2300      	movs	r3, #0
 80054b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054b4:	e7aa      	b.n	800540c <_printf_i+0x14c>
 80054b6:	6923      	ldr	r3, [r4, #16]
 80054b8:	462a      	mov	r2, r5
 80054ba:	4649      	mov	r1, r9
 80054bc:	4640      	mov	r0, r8
 80054be:	47d0      	blx	sl
 80054c0:	3001      	adds	r0, #1
 80054c2:	d0ad      	beq.n	8005420 <_printf_i+0x160>
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	079b      	lsls	r3, r3, #30
 80054c8:	d413      	bmi.n	80054f2 <_printf_i+0x232>
 80054ca:	68e0      	ldr	r0, [r4, #12]
 80054cc:	9b03      	ldr	r3, [sp, #12]
 80054ce:	4298      	cmp	r0, r3
 80054d0:	bfb8      	it	lt
 80054d2:	4618      	movlt	r0, r3
 80054d4:	e7a6      	b.n	8005424 <_printf_i+0x164>
 80054d6:	2301      	movs	r3, #1
 80054d8:	4632      	mov	r2, r6
 80054da:	4649      	mov	r1, r9
 80054dc:	4640      	mov	r0, r8
 80054de:	47d0      	blx	sl
 80054e0:	3001      	adds	r0, #1
 80054e2:	d09d      	beq.n	8005420 <_printf_i+0x160>
 80054e4:	3501      	adds	r5, #1
 80054e6:	68e3      	ldr	r3, [r4, #12]
 80054e8:	9903      	ldr	r1, [sp, #12]
 80054ea:	1a5b      	subs	r3, r3, r1
 80054ec:	42ab      	cmp	r3, r5
 80054ee:	dcf2      	bgt.n	80054d6 <_printf_i+0x216>
 80054f0:	e7eb      	b.n	80054ca <_printf_i+0x20a>
 80054f2:	2500      	movs	r5, #0
 80054f4:	f104 0619 	add.w	r6, r4, #25
 80054f8:	e7f5      	b.n	80054e6 <_printf_i+0x226>
 80054fa:	bf00      	nop
 80054fc:	080094be 	.word	0x080094be
 8005500:	080094cf 	.word	0x080094cf

08005504 <_scanf_float>:
 8005504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005508:	b087      	sub	sp, #28
 800550a:	4617      	mov	r7, r2
 800550c:	9303      	str	r3, [sp, #12]
 800550e:	688b      	ldr	r3, [r1, #8]
 8005510:	1e5a      	subs	r2, r3, #1
 8005512:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005516:	bf83      	ittte	hi
 8005518:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800551c:	195b      	addhi	r3, r3, r5
 800551e:	9302      	strhi	r3, [sp, #8]
 8005520:	2300      	movls	r3, #0
 8005522:	bf86      	itte	hi
 8005524:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005528:	608b      	strhi	r3, [r1, #8]
 800552a:	9302      	strls	r3, [sp, #8]
 800552c:	680b      	ldr	r3, [r1, #0]
 800552e:	468b      	mov	fp, r1
 8005530:	2500      	movs	r5, #0
 8005532:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005536:	f84b 3b1c 	str.w	r3, [fp], #28
 800553a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800553e:	4680      	mov	r8, r0
 8005540:	460c      	mov	r4, r1
 8005542:	465e      	mov	r6, fp
 8005544:	46aa      	mov	sl, r5
 8005546:	46a9      	mov	r9, r5
 8005548:	9501      	str	r5, [sp, #4]
 800554a:	68a2      	ldr	r2, [r4, #8]
 800554c:	b152      	cbz	r2, 8005564 <_scanf_float+0x60>
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	2b4e      	cmp	r3, #78	; 0x4e
 8005554:	d864      	bhi.n	8005620 <_scanf_float+0x11c>
 8005556:	2b40      	cmp	r3, #64	; 0x40
 8005558:	d83c      	bhi.n	80055d4 <_scanf_float+0xd0>
 800555a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800555e:	b2c8      	uxtb	r0, r1
 8005560:	280e      	cmp	r0, #14
 8005562:	d93a      	bls.n	80055da <_scanf_float+0xd6>
 8005564:	f1b9 0f00 	cmp.w	r9, #0
 8005568:	d003      	beq.n	8005572 <_scanf_float+0x6e>
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005570:	6023      	str	r3, [r4, #0]
 8005572:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005576:	f1ba 0f01 	cmp.w	sl, #1
 800557a:	f200 8113 	bhi.w	80057a4 <_scanf_float+0x2a0>
 800557e:	455e      	cmp	r6, fp
 8005580:	f200 8105 	bhi.w	800578e <_scanf_float+0x28a>
 8005584:	2501      	movs	r5, #1
 8005586:	4628      	mov	r0, r5
 8005588:	b007      	add	sp, #28
 800558a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800558e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005592:	2a0d      	cmp	r2, #13
 8005594:	d8e6      	bhi.n	8005564 <_scanf_float+0x60>
 8005596:	a101      	add	r1, pc, #4	; (adr r1, 800559c <_scanf_float+0x98>)
 8005598:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800559c:	080056db 	.word	0x080056db
 80055a0:	08005565 	.word	0x08005565
 80055a4:	08005565 	.word	0x08005565
 80055a8:	08005565 	.word	0x08005565
 80055ac:	0800573b 	.word	0x0800573b
 80055b0:	08005713 	.word	0x08005713
 80055b4:	08005565 	.word	0x08005565
 80055b8:	08005565 	.word	0x08005565
 80055bc:	080056e9 	.word	0x080056e9
 80055c0:	08005565 	.word	0x08005565
 80055c4:	08005565 	.word	0x08005565
 80055c8:	08005565 	.word	0x08005565
 80055cc:	08005565 	.word	0x08005565
 80055d0:	080056a1 	.word	0x080056a1
 80055d4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80055d8:	e7db      	b.n	8005592 <_scanf_float+0x8e>
 80055da:	290e      	cmp	r1, #14
 80055dc:	d8c2      	bhi.n	8005564 <_scanf_float+0x60>
 80055de:	a001      	add	r0, pc, #4	; (adr r0, 80055e4 <_scanf_float+0xe0>)
 80055e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80055e4:	08005693 	.word	0x08005693
 80055e8:	08005565 	.word	0x08005565
 80055ec:	08005693 	.word	0x08005693
 80055f0:	08005727 	.word	0x08005727
 80055f4:	08005565 	.word	0x08005565
 80055f8:	08005641 	.word	0x08005641
 80055fc:	0800567d 	.word	0x0800567d
 8005600:	0800567d 	.word	0x0800567d
 8005604:	0800567d 	.word	0x0800567d
 8005608:	0800567d 	.word	0x0800567d
 800560c:	0800567d 	.word	0x0800567d
 8005610:	0800567d 	.word	0x0800567d
 8005614:	0800567d 	.word	0x0800567d
 8005618:	0800567d 	.word	0x0800567d
 800561c:	0800567d 	.word	0x0800567d
 8005620:	2b6e      	cmp	r3, #110	; 0x6e
 8005622:	d809      	bhi.n	8005638 <_scanf_float+0x134>
 8005624:	2b60      	cmp	r3, #96	; 0x60
 8005626:	d8b2      	bhi.n	800558e <_scanf_float+0x8a>
 8005628:	2b54      	cmp	r3, #84	; 0x54
 800562a:	d077      	beq.n	800571c <_scanf_float+0x218>
 800562c:	2b59      	cmp	r3, #89	; 0x59
 800562e:	d199      	bne.n	8005564 <_scanf_float+0x60>
 8005630:	2d07      	cmp	r5, #7
 8005632:	d197      	bne.n	8005564 <_scanf_float+0x60>
 8005634:	2508      	movs	r5, #8
 8005636:	e029      	b.n	800568c <_scanf_float+0x188>
 8005638:	2b74      	cmp	r3, #116	; 0x74
 800563a:	d06f      	beq.n	800571c <_scanf_float+0x218>
 800563c:	2b79      	cmp	r3, #121	; 0x79
 800563e:	e7f6      	b.n	800562e <_scanf_float+0x12a>
 8005640:	6821      	ldr	r1, [r4, #0]
 8005642:	05c8      	lsls	r0, r1, #23
 8005644:	d51a      	bpl.n	800567c <_scanf_float+0x178>
 8005646:	9b02      	ldr	r3, [sp, #8]
 8005648:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800564c:	6021      	str	r1, [r4, #0]
 800564e:	f109 0901 	add.w	r9, r9, #1
 8005652:	b11b      	cbz	r3, 800565c <_scanf_float+0x158>
 8005654:	3b01      	subs	r3, #1
 8005656:	3201      	adds	r2, #1
 8005658:	9302      	str	r3, [sp, #8]
 800565a:	60a2      	str	r2, [r4, #8]
 800565c:	68a3      	ldr	r3, [r4, #8]
 800565e:	3b01      	subs	r3, #1
 8005660:	60a3      	str	r3, [r4, #8]
 8005662:	6923      	ldr	r3, [r4, #16]
 8005664:	3301      	adds	r3, #1
 8005666:	6123      	str	r3, [r4, #16]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	3b01      	subs	r3, #1
 800566c:	2b00      	cmp	r3, #0
 800566e:	607b      	str	r3, [r7, #4]
 8005670:	f340 8084 	ble.w	800577c <_scanf_float+0x278>
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	3301      	adds	r3, #1
 8005678:	603b      	str	r3, [r7, #0]
 800567a:	e766      	b.n	800554a <_scanf_float+0x46>
 800567c:	eb1a 0f05 	cmn.w	sl, r5
 8005680:	f47f af70 	bne.w	8005564 <_scanf_float+0x60>
 8005684:	6822      	ldr	r2, [r4, #0]
 8005686:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800568a:	6022      	str	r2, [r4, #0]
 800568c:	f806 3b01 	strb.w	r3, [r6], #1
 8005690:	e7e4      	b.n	800565c <_scanf_float+0x158>
 8005692:	6822      	ldr	r2, [r4, #0]
 8005694:	0610      	lsls	r0, r2, #24
 8005696:	f57f af65 	bpl.w	8005564 <_scanf_float+0x60>
 800569a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800569e:	e7f4      	b.n	800568a <_scanf_float+0x186>
 80056a0:	f1ba 0f00 	cmp.w	sl, #0
 80056a4:	d10e      	bne.n	80056c4 <_scanf_float+0x1c0>
 80056a6:	f1b9 0f00 	cmp.w	r9, #0
 80056aa:	d10e      	bne.n	80056ca <_scanf_float+0x1c6>
 80056ac:	6822      	ldr	r2, [r4, #0]
 80056ae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80056b2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80056b6:	d108      	bne.n	80056ca <_scanf_float+0x1c6>
 80056b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80056bc:	6022      	str	r2, [r4, #0]
 80056be:	f04f 0a01 	mov.w	sl, #1
 80056c2:	e7e3      	b.n	800568c <_scanf_float+0x188>
 80056c4:	f1ba 0f02 	cmp.w	sl, #2
 80056c8:	d055      	beq.n	8005776 <_scanf_float+0x272>
 80056ca:	2d01      	cmp	r5, #1
 80056cc:	d002      	beq.n	80056d4 <_scanf_float+0x1d0>
 80056ce:	2d04      	cmp	r5, #4
 80056d0:	f47f af48 	bne.w	8005564 <_scanf_float+0x60>
 80056d4:	3501      	adds	r5, #1
 80056d6:	b2ed      	uxtb	r5, r5
 80056d8:	e7d8      	b.n	800568c <_scanf_float+0x188>
 80056da:	f1ba 0f01 	cmp.w	sl, #1
 80056de:	f47f af41 	bne.w	8005564 <_scanf_float+0x60>
 80056e2:	f04f 0a02 	mov.w	sl, #2
 80056e6:	e7d1      	b.n	800568c <_scanf_float+0x188>
 80056e8:	b97d      	cbnz	r5, 800570a <_scanf_float+0x206>
 80056ea:	f1b9 0f00 	cmp.w	r9, #0
 80056ee:	f47f af3c 	bne.w	800556a <_scanf_float+0x66>
 80056f2:	6822      	ldr	r2, [r4, #0]
 80056f4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80056f8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80056fc:	f47f af39 	bne.w	8005572 <_scanf_float+0x6e>
 8005700:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005704:	6022      	str	r2, [r4, #0]
 8005706:	2501      	movs	r5, #1
 8005708:	e7c0      	b.n	800568c <_scanf_float+0x188>
 800570a:	2d03      	cmp	r5, #3
 800570c:	d0e2      	beq.n	80056d4 <_scanf_float+0x1d0>
 800570e:	2d05      	cmp	r5, #5
 8005710:	e7de      	b.n	80056d0 <_scanf_float+0x1cc>
 8005712:	2d02      	cmp	r5, #2
 8005714:	f47f af26 	bne.w	8005564 <_scanf_float+0x60>
 8005718:	2503      	movs	r5, #3
 800571a:	e7b7      	b.n	800568c <_scanf_float+0x188>
 800571c:	2d06      	cmp	r5, #6
 800571e:	f47f af21 	bne.w	8005564 <_scanf_float+0x60>
 8005722:	2507      	movs	r5, #7
 8005724:	e7b2      	b.n	800568c <_scanf_float+0x188>
 8005726:	6822      	ldr	r2, [r4, #0]
 8005728:	0591      	lsls	r1, r2, #22
 800572a:	f57f af1b 	bpl.w	8005564 <_scanf_float+0x60>
 800572e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005732:	6022      	str	r2, [r4, #0]
 8005734:	f8cd 9004 	str.w	r9, [sp, #4]
 8005738:	e7a8      	b.n	800568c <_scanf_float+0x188>
 800573a:	6822      	ldr	r2, [r4, #0]
 800573c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005740:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005744:	d006      	beq.n	8005754 <_scanf_float+0x250>
 8005746:	0550      	lsls	r0, r2, #21
 8005748:	f57f af0c 	bpl.w	8005564 <_scanf_float+0x60>
 800574c:	f1b9 0f00 	cmp.w	r9, #0
 8005750:	f43f af0f 	beq.w	8005572 <_scanf_float+0x6e>
 8005754:	0591      	lsls	r1, r2, #22
 8005756:	bf58      	it	pl
 8005758:	9901      	ldrpl	r1, [sp, #4]
 800575a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800575e:	bf58      	it	pl
 8005760:	eba9 0101 	subpl.w	r1, r9, r1
 8005764:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005768:	bf58      	it	pl
 800576a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800576e:	6022      	str	r2, [r4, #0]
 8005770:	f04f 0900 	mov.w	r9, #0
 8005774:	e78a      	b.n	800568c <_scanf_float+0x188>
 8005776:	f04f 0a03 	mov.w	sl, #3
 800577a:	e787      	b.n	800568c <_scanf_float+0x188>
 800577c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005780:	4639      	mov	r1, r7
 8005782:	4640      	mov	r0, r8
 8005784:	4798      	blx	r3
 8005786:	2800      	cmp	r0, #0
 8005788:	f43f aedf 	beq.w	800554a <_scanf_float+0x46>
 800578c:	e6ea      	b.n	8005564 <_scanf_float+0x60>
 800578e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005792:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005796:	463a      	mov	r2, r7
 8005798:	4640      	mov	r0, r8
 800579a:	4798      	blx	r3
 800579c:	6923      	ldr	r3, [r4, #16]
 800579e:	3b01      	subs	r3, #1
 80057a0:	6123      	str	r3, [r4, #16]
 80057a2:	e6ec      	b.n	800557e <_scanf_float+0x7a>
 80057a4:	1e6b      	subs	r3, r5, #1
 80057a6:	2b06      	cmp	r3, #6
 80057a8:	d825      	bhi.n	80057f6 <_scanf_float+0x2f2>
 80057aa:	2d02      	cmp	r5, #2
 80057ac:	d836      	bhi.n	800581c <_scanf_float+0x318>
 80057ae:	455e      	cmp	r6, fp
 80057b0:	f67f aee8 	bls.w	8005584 <_scanf_float+0x80>
 80057b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80057b8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80057bc:	463a      	mov	r2, r7
 80057be:	4640      	mov	r0, r8
 80057c0:	4798      	blx	r3
 80057c2:	6923      	ldr	r3, [r4, #16]
 80057c4:	3b01      	subs	r3, #1
 80057c6:	6123      	str	r3, [r4, #16]
 80057c8:	e7f1      	b.n	80057ae <_scanf_float+0x2aa>
 80057ca:	9802      	ldr	r0, [sp, #8]
 80057cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80057d0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80057d4:	9002      	str	r0, [sp, #8]
 80057d6:	463a      	mov	r2, r7
 80057d8:	4640      	mov	r0, r8
 80057da:	4798      	blx	r3
 80057dc:	6923      	ldr	r3, [r4, #16]
 80057de:	3b01      	subs	r3, #1
 80057e0:	6123      	str	r3, [r4, #16]
 80057e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057e6:	fa5f fa8a 	uxtb.w	sl, sl
 80057ea:	f1ba 0f02 	cmp.w	sl, #2
 80057ee:	d1ec      	bne.n	80057ca <_scanf_float+0x2c6>
 80057f0:	3d03      	subs	r5, #3
 80057f2:	b2ed      	uxtb	r5, r5
 80057f4:	1b76      	subs	r6, r6, r5
 80057f6:	6823      	ldr	r3, [r4, #0]
 80057f8:	05da      	lsls	r2, r3, #23
 80057fa:	d52f      	bpl.n	800585c <_scanf_float+0x358>
 80057fc:	055b      	lsls	r3, r3, #21
 80057fe:	d510      	bpl.n	8005822 <_scanf_float+0x31e>
 8005800:	455e      	cmp	r6, fp
 8005802:	f67f aebf 	bls.w	8005584 <_scanf_float+0x80>
 8005806:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800580a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800580e:	463a      	mov	r2, r7
 8005810:	4640      	mov	r0, r8
 8005812:	4798      	blx	r3
 8005814:	6923      	ldr	r3, [r4, #16]
 8005816:	3b01      	subs	r3, #1
 8005818:	6123      	str	r3, [r4, #16]
 800581a:	e7f1      	b.n	8005800 <_scanf_float+0x2fc>
 800581c:	46aa      	mov	sl, r5
 800581e:	9602      	str	r6, [sp, #8]
 8005820:	e7df      	b.n	80057e2 <_scanf_float+0x2de>
 8005822:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005826:	6923      	ldr	r3, [r4, #16]
 8005828:	2965      	cmp	r1, #101	; 0x65
 800582a:	f103 33ff 	add.w	r3, r3, #4294967295
 800582e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005832:	6123      	str	r3, [r4, #16]
 8005834:	d00c      	beq.n	8005850 <_scanf_float+0x34c>
 8005836:	2945      	cmp	r1, #69	; 0x45
 8005838:	d00a      	beq.n	8005850 <_scanf_float+0x34c>
 800583a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800583e:	463a      	mov	r2, r7
 8005840:	4640      	mov	r0, r8
 8005842:	4798      	blx	r3
 8005844:	6923      	ldr	r3, [r4, #16]
 8005846:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800584a:	3b01      	subs	r3, #1
 800584c:	1eb5      	subs	r5, r6, #2
 800584e:	6123      	str	r3, [r4, #16]
 8005850:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005854:	463a      	mov	r2, r7
 8005856:	4640      	mov	r0, r8
 8005858:	4798      	blx	r3
 800585a:	462e      	mov	r6, r5
 800585c:	6825      	ldr	r5, [r4, #0]
 800585e:	f015 0510 	ands.w	r5, r5, #16
 8005862:	d158      	bne.n	8005916 <_scanf_float+0x412>
 8005864:	7035      	strb	r5, [r6, #0]
 8005866:	6823      	ldr	r3, [r4, #0]
 8005868:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800586c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005870:	d11c      	bne.n	80058ac <_scanf_float+0x3a8>
 8005872:	9b01      	ldr	r3, [sp, #4]
 8005874:	454b      	cmp	r3, r9
 8005876:	eba3 0209 	sub.w	r2, r3, r9
 800587a:	d124      	bne.n	80058c6 <_scanf_float+0x3c2>
 800587c:	2200      	movs	r2, #0
 800587e:	4659      	mov	r1, fp
 8005880:	4640      	mov	r0, r8
 8005882:	f002 fc31 	bl	80080e8 <_strtod_r>
 8005886:	9b03      	ldr	r3, [sp, #12]
 8005888:	6821      	ldr	r1, [r4, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f011 0f02 	tst.w	r1, #2
 8005890:	ec57 6b10 	vmov	r6, r7, d0
 8005894:	f103 0204 	add.w	r2, r3, #4
 8005898:	d020      	beq.n	80058dc <_scanf_float+0x3d8>
 800589a:	9903      	ldr	r1, [sp, #12]
 800589c:	600a      	str	r2, [r1, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	e9c3 6700 	strd	r6, r7, [r3]
 80058a4:	68e3      	ldr	r3, [r4, #12]
 80058a6:	3301      	adds	r3, #1
 80058a8:	60e3      	str	r3, [r4, #12]
 80058aa:	e66c      	b.n	8005586 <_scanf_float+0x82>
 80058ac:	9b04      	ldr	r3, [sp, #16]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d0e4      	beq.n	800587c <_scanf_float+0x378>
 80058b2:	9905      	ldr	r1, [sp, #20]
 80058b4:	230a      	movs	r3, #10
 80058b6:	462a      	mov	r2, r5
 80058b8:	3101      	adds	r1, #1
 80058ba:	4640      	mov	r0, r8
 80058bc:	f002 fc9c 	bl	80081f8 <_strtol_r>
 80058c0:	9b04      	ldr	r3, [sp, #16]
 80058c2:	9e05      	ldr	r6, [sp, #20]
 80058c4:	1ac2      	subs	r2, r0, r3
 80058c6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80058ca:	429e      	cmp	r6, r3
 80058cc:	bf28      	it	cs
 80058ce:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80058d2:	4912      	ldr	r1, [pc, #72]	; (800591c <_scanf_float+0x418>)
 80058d4:	4630      	mov	r0, r6
 80058d6:	f000 f8e7 	bl	8005aa8 <siprintf>
 80058da:	e7cf      	b.n	800587c <_scanf_float+0x378>
 80058dc:	f011 0f04 	tst.w	r1, #4
 80058e0:	9903      	ldr	r1, [sp, #12]
 80058e2:	600a      	str	r2, [r1, #0]
 80058e4:	d1db      	bne.n	800589e <_scanf_float+0x39a>
 80058e6:	f8d3 8000 	ldr.w	r8, [r3]
 80058ea:	ee10 2a10 	vmov	r2, s0
 80058ee:	ee10 0a10 	vmov	r0, s0
 80058f2:	463b      	mov	r3, r7
 80058f4:	4639      	mov	r1, r7
 80058f6:	f7fb f919 	bl	8000b2c <__aeabi_dcmpun>
 80058fa:	b128      	cbz	r0, 8005908 <_scanf_float+0x404>
 80058fc:	4808      	ldr	r0, [pc, #32]	; (8005920 <_scanf_float+0x41c>)
 80058fe:	f000 f9b7 	bl	8005c70 <nanf>
 8005902:	ed88 0a00 	vstr	s0, [r8]
 8005906:	e7cd      	b.n	80058a4 <_scanf_float+0x3a0>
 8005908:	4630      	mov	r0, r6
 800590a:	4639      	mov	r1, r7
 800590c:	f7fb f96c 	bl	8000be8 <__aeabi_d2f>
 8005910:	f8c8 0000 	str.w	r0, [r8]
 8005914:	e7c6      	b.n	80058a4 <_scanf_float+0x3a0>
 8005916:	2500      	movs	r5, #0
 8005918:	e635      	b.n	8005586 <_scanf_float+0x82>
 800591a:	bf00      	nop
 800591c:	080094e0 	.word	0x080094e0
 8005920:	08009875 	.word	0x08009875

08005924 <std>:
 8005924:	2300      	movs	r3, #0
 8005926:	b510      	push	{r4, lr}
 8005928:	4604      	mov	r4, r0
 800592a:	e9c0 3300 	strd	r3, r3, [r0]
 800592e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005932:	6083      	str	r3, [r0, #8]
 8005934:	8181      	strh	r1, [r0, #12]
 8005936:	6643      	str	r3, [r0, #100]	; 0x64
 8005938:	81c2      	strh	r2, [r0, #14]
 800593a:	6183      	str	r3, [r0, #24]
 800593c:	4619      	mov	r1, r3
 800593e:	2208      	movs	r2, #8
 8005940:	305c      	adds	r0, #92	; 0x5c
 8005942:	f000 f914 	bl	8005b6e <memset>
 8005946:	4b0d      	ldr	r3, [pc, #52]	; (800597c <std+0x58>)
 8005948:	6263      	str	r3, [r4, #36]	; 0x24
 800594a:	4b0d      	ldr	r3, [pc, #52]	; (8005980 <std+0x5c>)
 800594c:	62a3      	str	r3, [r4, #40]	; 0x28
 800594e:	4b0d      	ldr	r3, [pc, #52]	; (8005984 <std+0x60>)
 8005950:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005952:	4b0d      	ldr	r3, [pc, #52]	; (8005988 <std+0x64>)
 8005954:	6323      	str	r3, [r4, #48]	; 0x30
 8005956:	4b0d      	ldr	r3, [pc, #52]	; (800598c <std+0x68>)
 8005958:	6224      	str	r4, [r4, #32]
 800595a:	429c      	cmp	r4, r3
 800595c:	d006      	beq.n	800596c <std+0x48>
 800595e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005962:	4294      	cmp	r4, r2
 8005964:	d002      	beq.n	800596c <std+0x48>
 8005966:	33d0      	adds	r3, #208	; 0xd0
 8005968:	429c      	cmp	r4, r3
 800596a:	d105      	bne.n	8005978 <std+0x54>
 800596c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005974:	f000 b978 	b.w	8005c68 <__retarget_lock_init_recursive>
 8005978:	bd10      	pop	{r4, pc}
 800597a:	bf00      	nop
 800597c:	08005ae9 	.word	0x08005ae9
 8005980:	08005b0b 	.word	0x08005b0b
 8005984:	08005b43 	.word	0x08005b43
 8005988:	08005b67 	.word	0x08005b67
 800598c:	20000428 	.word	0x20000428

08005990 <stdio_exit_handler>:
 8005990:	4a02      	ldr	r2, [pc, #8]	; (800599c <stdio_exit_handler+0xc>)
 8005992:	4903      	ldr	r1, [pc, #12]	; (80059a0 <stdio_exit_handler+0x10>)
 8005994:	4803      	ldr	r0, [pc, #12]	; (80059a4 <stdio_exit_handler+0x14>)
 8005996:	f000 b869 	b.w	8005a6c <_fwalk_sglue>
 800599a:	bf00      	nop
 800599c:	2000000c 	.word	0x2000000c
 80059a0:	080085b9 	.word	0x080085b9
 80059a4:	20000018 	.word	0x20000018

080059a8 <cleanup_stdio>:
 80059a8:	6841      	ldr	r1, [r0, #4]
 80059aa:	4b0c      	ldr	r3, [pc, #48]	; (80059dc <cleanup_stdio+0x34>)
 80059ac:	4299      	cmp	r1, r3
 80059ae:	b510      	push	{r4, lr}
 80059b0:	4604      	mov	r4, r0
 80059b2:	d001      	beq.n	80059b8 <cleanup_stdio+0x10>
 80059b4:	f002 fe00 	bl	80085b8 <_fflush_r>
 80059b8:	68a1      	ldr	r1, [r4, #8]
 80059ba:	4b09      	ldr	r3, [pc, #36]	; (80059e0 <cleanup_stdio+0x38>)
 80059bc:	4299      	cmp	r1, r3
 80059be:	d002      	beq.n	80059c6 <cleanup_stdio+0x1e>
 80059c0:	4620      	mov	r0, r4
 80059c2:	f002 fdf9 	bl	80085b8 <_fflush_r>
 80059c6:	68e1      	ldr	r1, [r4, #12]
 80059c8:	4b06      	ldr	r3, [pc, #24]	; (80059e4 <cleanup_stdio+0x3c>)
 80059ca:	4299      	cmp	r1, r3
 80059cc:	d004      	beq.n	80059d8 <cleanup_stdio+0x30>
 80059ce:	4620      	mov	r0, r4
 80059d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059d4:	f002 bdf0 	b.w	80085b8 <_fflush_r>
 80059d8:	bd10      	pop	{r4, pc}
 80059da:	bf00      	nop
 80059dc:	20000428 	.word	0x20000428
 80059e0:	20000490 	.word	0x20000490
 80059e4:	200004f8 	.word	0x200004f8

080059e8 <global_stdio_init.part.0>:
 80059e8:	b510      	push	{r4, lr}
 80059ea:	4b0b      	ldr	r3, [pc, #44]	; (8005a18 <global_stdio_init.part.0+0x30>)
 80059ec:	4c0b      	ldr	r4, [pc, #44]	; (8005a1c <global_stdio_init.part.0+0x34>)
 80059ee:	4a0c      	ldr	r2, [pc, #48]	; (8005a20 <global_stdio_init.part.0+0x38>)
 80059f0:	601a      	str	r2, [r3, #0]
 80059f2:	4620      	mov	r0, r4
 80059f4:	2200      	movs	r2, #0
 80059f6:	2104      	movs	r1, #4
 80059f8:	f7ff ff94 	bl	8005924 <std>
 80059fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005a00:	2201      	movs	r2, #1
 8005a02:	2109      	movs	r1, #9
 8005a04:	f7ff ff8e 	bl	8005924 <std>
 8005a08:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a12:	2112      	movs	r1, #18
 8005a14:	f7ff bf86 	b.w	8005924 <std>
 8005a18:	20000560 	.word	0x20000560
 8005a1c:	20000428 	.word	0x20000428
 8005a20:	08005991 	.word	0x08005991

08005a24 <__sfp_lock_acquire>:
 8005a24:	4801      	ldr	r0, [pc, #4]	; (8005a2c <__sfp_lock_acquire+0x8>)
 8005a26:	f000 b920 	b.w	8005c6a <__retarget_lock_acquire_recursive>
 8005a2a:	bf00      	nop
 8005a2c:	20000569 	.word	0x20000569

08005a30 <__sfp_lock_release>:
 8005a30:	4801      	ldr	r0, [pc, #4]	; (8005a38 <__sfp_lock_release+0x8>)
 8005a32:	f000 b91b 	b.w	8005c6c <__retarget_lock_release_recursive>
 8005a36:	bf00      	nop
 8005a38:	20000569 	.word	0x20000569

08005a3c <__sinit>:
 8005a3c:	b510      	push	{r4, lr}
 8005a3e:	4604      	mov	r4, r0
 8005a40:	f7ff fff0 	bl	8005a24 <__sfp_lock_acquire>
 8005a44:	6a23      	ldr	r3, [r4, #32]
 8005a46:	b11b      	cbz	r3, 8005a50 <__sinit+0x14>
 8005a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a4c:	f7ff bff0 	b.w	8005a30 <__sfp_lock_release>
 8005a50:	4b04      	ldr	r3, [pc, #16]	; (8005a64 <__sinit+0x28>)
 8005a52:	6223      	str	r3, [r4, #32]
 8005a54:	4b04      	ldr	r3, [pc, #16]	; (8005a68 <__sinit+0x2c>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1f5      	bne.n	8005a48 <__sinit+0xc>
 8005a5c:	f7ff ffc4 	bl	80059e8 <global_stdio_init.part.0>
 8005a60:	e7f2      	b.n	8005a48 <__sinit+0xc>
 8005a62:	bf00      	nop
 8005a64:	080059a9 	.word	0x080059a9
 8005a68:	20000560 	.word	0x20000560

08005a6c <_fwalk_sglue>:
 8005a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a70:	4607      	mov	r7, r0
 8005a72:	4688      	mov	r8, r1
 8005a74:	4614      	mov	r4, r2
 8005a76:	2600      	movs	r6, #0
 8005a78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a7c:	f1b9 0901 	subs.w	r9, r9, #1
 8005a80:	d505      	bpl.n	8005a8e <_fwalk_sglue+0x22>
 8005a82:	6824      	ldr	r4, [r4, #0]
 8005a84:	2c00      	cmp	r4, #0
 8005a86:	d1f7      	bne.n	8005a78 <_fwalk_sglue+0xc>
 8005a88:	4630      	mov	r0, r6
 8005a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a8e:	89ab      	ldrh	r3, [r5, #12]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d907      	bls.n	8005aa4 <_fwalk_sglue+0x38>
 8005a94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	d003      	beq.n	8005aa4 <_fwalk_sglue+0x38>
 8005a9c:	4629      	mov	r1, r5
 8005a9e:	4638      	mov	r0, r7
 8005aa0:	47c0      	blx	r8
 8005aa2:	4306      	orrs	r6, r0
 8005aa4:	3568      	adds	r5, #104	; 0x68
 8005aa6:	e7e9      	b.n	8005a7c <_fwalk_sglue+0x10>

08005aa8 <siprintf>:
 8005aa8:	b40e      	push	{r1, r2, r3}
 8005aaa:	b500      	push	{lr}
 8005aac:	b09c      	sub	sp, #112	; 0x70
 8005aae:	ab1d      	add	r3, sp, #116	; 0x74
 8005ab0:	9002      	str	r0, [sp, #8]
 8005ab2:	9006      	str	r0, [sp, #24]
 8005ab4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ab8:	4809      	ldr	r0, [pc, #36]	; (8005ae0 <siprintf+0x38>)
 8005aba:	9107      	str	r1, [sp, #28]
 8005abc:	9104      	str	r1, [sp, #16]
 8005abe:	4909      	ldr	r1, [pc, #36]	; (8005ae4 <siprintf+0x3c>)
 8005ac0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ac4:	9105      	str	r1, [sp, #20]
 8005ac6:	6800      	ldr	r0, [r0, #0]
 8005ac8:	9301      	str	r3, [sp, #4]
 8005aca:	a902      	add	r1, sp, #8
 8005acc:	f002 fbf0 	bl	80082b0 <_svfiprintf_r>
 8005ad0:	9b02      	ldr	r3, [sp, #8]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	701a      	strb	r2, [r3, #0]
 8005ad6:	b01c      	add	sp, #112	; 0x70
 8005ad8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005adc:	b003      	add	sp, #12
 8005ade:	4770      	bx	lr
 8005ae0:	20000064 	.word	0x20000064
 8005ae4:	ffff0208 	.word	0xffff0208

08005ae8 <__sread>:
 8005ae8:	b510      	push	{r4, lr}
 8005aea:	460c      	mov	r4, r1
 8005aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005af0:	f000 f86c 	bl	8005bcc <_read_r>
 8005af4:	2800      	cmp	r0, #0
 8005af6:	bfab      	itete	ge
 8005af8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005afa:	89a3      	ldrhlt	r3, [r4, #12]
 8005afc:	181b      	addge	r3, r3, r0
 8005afe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b02:	bfac      	ite	ge
 8005b04:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b06:	81a3      	strhlt	r3, [r4, #12]
 8005b08:	bd10      	pop	{r4, pc}

08005b0a <__swrite>:
 8005b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b0e:	461f      	mov	r7, r3
 8005b10:	898b      	ldrh	r3, [r1, #12]
 8005b12:	05db      	lsls	r3, r3, #23
 8005b14:	4605      	mov	r5, r0
 8005b16:	460c      	mov	r4, r1
 8005b18:	4616      	mov	r6, r2
 8005b1a:	d505      	bpl.n	8005b28 <__swrite+0x1e>
 8005b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b20:	2302      	movs	r3, #2
 8005b22:	2200      	movs	r2, #0
 8005b24:	f000 f840 	bl	8005ba8 <_lseek_r>
 8005b28:	89a3      	ldrh	r3, [r4, #12]
 8005b2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b32:	81a3      	strh	r3, [r4, #12]
 8005b34:	4632      	mov	r2, r6
 8005b36:	463b      	mov	r3, r7
 8005b38:	4628      	mov	r0, r5
 8005b3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b3e:	f000 b857 	b.w	8005bf0 <_write_r>

08005b42 <__sseek>:
 8005b42:	b510      	push	{r4, lr}
 8005b44:	460c      	mov	r4, r1
 8005b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b4a:	f000 f82d 	bl	8005ba8 <_lseek_r>
 8005b4e:	1c43      	adds	r3, r0, #1
 8005b50:	89a3      	ldrh	r3, [r4, #12]
 8005b52:	bf15      	itete	ne
 8005b54:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005b5e:	81a3      	strheq	r3, [r4, #12]
 8005b60:	bf18      	it	ne
 8005b62:	81a3      	strhne	r3, [r4, #12]
 8005b64:	bd10      	pop	{r4, pc}

08005b66 <__sclose>:
 8005b66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b6a:	f000 b80d 	b.w	8005b88 <_close_r>

08005b6e <memset>:
 8005b6e:	4402      	add	r2, r0
 8005b70:	4603      	mov	r3, r0
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d100      	bne.n	8005b78 <memset+0xa>
 8005b76:	4770      	bx	lr
 8005b78:	f803 1b01 	strb.w	r1, [r3], #1
 8005b7c:	e7f9      	b.n	8005b72 <memset+0x4>
	...

08005b80 <_localeconv_r>:
 8005b80:	4800      	ldr	r0, [pc, #0]	; (8005b84 <_localeconv_r+0x4>)
 8005b82:	4770      	bx	lr
 8005b84:	20000158 	.word	0x20000158

08005b88 <_close_r>:
 8005b88:	b538      	push	{r3, r4, r5, lr}
 8005b8a:	4d06      	ldr	r5, [pc, #24]	; (8005ba4 <_close_r+0x1c>)
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	4604      	mov	r4, r0
 8005b90:	4608      	mov	r0, r1
 8005b92:	602b      	str	r3, [r5, #0]
 8005b94:	f7fc f861 	bl	8001c5a <_close>
 8005b98:	1c43      	adds	r3, r0, #1
 8005b9a:	d102      	bne.n	8005ba2 <_close_r+0x1a>
 8005b9c:	682b      	ldr	r3, [r5, #0]
 8005b9e:	b103      	cbz	r3, 8005ba2 <_close_r+0x1a>
 8005ba0:	6023      	str	r3, [r4, #0]
 8005ba2:	bd38      	pop	{r3, r4, r5, pc}
 8005ba4:	20000564 	.word	0x20000564

08005ba8 <_lseek_r>:
 8005ba8:	b538      	push	{r3, r4, r5, lr}
 8005baa:	4d07      	ldr	r5, [pc, #28]	; (8005bc8 <_lseek_r+0x20>)
 8005bac:	4604      	mov	r4, r0
 8005bae:	4608      	mov	r0, r1
 8005bb0:	4611      	mov	r1, r2
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	602a      	str	r2, [r5, #0]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	f7fc f876 	bl	8001ca8 <_lseek>
 8005bbc:	1c43      	adds	r3, r0, #1
 8005bbe:	d102      	bne.n	8005bc6 <_lseek_r+0x1e>
 8005bc0:	682b      	ldr	r3, [r5, #0]
 8005bc2:	b103      	cbz	r3, 8005bc6 <_lseek_r+0x1e>
 8005bc4:	6023      	str	r3, [r4, #0]
 8005bc6:	bd38      	pop	{r3, r4, r5, pc}
 8005bc8:	20000564 	.word	0x20000564

08005bcc <_read_r>:
 8005bcc:	b538      	push	{r3, r4, r5, lr}
 8005bce:	4d07      	ldr	r5, [pc, #28]	; (8005bec <_read_r+0x20>)
 8005bd0:	4604      	mov	r4, r0
 8005bd2:	4608      	mov	r0, r1
 8005bd4:	4611      	mov	r1, r2
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	602a      	str	r2, [r5, #0]
 8005bda:	461a      	mov	r2, r3
 8005bdc:	f7fc f804 	bl	8001be8 <_read>
 8005be0:	1c43      	adds	r3, r0, #1
 8005be2:	d102      	bne.n	8005bea <_read_r+0x1e>
 8005be4:	682b      	ldr	r3, [r5, #0]
 8005be6:	b103      	cbz	r3, 8005bea <_read_r+0x1e>
 8005be8:	6023      	str	r3, [r4, #0]
 8005bea:	bd38      	pop	{r3, r4, r5, pc}
 8005bec:	20000564 	.word	0x20000564

08005bf0 <_write_r>:
 8005bf0:	b538      	push	{r3, r4, r5, lr}
 8005bf2:	4d07      	ldr	r5, [pc, #28]	; (8005c10 <_write_r+0x20>)
 8005bf4:	4604      	mov	r4, r0
 8005bf6:	4608      	mov	r0, r1
 8005bf8:	4611      	mov	r1, r2
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	602a      	str	r2, [r5, #0]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	f7fc f80f 	bl	8001c22 <_write>
 8005c04:	1c43      	adds	r3, r0, #1
 8005c06:	d102      	bne.n	8005c0e <_write_r+0x1e>
 8005c08:	682b      	ldr	r3, [r5, #0]
 8005c0a:	b103      	cbz	r3, 8005c0e <_write_r+0x1e>
 8005c0c:	6023      	str	r3, [r4, #0]
 8005c0e:	bd38      	pop	{r3, r4, r5, pc}
 8005c10:	20000564 	.word	0x20000564

08005c14 <__errno>:
 8005c14:	4b01      	ldr	r3, [pc, #4]	; (8005c1c <__errno+0x8>)
 8005c16:	6818      	ldr	r0, [r3, #0]
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	20000064 	.word	0x20000064

08005c20 <__libc_init_array>:
 8005c20:	b570      	push	{r4, r5, r6, lr}
 8005c22:	4d0d      	ldr	r5, [pc, #52]	; (8005c58 <__libc_init_array+0x38>)
 8005c24:	4c0d      	ldr	r4, [pc, #52]	; (8005c5c <__libc_init_array+0x3c>)
 8005c26:	1b64      	subs	r4, r4, r5
 8005c28:	10a4      	asrs	r4, r4, #2
 8005c2a:	2600      	movs	r6, #0
 8005c2c:	42a6      	cmp	r6, r4
 8005c2e:	d109      	bne.n	8005c44 <__libc_init_array+0x24>
 8005c30:	4d0b      	ldr	r5, [pc, #44]	; (8005c60 <__libc_init_array+0x40>)
 8005c32:	4c0c      	ldr	r4, [pc, #48]	; (8005c64 <__libc_init_array+0x44>)
 8005c34:	f003 fbd8 	bl	80093e8 <_init>
 8005c38:	1b64      	subs	r4, r4, r5
 8005c3a:	10a4      	asrs	r4, r4, #2
 8005c3c:	2600      	movs	r6, #0
 8005c3e:	42a6      	cmp	r6, r4
 8005c40:	d105      	bne.n	8005c4e <__libc_init_array+0x2e>
 8005c42:	bd70      	pop	{r4, r5, r6, pc}
 8005c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c48:	4798      	blx	r3
 8005c4a:	3601      	adds	r6, #1
 8005c4c:	e7ee      	b.n	8005c2c <__libc_init_array+0xc>
 8005c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c52:	4798      	blx	r3
 8005c54:	3601      	adds	r6, #1
 8005c56:	e7f2      	b.n	8005c3e <__libc_init_array+0x1e>
 8005c58:	080098e0 	.word	0x080098e0
 8005c5c:	080098e0 	.word	0x080098e0
 8005c60:	080098e0 	.word	0x080098e0
 8005c64:	080098e4 	.word	0x080098e4

08005c68 <__retarget_lock_init_recursive>:
 8005c68:	4770      	bx	lr

08005c6a <__retarget_lock_acquire_recursive>:
 8005c6a:	4770      	bx	lr

08005c6c <__retarget_lock_release_recursive>:
 8005c6c:	4770      	bx	lr
	...

08005c70 <nanf>:
 8005c70:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005c78 <nanf+0x8>
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	7fc00000 	.word	0x7fc00000

08005c7c <quorem>:
 8005c7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c80:	6903      	ldr	r3, [r0, #16]
 8005c82:	690c      	ldr	r4, [r1, #16]
 8005c84:	42a3      	cmp	r3, r4
 8005c86:	4607      	mov	r7, r0
 8005c88:	db7e      	blt.n	8005d88 <quorem+0x10c>
 8005c8a:	3c01      	subs	r4, #1
 8005c8c:	f101 0814 	add.w	r8, r1, #20
 8005c90:	f100 0514 	add.w	r5, r0, #20
 8005c94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c98:	9301      	str	r3, [sp, #4]
 8005c9a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005caa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005cae:	fbb2 f6f3 	udiv	r6, r2, r3
 8005cb2:	d331      	bcc.n	8005d18 <quorem+0x9c>
 8005cb4:	f04f 0e00 	mov.w	lr, #0
 8005cb8:	4640      	mov	r0, r8
 8005cba:	46ac      	mov	ip, r5
 8005cbc:	46f2      	mov	sl, lr
 8005cbe:	f850 2b04 	ldr.w	r2, [r0], #4
 8005cc2:	b293      	uxth	r3, r2
 8005cc4:	fb06 e303 	mla	r3, r6, r3, lr
 8005cc8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ccc:	0c1a      	lsrs	r2, r3, #16
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	ebaa 0303 	sub.w	r3, sl, r3
 8005cd4:	f8dc a000 	ldr.w	sl, [ip]
 8005cd8:	fa13 f38a 	uxtah	r3, r3, sl
 8005cdc:	fb06 220e 	mla	r2, r6, lr, r2
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	9b00      	ldr	r3, [sp, #0]
 8005ce4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ce8:	b292      	uxth	r2, r2
 8005cea:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005cee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005cf2:	f8bd 3000 	ldrh.w	r3, [sp]
 8005cf6:	4581      	cmp	r9, r0
 8005cf8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cfc:	f84c 3b04 	str.w	r3, [ip], #4
 8005d00:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005d04:	d2db      	bcs.n	8005cbe <quorem+0x42>
 8005d06:	f855 300b 	ldr.w	r3, [r5, fp]
 8005d0a:	b92b      	cbnz	r3, 8005d18 <quorem+0x9c>
 8005d0c:	9b01      	ldr	r3, [sp, #4]
 8005d0e:	3b04      	subs	r3, #4
 8005d10:	429d      	cmp	r5, r3
 8005d12:	461a      	mov	r2, r3
 8005d14:	d32c      	bcc.n	8005d70 <quorem+0xf4>
 8005d16:	613c      	str	r4, [r7, #16]
 8005d18:	4638      	mov	r0, r7
 8005d1a:	f001 f9f1 	bl	8007100 <__mcmp>
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	db22      	blt.n	8005d68 <quorem+0xec>
 8005d22:	3601      	adds	r6, #1
 8005d24:	4629      	mov	r1, r5
 8005d26:	2000      	movs	r0, #0
 8005d28:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d2c:	f8d1 c000 	ldr.w	ip, [r1]
 8005d30:	b293      	uxth	r3, r2
 8005d32:	1ac3      	subs	r3, r0, r3
 8005d34:	0c12      	lsrs	r2, r2, #16
 8005d36:	fa13 f38c 	uxtah	r3, r3, ip
 8005d3a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005d3e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d48:	45c1      	cmp	r9, r8
 8005d4a:	f841 3b04 	str.w	r3, [r1], #4
 8005d4e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005d52:	d2e9      	bcs.n	8005d28 <quorem+0xac>
 8005d54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d5c:	b922      	cbnz	r2, 8005d68 <quorem+0xec>
 8005d5e:	3b04      	subs	r3, #4
 8005d60:	429d      	cmp	r5, r3
 8005d62:	461a      	mov	r2, r3
 8005d64:	d30a      	bcc.n	8005d7c <quorem+0x100>
 8005d66:	613c      	str	r4, [r7, #16]
 8005d68:	4630      	mov	r0, r6
 8005d6a:	b003      	add	sp, #12
 8005d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d70:	6812      	ldr	r2, [r2, #0]
 8005d72:	3b04      	subs	r3, #4
 8005d74:	2a00      	cmp	r2, #0
 8005d76:	d1ce      	bne.n	8005d16 <quorem+0x9a>
 8005d78:	3c01      	subs	r4, #1
 8005d7a:	e7c9      	b.n	8005d10 <quorem+0x94>
 8005d7c:	6812      	ldr	r2, [r2, #0]
 8005d7e:	3b04      	subs	r3, #4
 8005d80:	2a00      	cmp	r2, #0
 8005d82:	d1f0      	bne.n	8005d66 <quorem+0xea>
 8005d84:	3c01      	subs	r4, #1
 8005d86:	e7eb      	b.n	8005d60 <quorem+0xe4>
 8005d88:	2000      	movs	r0, #0
 8005d8a:	e7ee      	b.n	8005d6a <quorem+0xee>
 8005d8c:	0000      	movs	r0, r0
	...

08005d90 <_dtoa_r>:
 8005d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d94:	ed2d 8b04 	vpush	{d8-d9}
 8005d98:	69c5      	ldr	r5, [r0, #28]
 8005d9a:	b093      	sub	sp, #76	; 0x4c
 8005d9c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005da0:	ec57 6b10 	vmov	r6, r7, d0
 8005da4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005da8:	9107      	str	r1, [sp, #28]
 8005daa:	4604      	mov	r4, r0
 8005dac:	920a      	str	r2, [sp, #40]	; 0x28
 8005dae:	930d      	str	r3, [sp, #52]	; 0x34
 8005db0:	b975      	cbnz	r5, 8005dd0 <_dtoa_r+0x40>
 8005db2:	2010      	movs	r0, #16
 8005db4:	f000 fe2a 	bl	8006a0c <malloc>
 8005db8:	4602      	mov	r2, r0
 8005dba:	61e0      	str	r0, [r4, #28]
 8005dbc:	b920      	cbnz	r0, 8005dc8 <_dtoa_r+0x38>
 8005dbe:	4bae      	ldr	r3, [pc, #696]	; (8006078 <_dtoa_r+0x2e8>)
 8005dc0:	21ef      	movs	r1, #239	; 0xef
 8005dc2:	48ae      	ldr	r0, [pc, #696]	; (800607c <_dtoa_r+0x2ec>)
 8005dc4:	f002 fc74 	bl	80086b0 <__assert_func>
 8005dc8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005dcc:	6005      	str	r5, [r0, #0]
 8005dce:	60c5      	str	r5, [r0, #12]
 8005dd0:	69e3      	ldr	r3, [r4, #28]
 8005dd2:	6819      	ldr	r1, [r3, #0]
 8005dd4:	b151      	cbz	r1, 8005dec <_dtoa_r+0x5c>
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	604a      	str	r2, [r1, #4]
 8005dda:	2301      	movs	r3, #1
 8005ddc:	4093      	lsls	r3, r2
 8005dde:	608b      	str	r3, [r1, #8]
 8005de0:	4620      	mov	r0, r4
 8005de2:	f000 ff07 	bl	8006bf4 <_Bfree>
 8005de6:	69e3      	ldr	r3, [r4, #28]
 8005de8:	2200      	movs	r2, #0
 8005dea:	601a      	str	r2, [r3, #0]
 8005dec:	1e3b      	subs	r3, r7, #0
 8005dee:	bfbb      	ittet	lt
 8005df0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005df4:	9303      	strlt	r3, [sp, #12]
 8005df6:	2300      	movge	r3, #0
 8005df8:	2201      	movlt	r2, #1
 8005dfa:	bfac      	ite	ge
 8005dfc:	f8c8 3000 	strge.w	r3, [r8]
 8005e00:	f8c8 2000 	strlt.w	r2, [r8]
 8005e04:	4b9e      	ldr	r3, [pc, #632]	; (8006080 <_dtoa_r+0x2f0>)
 8005e06:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005e0a:	ea33 0308 	bics.w	r3, r3, r8
 8005e0e:	d11b      	bne.n	8005e48 <_dtoa_r+0xb8>
 8005e10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005e12:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e16:	6013      	str	r3, [r2, #0]
 8005e18:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005e1c:	4333      	orrs	r3, r6
 8005e1e:	f000 8593 	beq.w	8006948 <_dtoa_r+0xbb8>
 8005e22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e24:	b963      	cbnz	r3, 8005e40 <_dtoa_r+0xb0>
 8005e26:	4b97      	ldr	r3, [pc, #604]	; (8006084 <_dtoa_r+0x2f4>)
 8005e28:	e027      	b.n	8005e7a <_dtoa_r+0xea>
 8005e2a:	4b97      	ldr	r3, [pc, #604]	; (8006088 <_dtoa_r+0x2f8>)
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	3308      	adds	r3, #8
 8005e30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e32:	6013      	str	r3, [r2, #0]
 8005e34:	9800      	ldr	r0, [sp, #0]
 8005e36:	b013      	add	sp, #76	; 0x4c
 8005e38:	ecbd 8b04 	vpop	{d8-d9}
 8005e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e40:	4b90      	ldr	r3, [pc, #576]	; (8006084 <_dtoa_r+0x2f4>)
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	3303      	adds	r3, #3
 8005e46:	e7f3      	b.n	8005e30 <_dtoa_r+0xa0>
 8005e48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	ec51 0b17 	vmov	r0, r1, d7
 8005e52:	eeb0 8a47 	vmov.f32	s16, s14
 8005e56:	eef0 8a67 	vmov.f32	s17, s15
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	f7fa fe34 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e60:	4681      	mov	r9, r0
 8005e62:	b160      	cbz	r0, 8005e7e <_dtoa_r+0xee>
 8005e64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005e66:	2301      	movs	r3, #1
 8005e68:	6013      	str	r3, [r2, #0]
 8005e6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 8568 	beq.w	8006942 <_dtoa_r+0xbb2>
 8005e72:	4b86      	ldr	r3, [pc, #536]	; (800608c <_dtoa_r+0x2fc>)
 8005e74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e76:	6013      	str	r3, [r2, #0]
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	9300      	str	r3, [sp, #0]
 8005e7c:	e7da      	b.n	8005e34 <_dtoa_r+0xa4>
 8005e7e:	aa10      	add	r2, sp, #64	; 0x40
 8005e80:	a911      	add	r1, sp, #68	; 0x44
 8005e82:	4620      	mov	r0, r4
 8005e84:	eeb0 0a48 	vmov.f32	s0, s16
 8005e88:	eef0 0a68 	vmov.f32	s1, s17
 8005e8c:	f001 fa4e 	bl	800732c <__d2b>
 8005e90:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005e94:	4682      	mov	sl, r0
 8005e96:	2d00      	cmp	r5, #0
 8005e98:	d07f      	beq.n	8005f9a <_dtoa_r+0x20a>
 8005e9a:	ee18 3a90 	vmov	r3, s17
 8005e9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ea2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005ea6:	ec51 0b18 	vmov	r0, r1, d8
 8005eaa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005eae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005eb2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	2200      	movs	r2, #0
 8005eba:	4b75      	ldr	r3, [pc, #468]	; (8006090 <_dtoa_r+0x300>)
 8005ebc:	f7fa f9e4 	bl	8000288 <__aeabi_dsub>
 8005ec0:	a367      	add	r3, pc, #412	; (adr r3, 8006060 <_dtoa_r+0x2d0>)
 8005ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec6:	f7fa fb97 	bl	80005f8 <__aeabi_dmul>
 8005eca:	a367      	add	r3, pc, #412	; (adr r3, 8006068 <_dtoa_r+0x2d8>)
 8005ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed0:	f7fa f9dc 	bl	800028c <__adddf3>
 8005ed4:	4606      	mov	r6, r0
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	460f      	mov	r7, r1
 8005eda:	f7fa fb23 	bl	8000524 <__aeabi_i2d>
 8005ede:	a364      	add	r3, pc, #400	; (adr r3, 8006070 <_dtoa_r+0x2e0>)
 8005ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee4:	f7fa fb88 	bl	80005f8 <__aeabi_dmul>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	4630      	mov	r0, r6
 8005eee:	4639      	mov	r1, r7
 8005ef0:	f7fa f9cc 	bl	800028c <__adddf3>
 8005ef4:	4606      	mov	r6, r0
 8005ef6:	460f      	mov	r7, r1
 8005ef8:	f7fa fe2e 	bl	8000b58 <__aeabi_d2iz>
 8005efc:	2200      	movs	r2, #0
 8005efe:	4683      	mov	fp, r0
 8005f00:	2300      	movs	r3, #0
 8005f02:	4630      	mov	r0, r6
 8005f04:	4639      	mov	r1, r7
 8005f06:	f7fa fde9 	bl	8000adc <__aeabi_dcmplt>
 8005f0a:	b148      	cbz	r0, 8005f20 <_dtoa_r+0x190>
 8005f0c:	4658      	mov	r0, fp
 8005f0e:	f7fa fb09 	bl	8000524 <__aeabi_i2d>
 8005f12:	4632      	mov	r2, r6
 8005f14:	463b      	mov	r3, r7
 8005f16:	f7fa fdd7 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f1a:	b908      	cbnz	r0, 8005f20 <_dtoa_r+0x190>
 8005f1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f20:	f1bb 0f16 	cmp.w	fp, #22
 8005f24:	d857      	bhi.n	8005fd6 <_dtoa_r+0x246>
 8005f26:	4b5b      	ldr	r3, [pc, #364]	; (8006094 <_dtoa_r+0x304>)
 8005f28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f30:	ec51 0b18 	vmov	r0, r1, d8
 8005f34:	f7fa fdd2 	bl	8000adc <__aeabi_dcmplt>
 8005f38:	2800      	cmp	r0, #0
 8005f3a:	d04e      	beq.n	8005fda <_dtoa_r+0x24a>
 8005f3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f40:	2300      	movs	r3, #0
 8005f42:	930c      	str	r3, [sp, #48]	; 0x30
 8005f44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f46:	1b5b      	subs	r3, r3, r5
 8005f48:	1e5a      	subs	r2, r3, #1
 8005f4a:	bf45      	ittet	mi
 8005f4c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005f50:	9305      	strmi	r3, [sp, #20]
 8005f52:	2300      	movpl	r3, #0
 8005f54:	2300      	movmi	r3, #0
 8005f56:	9206      	str	r2, [sp, #24]
 8005f58:	bf54      	ite	pl
 8005f5a:	9305      	strpl	r3, [sp, #20]
 8005f5c:	9306      	strmi	r3, [sp, #24]
 8005f5e:	f1bb 0f00 	cmp.w	fp, #0
 8005f62:	db3c      	blt.n	8005fde <_dtoa_r+0x24e>
 8005f64:	9b06      	ldr	r3, [sp, #24]
 8005f66:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005f6a:	445b      	add	r3, fp
 8005f6c:	9306      	str	r3, [sp, #24]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	9308      	str	r3, [sp, #32]
 8005f72:	9b07      	ldr	r3, [sp, #28]
 8005f74:	2b09      	cmp	r3, #9
 8005f76:	d868      	bhi.n	800604a <_dtoa_r+0x2ba>
 8005f78:	2b05      	cmp	r3, #5
 8005f7a:	bfc4      	itt	gt
 8005f7c:	3b04      	subgt	r3, #4
 8005f7e:	9307      	strgt	r3, [sp, #28]
 8005f80:	9b07      	ldr	r3, [sp, #28]
 8005f82:	f1a3 0302 	sub.w	r3, r3, #2
 8005f86:	bfcc      	ite	gt
 8005f88:	2500      	movgt	r5, #0
 8005f8a:	2501      	movle	r5, #1
 8005f8c:	2b03      	cmp	r3, #3
 8005f8e:	f200 8085 	bhi.w	800609c <_dtoa_r+0x30c>
 8005f92:	e8df f003 	tbb	[pc, r3]
 8005f96:	3b2e      	.short	0x3b2e
 8005f98:	5839      	.short	0x5839
 8005f9a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005f9e:	441d      	add	r5, r3
 8005fa0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005fa4:	2b20      	cmp	r3, #32
 8005fa6:	bfc1      	itttt	gt
 8005fa8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005fac:	fa08 f803 	lslgt.w	r8, r8, r3
 8005fb0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005fb4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005fb8:	bfd6      	itet	le
 8005fba:	f1c3 0320 	rsble	r3, r3, #32
 8005fbe:	ea48 0003 	orrgt.w	r0, r8, r3
 8005fc2:	fa06 f003 	lslle.w	r0, r6, r3
 8005fc6:	f7fa fa9d 	bl	8000504 <__aeabi_ui2d>
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005fd0:	3d01      	subs	r5, #1
 8005fd2:	920e      	str	r2, [sp, #56]	; 0x38
 8005fd4:	e76f      	b.n	8005eb6 <_dtoa_r+0x126>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e7b3      	b.n	8005f42 <_dtoa_r+0x1b2>
 8005fda:	900c      	str	r0, [sp, #48]	; 0x30
 8005fdc:	e7b2      	b.n	8005f44 <_dtoa_r+0x1b4>
 8005fde:	9b05      	ldr	r3, [sp, #20]
 8005fe0:	eba3 030b 	sub.w	r3, r3, fp
 8005fe4:	9305      	str	r3, [sp, #20]
 8005fe6:	f1cb 0300 	rsb	r3, fp, #0
 8005fea:	9308      	str	r3, [sp, #32]
 8005fec:	2300      	movs	r3, #0
 8005fee:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ff0:	e7bf      	b.n	8005f72 <_dtoa_r+0x1e2>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	dc52      	bgt.n	80060a2 <_dtoa_r+0x312>
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	9301      	str	r3, [sp, #4]
 8006000:	9304      	str	r3, [sp, #16]
 8006002:	461a      	mov	r2, r3
 8006004:	920a      	str	r2, [sp, #40]	; 0x28
 8006006:	e00b      	b.n	8006020 <_dtoa_r+0x290>
 8006008:	2301      	movs	r3, #1
 800600a:	e7f3      	b.n	8005ff4 <_dtoa_r+0x264>
 800600c:	2300      	movs	r3, #0
 800600e:	9309      	str	r3, [sp, #36]	; 0x24
 8006010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006012:	445b      	add	r3, fp
 8006014:	9301      	str	r3, [sp, #4]
 8006016:	3301      	adds	r3, #1
 8006018:	2b01      	cmp	r3, #1
 800601a:	9304      	str	r3, [sp, #16]
 800601c:	bfb8      	it	lt
 800601e:	2301      	movlt	r3, #1
 8006020:	69e0      	ldr	r0, [r4, #28]
 8006022:	2100      	movs	r1, #0
 8006024:	2204      	movs	r2, #4
 8006026:	f102 0614 	add.w	r6, r2, #20
 800602a:	429e      	cmp	r6, r3
 800602c:	d93d      	bls.n	80060aa <_dtoa_r+0x31a>
 800602e:	6041      	str	r1, [r0, #4]
 8006030:	4620      	mov	r0, r4
 8006032:	f000 fd9f 	bl	8006b74 <_Balloc>
 8006036:	9000      	str	r0, [sp, #0]
 8006038:	2800      	cmp	r0, #0
 800603a:	d139      	bne.n	80060b0 <_dtoa_r+0x320>
 800603c:	4b16      	ldr	r3, [pc, #88]	; (8006098 <_dtoa_r+0x308>)
 800603e:	4602      	mov	r2, r0
 8006040:	f240 11af 	movw	r1, #431	; 0x1af
 8006044:	e6bd      	b.n	8005dc2 <_dtoa_r+0x32>
 8006046:	2301      	movs	r3, #1
 8006048:	e7e1      	b.n	800600e <_dtoa_r+0x27e>
 800604a:	2501      	movs	r5, #1
 800604c:	2300      	movs	r3, #0
 800604e:	9307      	str	r3, [sp, #28]
 8006050:	9509      	str	r5, [sp, #36]	; 0x24
 8006052:	f04f 33ff 	mov.w	r3, #4294967295
 8006056:	9301      	str	r3, [sp, #4]
 8006058:	9304      	str	r3, [sp, #16]
 800605a:	2200      	movs	r2, #0
 800605c:	2312      	movs	r3, #18
 800605e:	e7d1      	b.n	8006004 <_dtoa_r+0x274>
 8006060:	636f4361 	.word	0x636f4361
 8006064:	3fd287a7 	.word	0x3fd287a7
 8006068:	8b60c8b3 	.word	0x8b60c8b3
 800606c:	3fc68a28 	.word	0x3fc68a28
 8006070:	509f79fb 	.word	0x509f79fb
 8006074:	3fd34413 	.word	0x3fd34413
 8006078:	080094f2 	.word	0x080094f2
 800607c:	08009509 	.word	0x08009509
 8006080:	7ff00000 	.word	0x7ff00000
 8006084:	080094ee 	.word	0x080094ee
 8006088:	080094e5 	.word	0x080094e5
 800608c:	080094bd 	.word	0x080094bd
 8006090:	3ff80000 	.word	0x3ff80000
 8006094:	080095f8 	.word	0x080095f8
 8006098:	08009561 	.word	0x08009561
 800609c:	2301      	movs	r3, #1
 800609e:	9309      	str	r3, [sp, #36]	; 0x24
 80060a0:	e7d7      	b.n	8006052 <_dtoa_r+0x2c2>
 80060a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060a4:	9301      	str	r3, [sp, #4]
 80060a6:	9304      	str	r3, [sp, #16]
 80060a8:	e7ba      	b.n	8006020 <_dtoa_r+0x290>
 80060aa:	3101      	adds	r1, #1
 80060ac:	0052      	lsls	r2, r2, #1
 80060ae:	e7ba      	b.n	8006026 <_dtoa_r+0x296>
 80060b0:	69e3      	ldr	r3, [r4, #28]
 80060b2:	9a00      	ldr	r2, [sp, #0]
 80060b4:	601a      	str	r2, [r3, #0]
 80060b6:	9b04      	ldr	r3, [sp, #16]
 80060b8:	2b0e      	cmp	r3, #14
 80060ba:	f200 80a8 	bhi.w	800620e <_dtoa_r+0x47e>
 80060be:	2d00      	cmp	r5, #0
 80060c0:	f000 80a5 	beq.w	800620e <_dtoa_r+0x47e>
 80060c4:	f1bb 0f00 	cmp.w	fp, #0
 80060c8:	dd38      	ble.n	800613c <_dtoa_r+0x3ac>
 80060ca:	4bc0      	ldr	r3, [pc, #768]	; (80063cc <_dtoa_r+0x63c>)
 80060cc:	f00b 020f 	and.w	r2, fp, #15
 80060d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80060d8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80060dc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80060e0:	d019      	beq.n	8006116 <_dtoa_r+0x386>
 80060e2:	4bbb      	ldr	r3, [pc, #748]	; (80063d0 <_dtoa_r+0x640>)
 80060e4:	ec51 0b18 	vmov	r0, r1, d8
 80060e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80060ec:	f7fa fbae 	bl	800084c <__aeabi_ddiv>
 80060f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060f4:	f008 080f 	and.w	r8, r8, #15
 80060f8:	2503      	movs	r5, #3
 80060fa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80063d0 <_dtoa_r+0x640>
 80060fe:	f1b8 0f00 	cmp.w	r8, #0
 8006102:	d10a      	bne.n	800611a <_dtoa_r+0x38a>
 8006104:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006108:	4632      	mov	r2, r6
 800610a:	463b      	mov	r3, r7
 800610c:	f7fa fb9e 	bl	800084c <__aeabi_ddiv>
 8006110:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006114:	e02b      	b.n	800616e <_dtoa_r+0x3de>
 8006116:	2502      	movs	r5, #2
 8006118:	e7ef      	b.n	80060fa <_dtoa_r+0x36a>
 800611a:	f018 0f01 	tst.w	r8, #1
 800611e:	d008      	beq.n	8006132 <_dtoa_r+0x3a2>
 8006120:	4630      	mov	r0, r6
 8006122:	4639      	mov	r1, r7
 8006124:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006128:	f7fa fa66 	bl	80005f8 <__aeabi_dmul>
 800612c:	3501      	adds	r5, #1
 800612e:	4606      	mov	r6, r0
 8006130:	460f      	mov	r7, r1
 8006132:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006136:	f109 0908 	add.w	r9, r9, #8
 800613a:	e7e0      	b.n	80060fe <_dtoa_r+0x36e>
 800613c:	f000 809f 	beq.w	800627e <_dtoa_r+0x4ee>
 8006140:	f1cb 0600 	rsb	r6, fp, #0
 8006144:	4ba1      	ldr	r3, [pc, #644]	; (80063cc <_dtoa_r+0x63c>)
 8006146:	4fa2      	ldr	r7, [pc, #648]	; (80063d0 <_dtoa_r+0x640>)
 8006148:	f006 020f 	and.w	r2, r6, #15
 800614c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006154:	ec51 0b18 	vmov	r0, r1, d8
 8006158:	f7fa fa4e 	bl	80005f8 <__aeabi_dmul>
 800615c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006160:	1136      	asrs	r6, r6, #4
 8006162:	2300      	movs	r3, #0
 8006164:	2502      	movs	r5, #2
 8006166:	2e00      	cmp	r6, #0
 8006168:	d17e      	bne.n	8006268 <_dtoa_r+0x4d8>
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1d0      	bne.n	8006110 <_dtoa_r+0x380>
 800616e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006170:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 8084 	beq.w	8006282 <_dtoa_r+0x4f2>
 800617a:	4b96      	ldr	r3, [pc, #600]	; (80063d4 <_dtoa_r+0x644>)
 800617c:	2200      	movs	r2, #0
 800617e:	4640      	mov	r0, r8
 8006180:	4649      	mov	r1, r9
 8006182:	f7fa fcab 	bl	8000adc <__aeabi_dcmplt>
 8006186:	2800      	cmp	r0, #0
 8006188:	d07b      	beq.n	8006282 <_dtoa_r+0x4f2>
 800618a:	9b04      	ldr	r3, [sp, #16]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d078      	beq.n	8006282 <_dtoa_r+0x4f2>
 8006190:	9b01      	ldr	r3, [sp, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	dd39      	ble.n	800620a <_dtoa_r+0x47a>
 8006196:	4b90      	ldr	r3, [pc, #576]	; (80063d8 <_dtoa_r+0x648>)
 8006198:	2200      	movs	r2, #0
 800619a:	4640      	mov	r0, r8
 800619c:	4649      	mov	r1, r9
 800619e:	f7fa fa2b 	bl	80005f8 <__aeabi_dmul>
 80061a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061a6:	9e01      	ldr	r6, [sp, #4]
 80061a8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80061ac:	3501      	adds	r5, #1
 80061ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80061b2:	4628      	mov	r0, r5
 80061b4:	f7fa f9b6 	bl	8000524 <__aeabi_i2d>
 80061b8:	4642      	mov	r2, r8
 80061ba:	464b      	mov	r3, r9
 80061bc:	f7fa fa1c 	bl	80005f8 <__aeabi_dmul>
 80061c0:	4b86      	ldr	r3, [pc, #536]	; (80063dc <_dtoa_r+0x64c>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	f7fa f862 	bl	800028c <__adddf3>
 80061c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80061cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061d0:	9303      	str	r3, [sp, #12]
 80061d2:	2e00      	cmp	r6, #0
 80061d4:	d158      	bne.n	8006288 <_dtoa_r+0x4f8>
 80061d6:	4b82      	ldr	r3, [pc, #520]	; (80063e0 <_dtoa_r+0x650>)
 80061d8:	2200      	movs	r2, #0
 80061da:	4640      	mov	r0, r8
 80061dc:	4649      	mov	r1, r9
 80061de:	f7fa f853 	bl	8000288 <__aeabi_dsub>
 80061e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061e6:	4680      	mov	r8, r0
 80061e8:	4689      	mov	r9, r1
 80061ea:	f7fa fc95 	bl	8000b18 <__aeabi_dcmpgt>
 80061ee:	2800      	cmp	r0, #0
 80061f0:	f040 8296 	bne.w	8006720 <_dtoa_r+0x990>
 80061f4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80061f8:	4640      	mov	r0, r8
 80061fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80061fe:	4649      	mov	r1, r9
 8006200:	f7fa fc6c 	bl	8000adc <__aeabi_dcmplt>
 8006204:	2800      	cmp	r0, #0
 8006206:	f040 8289 	bne.w	800671c <_dtoa_r+0x98c>
 800620a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800620e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006210:	2b00      	cmp	r3, #0
 8006212:	f2c0 814e 	blt.w	80064b2 <_dtoa_r+0x722>
 8006216:	f1bb 0f0e 	cmp.w	fp, #14
 800621a:	f300 814a 	bgt.w	80064b2 <_dtoa_r+0x722>
 800621e:	4b6b      	ldr	r3, [pc, #428]	; (80063cc <_dtoa_r+0x63c>)
 8006220:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006224:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800622a:	2b00      	cmp	r3, #0
 800622c:	f280 80dc 	bge.w	80063e8 <_dtoa_r+0x658>
 8006230:	9b04      	ldr	r3, [sp, #16]
 8006232:	2b00      	cmp	r3, #0
 8006234:	f300 80d8 	bgt.w	80063e8 <_dtoa_r+0x658>
 8006238:	f040 826f 	bne.w	800671a <_dtoa_r+0x98a>
 800623c:	4b68      	ldr	r3, [pc, #416]	; (80063e0 <_dtoa_r+0x650>)
 800623e:	2200      	movs	r2, #0
 8006240:	4640      	mov	r0, r8
 8006242:	4649      	mov	r1, r9
 8006244:	f7fa f9d8 	bl	80005f8 <__aeabi_dmul>
 8006248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800624c:	f7fa fc5a 	bl	8000b04 <__aeabi_dcmpge>
 8006250:	9e04      	ldr	r6, [sp, #16]
 8006252:	4637      	mov	r7, r6
 8006254:	2800      	cmp	r0, #0
 8006256:	f040 8245 	bne.w	80066e4 <_dtoa_r+0x954>
 800625a:	9d00      	ldr	r5, [sp, #0]
 800625c:	2331      	movs	r3, #49	; 0x31
 800625e:	f805 3b01 	strb.w	r3, [r5], #1
 8006262:	f10b 0b01 	add.w	fp, fp, #1
 8006266:	e241      	b.n	80066ec <_dtoa_r+0x95c>
 8006268:	07f2      	lsls	r2, r6, #31
 800626a:	d505      	bpl.n	8006278 <_dtoa_r+0x4e8>
 800626c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006270:	f7fa f9c2 	bl	80005f8 <__aeabi_dmul>
 8006274:	3501      	adds	r5, #1
 8006276:	2301      	movs	r3, #1
 8006278:	1076      	asrs	r6, r6, #1
 800627a:	3708      	adds	r7, #8
 800627c:	e773      	b.n	8006166 <_dtoa_r+0x3d6>
 800627e:	2502      	movs	r5, #2
 8006280:	e775      	b.n	800616e <_dtoa_r+0x3de>
 8006282:	9e04      	ldr	r6, [sp, #16]
 8006284:	465f      	mov	r7, fp
 8006286:	e792      	b.n	80061ae <_dtoa_r+0x41e>
 8006288:	9900      	ldr	r1, [sp, #0]
 800628a:	4b50      	ldr	r3, [pc, #320]	; (80063cc <_dtoa_r+0x63c>)
 800628c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006290:	4431      	add	r1, r6
 8006292:	9102      	str	r1, [sp, #8]
 8006294:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006296:	eeb0 9a47 	vmov.f32	s18, s14
 800629a:	eef0 9a67 	vmov.f32	s19, s15
 800629e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80062a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80062a6:	2900      	cmp	r1, #0
 80062a8:	d044      	beq.n	8006334 <_dtoa_r+0x5a4>
 80062aa:	494e      	ldr	r1, [pc, #312]	; (80063e4 <_dtoa_r+0x654>)
 80062ac:	2000      	movs	r0, #0
 80062ae:	f7fa facd 	bl	800084c <__aeabi_ddiv>
 80062b2:	ec53 2b19 	vmov	r2, r3, d9
 80062b6:	f7f9 ffe7 	bl	8000288 <__aeabi_dsub>
 80062ba:	9d00      	ldr	r5, [sp, #0]
 80062bc:	ec41 0b19 	vmov	d9, r0, r1
 80062c0:	4649      	mov	r1, r9
 80062c2:	4640      	mov	r0, r8
 80062c4:	f7fa fc48 	bl	8000b58 <__aeabi_d2iz>
 80062c8:	4606      	mov	r6, r0
 80062ca:	f7fa f92b 	bl	8000524 <__aeabi_i2d>
 80062ce:	4602      	mov	r2, r0
 80062d0:	460b      	mov	r3, r1
 80062d2:	4640      	mov	r0, r8
 80062d4:	4649      	mov	r1, r9
 80062d6:	f7f9 ffd7 	bl	8000288 <__aeabi_dsub>
 80062da:	3630      	adds	r6, #48	; 0x30
 80062dc:	f805 6b01 	strb.w	r6, [r5], #1
 80062e0:	ec53 2b19 	vmov	r2, r3, d9
 80062e4:	4680      	mov	r8, r0
 80062e6:	4689      	mov	r9, r1
 80062e8:	f7fa fbf8 	bl	8000adc <__aeabi_dcmplt>
 80062ec:	2800      	cmp	r0, #0
 80062ee:	d164      	bne.n	80063ba <_dtoa_r+0x62a>
 80062f0:	4642      	mov	r2, r8
 80062f2:	464b      	mov	r3, r9
 80062f4:	4937      	ldr	r1, [pc, #220]	; (80063d4 <_dtoa_r+0x644>)
 80062f6:	2000      	movs	r0, #0
 80062f8:	f7f9 ffc6 	bl	8000288 <__aeabi_dsub>
 80062fc:	ec53 2b19 	vmov	r2, r3, d9
 8006300:	f7fa fbec 	bl	8000adc <__aeabi_dcmplt>
 8006304:	2800      	cmp	r0, #0
 8006306:	f040 80b6 	bne.w	8006476 <_dtoa_r+0x6e6>
 800630a:	9b02      	ldr	r3, [sp, #8]
 800630c:	429d      	cmp	r5, r3
 800630e:	f43f af7c 	beq.w	800620a <_dtoa_r+0x47a>
 8006312:	4b31      	ldr	r3, [pc, #196]	; (80063d8 <_dtoa_r+0x648>)
 8006314:	ec51 0b19 	vmov	r0, r1, d9
 8006318:	2200      	movs	r2, #0
 800631a:	f7fa f96d 	bl	80005f8 <__aeabi_dmul>
 800631e:	4b2e      	ldr	r3, [pc, #184]	; (80063d8 <_dtoa_r+0x648>)
 8006320:	ec41 0b19 	vmov	d9, r0, r1
 8006324:	2200      	movs	r2, #0
 8006326:	4640      	mov	r0, r8
 8006328:	4649      	mov	r1, r9
 800632a:	f7fa f965 	bl	80005f8 <__aeabi_dmul>
 800632e:	4680      	mov	r8, r0
 8006330:	4689      	mov	r9, r1
 8006332:	e7c5      	b.n	80062c0 <_dtoa_r+0x530>
 8006334:	ec51 0b17 	vmov	r0, r1, d7
 8006338:	f7fa f95e 	bl	80005f8 <__aeabi_dmul>
 800633c:	9b02      	ldr	r3, [sp, #8]
 800633e:	9d00      	ldr	r5, [sp, #0]
 8006340:	930f      	str	r3, [sp, #60]	; 0x3c
 8006342:	ec41 0b19 	vmov	d9, r0, r1
 8006346:	4649      	mov	r1, r9
 8006348:	4640      	mov	r0, r8
 800634a:	f7fa fc05 	bl	8000b58 <__aeabi_d2iz>
 800634e:	4606      	mov	r6, r0
 8006350:	f7fa f8e8 	bl	8000524 <__aeabi_i2d>
 8006354:	3630      	adds	r6, #48	; 0x30
 8006356:	4602      	mov	r2, r0
 8006358:	460b      	mov	r3, r1
 800635a:	4640      	mov	r0, r8
 800635c:	4649      	mov	r1, r9
 800635e:	f7f9 ff93 	bl	8000288 <__aeabi_dsub>
 8006362:	f805 6b01 	strb.w	r6, [r5], #1
 8006366:	9b02      	ldr	r3, [sp, #8]
 8006368:	429d      	cmp	r5, r3
 800636a:	4680      	mov	r8, r0
 800636c:	4689      	mov	r9, r1
 800636e:	f04f 0200 	mov.w	r2, #0
 8006372:	d124      	bne.n	80063be <_dtoa_r+0x62e>
 8006374:	4b1b      	ldr	r3, [pc, #108]	; (80063e4 <_dtoa_r+0x654>)
 8006376:	ec51 0b19 	vmov	r0, r1, d9
 800637a:	f7f9 ff87 	bl	800028c <__adddf3>
 800637e:	4602      	mov	r2, r0
 8006380:	460b      	mov	r3, r1
 8006382:	4640      	mov	r0, r8
 8006384:	4649      	mov	r1, r9
 8006386:	f7fa fbc7 	bl	8000b18 <__aeabi_dcmpgt>
 800638a:	2800      	cmp	r0, #0
 800638c:	d173      	bne.n	8006476 <_dtoa_r+0x6e6>
 800638e:	ec53 2b19 	vmov	r2, r3, d9
 8006392:	4914      	ldr	r1, [pc, #80]	; (80063e4 <_dtoa_r+0x654>)
 8006394:	2000      	movs	r0, #0
 8006396:	f7f9 ff77 	bl	8000288 <__aeabi_dsub>
 800639a:	4602      	mov	r2, r0
 800639c:	460b      	mov	r3, r1
 800639e:	4640      	mov	r0, r8
 80063a0:	4649      	mov	r1, r9
 80063a2:	f7fa fb9b 	bl	8000adc <__aeabi_dcmplt>
 80063a6:	2800      	cmp	r0, #0
 80063a8:	f43f af2f 	beq.w	800620a <_dtoa_r+0x47a>
 80063ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80063ae:	1e6b      	subs	r3, r5, #1
 80063b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80063b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80063b6:	2b30      	cmp	r3, #48	; 0x30
 80063b8:	d0f8      	beq.n	80063ac <_dtoa_r+0x61c>
 80063ba:	46bb      	mov	fp, r7
 80063bc:	e04a      	b.n	8006454 <_dtoa_r+0x6c4>
 80063be:	4b06      	ldr	r3, [pc, #24]	; (80063d8 <_dtoa_r+0x648>)
 80063c0:	f7fa f91a 	bl	80005f8 <__aeabi_dmul>
 80063c4:	4680      	mov	r8, r0
 80063c6:	4689      	mov	r9, r1
 80063c8:	e7bd      	b.n	8006346 <_dtoa_r+0x5b6>
 80063ca:	bf00      	nop
 80063cc:	080095f8 	.word	0x080095f8
 80063d0:	080095d0 	.word	0x080095d0
 80063d4:	3ff00000 	.word	0x3ff00000
 80063d8:	40240000 	.word	0x40240000
 80063dc:	401c0000 	.word	0x401c0000
 80063e0:	40140000 	.word	0x40140000
 80063e4:	3fe00000 	.word	0x3fe00000
 80063e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80063ec:	9d00      	ldr	r5, [sp, #0]
 80063ee:	4642      	mov	r2, r8
 80063f0:	464b      	mov	r3, r9
 80063f2:	4630      	mov	r0, r6
 80063f4:	4639      	mov	r1, r7
 80063f6:	f7fa fa29 	bl	800084c <__aeabi_ddiv>
 80063fa:	f7fa fbad 	bl	8000b58 <__aeabi_d2iz>
 80063fe:	9001      	str	r0, [sp, #4]
 8006400:	f7fa f890 	bl	8000524 <__aeabi_i2d>
 8006404:	4642      	mov	r2, r8
 8006406:	464b      	mov	r3, r9
 8006408:	f7fa f8f6 	bl	80005f8 <__aeabi_dmul>
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	4630      	mov	r0, r6
 8006412:	4639      	mov	r1, r7
 8006414:	f7f9 ff38 	bl	8000288 <__aeabi_dsub>
 8006418:	9e01      	ldr	r6, [sp, #4]
 800641a:	9f04      	ldr	r7, [sp, #16]
 800641c:	3630      	adds	r6, #48	; 0x30
 800641e:	f805 6b01 	strb.w	r6, [r5], #1
 8006422:	9e00      	ldr	r6, [sp, #0]
 8006424:	1bae      	subs	r6, r5, r6
 8006426:	42b7      	cmp	r7, r6
 8006428:	4602      	mov	r2, r0
 800642a:	460b      	mov	r3, r1
 800642c:	d134      	bne.n	8006498 <_dtoa_r+0x708>
 800642e:	f7f9 ff2d 	bl	800028c <__adddf3>
 8006432:	4642      	mov	r2, r8
 8006434:	464b      	mov	r3, r9
 8006436:	4606      	mov	r6, r0
 8006438:	460f      	mov	r7, r1
 800643a:	f7fa fb6d 	bl	8000b18 <__aeabi_dcmpgt>
 800643e:	b9c8      	cbnz	r0, 8006474 <_dtoa_r+0x6e4>
 8006440:	4642      	mov	r2, r8
 8006442:	464b      	mov	r3, r9
 8006444:	4630      	mov	r0, r6
 8006446:	4639      	mov	r1, r7
 8006448:	f7fa fb3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800644c:	b110      	cbz	r0, 8006454 <_dtoa_r+0x6c4>
 800644e:	9b01      	ldr	r3, [sp, #4]
 8006450:	07db      	lsls	r3, r3, #31
 8006452:	d40f      	bmi.n	8006474 <_dtoa_r+0x6e4>
 8006454:	4651      	mov	r1, sl
 8006456:	4620      	mov	r0, r4
 8006458:	f000 fbcc 	bl	8006bf4 <_Bfree>
 800645c:	2300      	movs	r3, #0
 800645e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006460:	702b      	strb	r3, [r5, #0]
 8006462:	f10b 0301 	add.w	r3, fp, #1
 8006466:	6013      	str	r3, [r2, #0]
 8006468:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800646a:	2b00      	cmp	r3, #0
 800646c:	f43f ace2 	beq.w	8005e34 <_dtoa_r+0xa4>
 8006470:	601d      	str	r5, [r3, #0]
 8006472:	e4df      	b.n	8005e34 <_dtoa_r+0xa4>
 8006474:	465f      	mov	r7, fp
 8006476:	462b      	mov	r3, r5
 8006478:	461d      	mov	r5, r3
 800647a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800647e:	2a39      	cmp	r2, #57	; 0x39
 8006480:	d106      	bne.n	8006490 <_dtoa_r+0x700>
 8006482:	9a00      	ldr	r2, [sp, #0]
 8006484:	429a      	cmp	r2, r3
 8006486:	d1f7      	bne.n	8006478 <_dtoa_r+0x6e8>
 8006488:	9900      	ldr	r1, [sp, #0]
 800648a:	2230      	movs	r2, #48	; 0x30
 800648c:	3701      	adds	r7, #1
 800648e:	700a      	strb	r2, [r1, #0]
 8006490:	781a      	ldrb	r2, [r3, #0]
 8006492:	3201      	adds	r2, #1
 8006494:	701a      	strb	r2, [r3, #0]
 8006496:	e790      	b.n	80063ba <_dtoa_r+0x62a>
 8006498:	4ba3      	ldr	r3, [pc, #652]	; (8006728 <_dtoa_r+0x998>)
 800649a:	2200      	movs	r2, #0
 800649c:	f7fa f8ac 	bl	80005f8 <__aeabi_dmul>
 80064a0:	2200      	movs	r2, #0
 80064a2:	2300      	movs	r3, #0
 80064a4:	4606      	mov	r6, r0
 80064a6:	460f      	mov	r7, r1
 80064a8:	f7fa fb0e 	bl	8000ac8 <__aeabi_dcmpeq>
 80064ac:	2800      	cmp	r0, #0
 80064ae:	d09e      	beq.n	80063ee <_dtoa_r+0x65e>
 80064b0:	e7d0      	b.n	8006454 <_dtoa_r+0x6c4>
 80064b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064b4:	2a00      	cmp	r2, #0
 80064b6:	f000 80ca 	beq.w	800664e <_dtoa_r+0x8be>
 80064ba:	9a07      	ldr	r2, [sp, #28]
 80064bc:	2a01      	cmp	r2, #1
 80064be:	f300 80ad 	bgt.w	800661c <_dtoa_r+0x88c>
 80064c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064c4:	2a00      	cmp	r2, #0
 80064c6:	f000 80a5 	beq.w	8006614 <_dtoa_r+0x884>
 80064ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80064ce:	9e08      	ldr	r6, [sp, #32]
 80064d0:	9d05      	ldr	r5, [sp, #20]
 80064d2:	9a05      	ldr	r2, [sp, #20]
 80064d4:	441a      	add	r2, r3
 80064d6:	9205      	str	r2, [sp, #20]
 80064d8:	9a06      	ldr	r2, [sp, #24]
 80064da:	2101      	movs	r1, #1
 80064dc:	441a      	add	r2, r3
 80064de:	4620      	mov	r0, r4
 80064e0:	9206      	str	r2, [sp, #24]
 80064e2:	f000 fc87 	bl	8006df4 <__i2b>
 80064e6:	4607      	mov	r7, r0
 80064e8:	b165      	cbz	r5, 8006504 <_dtoa_r+0x774>
 80064ea:	9b06      	ldr	r3, [sp, #24]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	dd09      	ble.n	8006504 <_dtoa_r+0x774>
 80064f0:	42ab      	cmp	r3, r5
 80064f2:	9a05      	ldr	r2, [sp, #20]
 80064f4:	bfa8      	it	ge
 80064f6:	462b      	movge	r3, r5
 80064f8:	1ad2      	subs	r2, r2, r3
 80064fa:	9205      	str	r2, [sp, #20]
 80064fc:	9a06      	ldr	r2, [sp, #24]
 80064fe:	1aed      	subs	r5, r5, r3
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	9306      	str	r3, [sp, #24]
 8006504:	9b08      	ldr	r3, [sp, #32]
 8006506:	b1f3      	cbz	r3, 8006546 <_dtoa_r+0x7b6>
 8006508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 80a3 	beq.w	8006656 <_dtoa_r+0x8c6>
 8006510:	2e00      	cmp	r6, #0
 8006512:	dd10      	ble.n	8006536 <_dtoa_r+0x7a6>
 8006514:	4639      	mov	r1, r7
 8006516:	4632      	mov	r2, r6
 8006518:	4620      	mov	r0, r4
 800651a:	f000 fd2b 	bl	8006f74 <__pow5mult>
 800651e:	4652      	mov	r2, sl
 8006520:	4601      	mov	r1, r0
 8006522:	4607      	mov	r7, r0
 8006524:	4620      	mov	r0, r4
 8006526:	f000 fc7b 	bl	8006e20 <__multiply>
 800652a:	4651      	mov	r1, sl
 800652c:	4680      	mov	r8, r0
 800652e:	4620      	mov	r0, r4
 8006530:	f000 fb60 	bl	8006bf4 <_Bfree>
 8006534:	46c2      	mov	sl, r8
 8006536:	9b08      	ldr	r3, [sp, #32]
 8006538:	1b9a      	subs	r2, r3, r6
 800653a:	d004      	beq.n	8006546 <_dtoa_r+0x7b6>
 800653c:	4651      	mov	r1, sl
 800653e:	4620      	mov	r0, r4
 8006540:	f000 fd18 	bl	8006f74 <__pow5mult>
 8006544:	4682      	mov	sl, r0
 8006546:	2101      	movs	r1, #1
 8006548:	4620      	mov	r0, r4
 800654a:	f000 fc53 	bl	8006df4 <__i2b>
 800654e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006550:	2b00      	cmp	r3, #0
 8006552:	4606      	mov	r6, r0
 8006554:	f340 8081 	ble.w	800665a <_dtoa_r+0x8ca>
 8006558:	461a      	mov	r2, r3
 800655a:	4601      	mov	r1, r0
 800655c:	4620      	mov	r0, r4
 800655e:	f000 fd09 	bl	8006f74 <__pow5mult>
 8006562:	9b07      	ldr	r3, [sp, #28]
 8006564:	2b01      	cmp	r3, #1
 8006566:	4606      	mov	r6, r0
 8006568:	dd7a      	ble.n	8006660 <_dtoa_r+0x8d0>
 800656a:	f04f 0800 	mov.w	r8, #0
 800656e:	6933      	ldr	r3, [r6, #16]
 8006570:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006574:	6918      	ldr	r0, [r3, #16]
 8006576:	f000 fbef 	bl	8006d58 <__hi0bits>
 800657a:	f1c0 0020 	rsb	r0, r0, #32
 800657e:	9b06      	ldr	r3, [sp, #24]
 8006580:	4418      	add	r0, r3
 8006582:	f010 001f 	ands.w	r0, r0, #31
 8006586:	f000 8094 	beq.w	80066b2 <_dtoa_r+0x922>
 800658a:	f1c0 0320 	rsb	r3, r0, #32
 800658e:	2b04      	cmp	r3, #4
 8006590:	f340 8085 	ble.w	800669e <_dtoa_r+0x90e>
 8006594:	9b05      	ldr	r3, [sp, #20]
 8006596:	f1c0 001c 	rsb	r0, r0, #28
 800659a:	4403      	add	r3, r0
 800659c:	9305      	str	r3, [sp, #20]
 800659e:	9b06      	ldr	r3, [sp, #24]
 80065a0:	4403      	add	r3, r0
 80065a2:	4405      	add	r5, r0
 80065a4:	9306      	str	r3, [sp, #24]
 80065a6:	9b05      	ldr	r3, [sp, #20]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	dd05      	ble.n	80065b8 <_dtoa_r+0x828>
 80065ac:	4651      	mov	r1, sl
 80065ae:	461a      	mov	r2, r3
 80065b0:	4620      	mov	r0, r4
 80065b2:	f000 fd39 	bl	8007028 <__lshift>
 80065b6:	4682      	mov	sl, r0
 80065b8:	9b06      	ldr	r3, [sp, #24]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	dd05      	ble.n	80065ca <_dtoa_r+0x83a>
 80065be:	4631      	mov	r1, r6
 80065c0:	461a      	mov	r2, r3
 80065c2:	4620      	mov	r0, r4
 80065c4:	f000 fd30 	bl	8007028 <__lshift>
 80065c8:	4606      	mov	r6, r0
 80065ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d072      	beq.n	80066b6 <_dtoa_r+0x926>
 80065d0:	4631      	mov	r1, r6
 80065d2:	4650      	mov	r0, sl
 80065d4:	f000 fd94 	bl	8007100 <__mcmp>
 80065d8:	2800      	cmp	r0, #0
 80065da:	da6c      	bge.n	80066b6 <_dtoa_r+0x926>
 80065dc:	2300      	movs	r3, #0
 80065de:	4651      	mov	r1, sl
 80065e0:	220a      	movs	r2, #10
 80065e2:	4620      	mov	r0, r4
 80065e4:	f000 fb28 	bl	8006c38 <__multadd>
 80065e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80065ee:	4682      	mov	sl, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f000 81b0 	beq.w	8006956 <_dtoa_r+0xbc6>
 80065f6:	2300      	movs	r3, #0
 80065f8:	4639      	mov	r1, r7
 80065fa:	220a      	movs	r2, #10
 80065fc:	4620      	mov	r0, r4
 80065fe:	f000 fb1b 	bl	8006c38 <__multadd>
 8006602:	9b01      	ldr	r3, [sp, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	4607      	mov	r7, r0
 8006608:	f300 8096 	bgt.w	8006738 <_dtoa_r+0x9a8>
 800660c:	9b07      	ldr	r3, [sp, #28]
 800660e:	2b02      	cmp	r3, #2
 8006610:	dc59      	bgt.n	80066c6 <_dtoa_r+0x936>
 8006612:	e091      	b.n	8006738 <_dtoa_r+0x9a8>
 8006614:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006616:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800661a:	e758      	b.n	80064ce <_dtoa_r+0x73e>
 800661c:	9b04      	ldr	r3, [sp, #16]
 800661e:	1e5e      	subs	r6, r3, #1
 8006620:	9b08      	ldr	r3, [sp, #32]
 8006622:	42b3      	cmp	r3, r6
 8006624:	bfbf      	itttt	lt
 8006626:	9b08      	ldrlt	r3, [sp, #32]
 8006628:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800662a:	9608      	strlt	r6, [sp, #32]
 800662c:	1af3      	sublt	r3, r6, r3
 800662e:	bfb4      	ite	lt
 8006630:	18d2      	addlt	r2, r2, r3
 8006632:	1b9e      	subge	r6, r3, r6
 8006634:	9b04      	ldr	r3, [sp, #16]
 8006636:	bfbc      	itt	lt
 8006638:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800663a:	2600      	movlt	r6, #0
 800663c:	2b00      	cmp	r3, #0
 800663e:	bfb7      	itett	lt
 8006640:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006644:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006648:	1a9d      	sublt	r5, r3, r2
 800664a:	2300      	movlt	r3, #0
 800664c:	e741      	b.n	80064d2 <_dtoa_r+0x742>
 800664e:	9e08      	ldr	r6, [sp, #32]
 8006650:	9d05      	ldr	r5, [sp, #20]
 8006652:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006654:	e748      	b.n	80064e8 <_dtoa_r+0x758>
 8006656:	9a08      	ldr	r2, [sp, #32]
 8006658:	e770      	b.n	800653c <_dtoa_r+0x7ac>
 800665a:	9b07      	ldr	r3, [sp, #28]
 800665c:	2b01      	cmp	r3, #1
 800665e:	dc19      	bgt.n	8006694 <_dtoa_r+0x904>
 8006660:	9b02      	ldr	r3, [sp, #8]
 8006662:	b9bb      	cbnz	r3, 8006694 <_dtoa_r+0x904>
 8006664:	9b03      	ldr	r3, [sp, #12]
 8006666:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800666a:	b99b      	cbnz	r3, 8006694 <_dtoa_r+0x904>
 800666c:	9b03      	ldr	r3, [sp, #12]
 800666e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006672:	0d1b      	lsrs	r3, r3, #20
 8006674:	051b      	lsls	r3, r3, #20
 8006676:	b183      	cbz	r3, 800669a <_dtoa_r+0x90a>
 8006678:	9b05      	ldr	r3, [sp, #20]
 800667a:	3301      	adds	r3, #1
 800667c:	9305      	str	r3, [sp, #20]
 800667e:	9b06      	ldr	r3, [sp, #24]
 8006680:	3301      	adds	r3, #1
 8006682:	9306      	str	r3, [sp, #24]
 8006684:	f04f 0801 	mov.w	r8, #1
 8006688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800668a:	2b00      	cmp	r3, #0
 800668c:	f47f af6f 	bne.w	800656e <_dtoa_r+0x7de>
 8006690:	2001      	movs	r0, #1
 8006692:	e774      	b.n	800657e <_dtoa_r+0x7ee>
 8006694:	f04f 0800 	mov.w	r8, #0
 8006698:	e7f6      	b.n	8006688 <_dtoa_r+0x8f8>
 800669a:	4698      	mov	r8, r3
 800669c:	e7f4      	b.n	8006688 <_dtoa_r+0x8f8>
 800669e:	d082      	beq.n	80065a6 <_dtoa_r+0x816>
 80066a0:	9a05      	ldr	r2, [sp, #20]
 80066a2:	331c      	adds	r3, #28
 80066a4:	441a      	add	r2, r3
 80066a6:	9205      	str	r2, [sp, #20]
 80066a8:	9a06      	ldr	r2, [sp, #24]
 80066aa:	441a      	add	r2, r3
 80066ac:	441d      	add	r5, r3
 80066ae:	9206      	str	r2, [sp, #24]
 80066b0:	e779      	b.n	80065a6 <_dtoa_r+0x816>
 80066b2:	4603      	mov	r3, r0
 80066b4:	e7f4      	b.n	80066a0 <_dtoa_r+0x910>
 80066b6:	9b04      	ldr	r3, [sp, #16]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	dc37      	bgt.n	800672c <_dtoa_r+0x99c>
 80066bc:	9b07      	ldr	r3, [sp, #28]
 80066be:	2b02      	cmp	r3, #2
 80066c0:	dd34      	ble.n	800672c <_dtoa_r+0x99c>
 80066c2:	9b04      	ldr	r3, [sp, #16]
 80066c4:	9301      	str	r3, [sp, #4]
 80066c6:	9b01      	ldr	r3, [sp, #4]
 80066c8:	b963      	cbnz	r3, 80066e4 <_dtoa_r+0x954>
 80066ca:	4631      	mov	r1, r6
 80066cc:	2205      	movs	r2, #5
 80066ce:	4620      	mov	r0, r4
 80066d0:	f000 fab2 	bl	8006c38 <__multadd>
 80066d4:	4601      	mov	r1, r0
 80066d6:	4606      	mov	r6, r0
 80066d8:	4650      	mov	r0, sl
 80066da:	f000 fd11 	bl	8007100 <__mcmp>
 80066de:	2800      	cmp	r0, #0
 80066e0:	f73f adbb 	bgt.w	800625a <_dtoa_r+0x4ca>
 80066e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066e6:	9d00      	ldr	r5, [sp, #0]
 80066e8:	ea6f 0b03 	mvn.w	fp, r3
 80066ec:	f04f 0800 	mov.w	r8, #0
 80066f0:	4631      	mov	r1, r6
 80066f2:	4620      	mov	r0, r4
 80066f4:	f000 fa7e 	bl	8006bf4 <_Bfree>
 80066f8:	2f00      	cmp	r7, #0
 80066fa:	f43f aeab 	beq.w	8006454 <_dtoa_r+0x6c4>
 80066fe:	f1b8 0f00 	cmp.w	r8, #0
 8006702:	d005      	beq.n	8006710 <_dtoa_r+0x980>
 8006704:	45b8      	cmp	r8, r7
 8006706:	d003      	beq.n	8006710 <_dtoa_r+0x980>
 8006708:	4641      	mov	r1, r8
 800670a:	4620      	mov	r0, r4
 800670c:	f000 fa72 	bl	8006bf4 <_Bfree>
 8006710:	4639      	mov	r1, r7
 8006712:	4620      	mov	r0, r4
 8006714:	f000 fa6e 	bl	8006bf4 <_Bfree>
 8006718:	e69c      	b.n	8006454 <_dtoa_r+0x6c4>
 800671a:	2600      	movs	r6, #0
 800671c:	4637      	mov	r7, r6
 800671e:	e7e1      	b.n	80066e4 <_dtoa_r+0x954>
 8006720:	46bb      	mov	fp, r7
 8006722:	4637      	mov	r7, r6
 8006724:	e599      	b.n	800625a <_dtoa_r+0x4ca>
 8006726:	bf00      	nop
 8006728:	40240000 	.word	0x40240000
 800672c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800672e:	2b00      	cmp	r3, #0
 8006730:	f000 80c8 	beq.w	80068c4 <_dtoa_r+0xb34>
 8006734:	9b04      	ldr	r3, [sp, #16]
 8006736:	9301      	str	r3, [sp, #4]
 8006738:	2d00      	cmp	r5, #0
 800673a:	dd05      	ble.n	8006748 <_dtoa_r+0x9b8>
 800673c:	4639      	mov	r1, r7
 800673e:	462a      	mov	r2, r5
 8006740:	4620      	mov	r0, r4
 8006742:	f000 fc71 	bl	8007028 <__lshift>
 8006746:	4607      	mov	r7, r0
 8006748:	f1b8 0f00 	cmp.w	r8, #0
 800674c:	d05b      	beq.n	8006806 <_dtoa_r+0xa76>
 800674e:	6879      	ldr	r1, [r7, #4]
 8006750:	4620      	mov	r0, r4
 8006752:	f000 fa0f 	bl	8006b74 <_Balloc>
 8006756:	4605      	mov	r5, r0
 8006758:	b928      	cbnz	r0, 8006766 <_dtoa_r+0x9d6>
 800675a:	4b83      	ldr	r3, [pc, #524]	; (8006968 <_dtoa_r+0xbd8>)
 800675c:	4602      	mov	r2, r0
 800675e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006762:	f7ff bb2e 	b.w	8005dc2 <_dtoa_r+0x32>
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	3202      	adds	r2, #2
 800676a:	0092      	lsls	r2, r2, #2
 800676c:	f107 010c 	add.w	r1, r7, #12
 8006770:	300c      	adds	r0, #12
 8006772:	f001 ff85 	bl	8008680 <memcpy>
 8006776:	2201      	movs	r2, #1
 8006778:	4629      	mov	r1, r5
 800677a:	4620      	mov	r0, r4
 800677c:	f000 fc54 	bl	8007028 <__lshift>
 8006780:	9b00      	ldr	r3, [sp, #0]
 8006782:	3301      	adds	r3, #1
 8006784:	9304      	str	r3, [sp, #16]
 8006786:	e9dd 2300 	ldrd	r2, r3, [sp]
 800678a:	4413      	add	r3, r2
 800678c:	9308      	str	r3, [sp, #32]
 800678e:	9b02      	ldr	r3, [sp, #8]
 8006790:	f003 0301 	and.w	r3, r3, #1
 8006794:	46b8      	mov	r8, r7
 8006796:	9306      	str	r3, [sp, #24]
 8006798:	4607      	mov	r7, r0
 800679a:	9b04      	ldr	r3, [sp, #16]
 800679c:	4631      	mov	r1, r6
 800679e:	3b01      	subs	r3, #1
 80067a0:	4650      	mov	r0, sl
 80067a2:	9301      	str	r3, [sp, #4]
 80067a4:	f7ff fa6a 	bl	8005c7c <quorem>
 80067a8:	4641      	mov	r1, r8
 80067aa:	9002      	str	r0, [sp, #8]
 80067ac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80067b0:	4650      	mov	r0, sl
 80067b2:	f000 fca5 	bl	8007100 <__mcmp>
 80067b6:	463a      	mov	r2, r7
 80067b8:	9005      	str	r0, [sp, #20]
 80067ba:	4631      	mov	r1, r6
 80067bc:	4620      	mov	r0, r4
 80067be:	f000 fcbb 	bl	8007138 <__mdiff>
 80067c2:	68c2      	ldr	r2, [r0, #12]
 80067c4:	4605      	mov	r5, r0
 80067c6:	bb02      	cbnz	r2, 800680a <_dtoa_r+0xa7a>
 80067c8:	4601      	mov	r1, r0
 80067ca:	4650      	mov	r0, sl
 80067cc:	f000 fc98 	bl	8007100 <__mcmp>
 80067d0:	4602      	mov	r2, r0
 80067d2:	4629      	mov	r1, r5
 80067d4:	4620      	mov	r0, r4
 80067d6:	9209      	str	r2, [sp, #36]	; 0x24
 80067d8:	f000 fa0c 	bl	8006bf4 <_Bfree>
 80067dc:	9b07      	ldr	r3, [sp, #28]
 80067de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067e0:	9d04      	ldr	r5, [sp, #16]
 80067e2:	ea43 0102 	orr.w	r1, r3, r2
 80067e6:	9b06      	ldr	r3, [sp, #24]
 80067e8:	4319      	orrs	r1, r3
 80067ea:	d110      	bne.n	800680e <_dtoa_r+0xa7e>
 80067ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80067f0:	d029      	beq.n	8006846 <_dtoa_r+0xab6>
 80067f2:	9b05      	ldr	r3, [sp, #20]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	dd02      	ble.n	80067fe <_dtoa_r+0xa6e>
 80067f8:	9b02      	ldr	r3, [sp, #8]
 80067fa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80067fe:	9b01      	ldr	r3, [sp, #4]
 8006800:	f883 9000 	strb.w	r9, [r3]
 8006804:	e774      	b.n	80066f0 <_dtoa_r+0x960>
 8006806:	4638      	mov	r0, r7
 8006808:	e7ba      	b.n	8006780 <_dtoa_r+0x9f0>
 800680a:	2201      	movs	r2, #1
 800680c:	e7e1      	b.n	80067d2 <_dtoa_r+0xa42>
 800680e:	9b05      	ldr	r3, [sp, #20]
 8006810:	2b00      	cmp	r3, #0
 8006812:	db04      	blt.n	800681e <_dtoa_r+0xa8e>
 8006814:	9907      	ldr	r1, [sp, #28]
 8006816:	430b      	orrs	r3, r1
 8006818:	9906      	ldr	r1, [sp, #24]
 800681a:	430b      	orrs	r3, r1
 800681c:	d120      	bne.n	8006860 <_dtoa_r+0xad0>
 800681e:	2a00      	cmp	r2, #0
 8006820:	dded      	ble.n	80067fe <_dtoa_r+0xa6e>
 8006822:	4651      	mov	r1, sl
 8006824:	2201      	movs	r2, #1
 8006826:	4620      	mov	r0, r4
 8006828:	f000 fbfe 	bl	8007028 <__lshift>
 800682c:	4631      	mov	r1, r6
 800682e:	4682      	mov	sl, r0
 8006830:	f000 fc66 	bl	8007100 <__mcmp>
 8006834:	2800      	cmp	r0, #0
 8006836:	dc03      	bgt.n	8006840 <_dtoa_r+0xab0>
 8006838:	d1e1      	bne.n	80067fe <_dtoa_r+0xa6e>
 800683a:	f019 0f01 	tst.w	r9, #1
 800683e:	d0de      	beq.n	80067fe <_dtoa_r+0xa6e>
 8006840:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006844:	d1d8      	bne.n	80067f8 <_dtoa_r+0xa68>
 8006846:	9a01      	ldr	r2, [sp, #4]
 8006848:	2339      	movs	r3, #57	; 0x39
 800684a:	7013      	strb	r3, [r2, #0]
 800684c:	462b      	mov	r3, r5
 800684e:	461d      	mov	r5, r3
 8006850:	3b01      	subs	r3, #1
 8006852:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006856:	2a39      	cmp	r2, #57	; 0x39
 8006858:	d06c      	beq.n	8006934 <_dtoa_r+0xba4>
 800685a:	3201      	adds	r2, #1
 800685c:	701a      	strb	r2, [r3, #0]
 800685e:	e747      	b.n	80066f0 <_dtoa_r+0x960>
 8006860:	2a00      	cmp	r2, #0
 8006862:	dd07      	ble.n	8006874 <_dtoa_r+0xae4>
 8006864:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006868:	d0ed      	beq.n	8006846 <_dtoa_r+0xab6>
 800686a:	9a01      	ldr	r2, [sp, #4]
 800686c:	f109 0301 	add.w	r3, r9, #1
 8006870:	7013      	strb	r3, [r2, #0]
 8006872:	e73d      	b.n	80066f0 <_dtoa_r+0x960>
 8006874:	9b04      	ldr	r3, [sp, #16]
 8006876:	9a08      	ldr	r2, [sp, #32]
 8006878:	f803 9c01 	strb.w	r9, [r3, #-1]
 800687c:	4293      	cmp	r3, r2
 800687e:	d043      	beq.n	8006908 <_dtoa_r+0xb78>
 8006880:	4651      	mov	r1, sl
 8006882:	2300      	movs	r3, #0
 8006884:	220a      	movs	r2, #10
 8006886:	4620      	mov	r0, r4
 8006888:	f000 f9d6 	bl	8006c38 <__multadd>
 800688c:	45b8      	cmp	r8, r7
 800688e:	4682      	mov	sl, r0
 8006890:	f04f 0300 	mov.w	r3, #0
 8006894:	f04f 020a 	mov.w	r2, #10
 8006898:	4641      	mov	r1, r8
 800689a:	4620      	mov	r0, r4
 800689c:	d107      	bne.n	80068ae <_dtoa_r+0xb1e>
 800689e:	f000 f9cb 	bl	8006c38 <__multadd>
 80068a2:	4680      	mov	r8, r0
 80068a4:	4607      	mov	r7, r0
 80068a6:	9b04      	ldr	r3, [sp, #16]
 80068a8:	3301      	adds	r3, #1
 80068aa:	9304      	str	r3, [sp, #16]
 80068ac:	e775      	b.n	800679a <_dtoa_r+0xa0a>
 80068ae:	f000 f9c3 	bl	8006c38 <__multadd>
 80068b2:	4639      	mov	r1, r7
 80068b4:	4680      	mov	r8, r0
 80068b6:	2300      	movs	r3, #0
 80068b8:	220a      	movs	r2, #10
 80068ba:	4620      	mov	r0, r4
 80068bc:	f000 f9bc 	bl	8006c38 <__multadd>
 80068c0:	4607      	mov	r7, r0
 80068c2:	e7f0      	b.n	80068a6 <_dtoa_r+0xb16>
 80068c4:	9b04      	ldr	r3, [sp, #16]
 80068c6:	9301      	str	r3, [sp, #4]
 80068c8:	9d00      	ldr	r5, [sp, #0]
 80068ca:	4631      	mov	r1, r6
 80068cc:	4650      	mov	r0, sl
 80068ce:	f7ff f9d5 	bl	8005c7c <quorem>
 80068d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80068d6:	9b00      	ldr	r3, [sp, #0]
 80068d8:	f805 9b01 	strb.w	r9, [r5], #1
 80068dc:	1aea      	subs	r2, r5, r3
 80068de:	9b01      	ldr	r3, [sp, #4]
 80068e0:	4293      	cmp	r3, r2
 80068e2:	dd07      	ble.n	80068f4 <_dtoa_r+0xb64>
 80068e4:	4651      	mov	r1, sl
 80068e6:	2300      	movs	r3, #0
 80068e8:	220a      	movs	r2, #10
 80068ea:	4620      	mov	r0, r4
 80068ec:	f000 f9a4 	bl	8006c38 <__multadd>
 80068f0:	4682      	mov	sl, r0
 80068f2:	e7ea      	b.n	80068ca <_dtoa_r+0xb3a>
 80068f4:	9b01      	ldr	r3, [sp, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	bfc8      	it	gt
 80068fa:	461d      	movgt	r5, r3
 80068fc:	9b00      	ldr	r3, [sp, #0]
 80068fe:	bfd8      	it	le
 8006900:	2501      	movle	r5, #1
 8006902:	441d      	add	r5, r3
 8006904:	f04f 0800 	mov.w	r8, #0
 8006908:	4651      	mov	r1, sl
 800690a:	2201      	movs	r2, #1
 800690c:	4620      	mov	r0, r4
 800690e:	f000 fb8b 	bl	8007028 <__lshift>
 8006912:	4631      	mov	r1, r6
 8006914:	4682      	mov	sl, r0
 8006916:	f000 fbf3 	bl	8007100 <__mcmp>
 800691a:	2800      	cmp	r0, #0
 800691c:	dc96      	bgt.n	800684c <_dtoa_r+0xabc>
 800691e:	d102      	bne.n	8006926 <_dtoa_r+0xb96>
 8006920:	f019 0f01 	tst.w	r9, #1
 8006924:	d192      	bne.n	800684c <_dtoa_r+0xabc>
 8006926:	462b      	mov	r3, r5
 8006928:	461d      	mov	r5, r3
 800692a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800692e:	2a30      	cmp	r2, #48	; 0x30
 8006930:	d0fa      	beq.n	8006928 <_dtoa_r+0xb98>
 8006932:	e6dd      	b.n	80066f0 <_dtoa_r+0x960>
 8006934:	9a00      	ldr	r2, [sp, #0]
 8006936:	429a      	cmp	r2, r3
 8006938:	d189      	bne.n	800684e <_dtoa_r+0xabe>
 800693a:	f10b 0b01 	add.w	fp, fp, #1
 800693e:	2331      	movs	r3, #49	; 0x31
 8006940:	e796      	b.n	8006870 <_dtoa_r+0xae0>
 8006942:	4b0a      	ldr	r3, [pc, #40]	; (800696c <_dtoa_r+0xbdc>)
 8006944:	f7ff ba99 	b.w	8005e7a <_dtoa_r+0xea>
 8006948:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800694a:	2b00      	cmp	r3, #0
 800694c:	f47f aa6d 	bne.w	8005e2a <_dtoa_r+0x9a>
 8006950:	4b07      	ldr	r3, [pc, #28]	; (8006970 <_dtoa_r+0xbe0>)
 8006952:	f7ff ba92 	b.w	8005e7a <_dtoa_r+0xea>
 8006956:	9b01      	ldr	r3, [sp, #4]
 8006958:	2b00      	cmp	r3, #0
 800695a:	dcb5      	bgt.n	80068c8 <_dtoa_r+0xb38>
 800695c:	9b07      	ldr	r3, [sp, #28]
 800695e:	2b02      	cmp	r3, #2
 8006960:	f73f aeb1 	bgt.w	80066c6 <_dtoa_r+0x936>
 8006964:	e7b0      	b.n	80068c8 <_dtoa_r+0xb38>
 8006966:	bf00      	nop
 8006968:	08009561 	.word	0x08009561
 800696c:	080094bc 	.word	0x080094bc
 8006970:	080094e5 	.word	0x080094e5

08006974 <_free_r>:
 8006974:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006976:	2900      	cmp	r1, #0
 8006978:	d044      	beq.n	8006a04 <_free_r+0x90>
 800697a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800697e:	9001      	str	r0, [sp, #4]
 8006980:	2b00      	cmp	r3, #0
 8006982:	f1a1 0404 	sub.w	r4, r1, #4
 8006986:	bfb8      	it	lt
 8006988:	18e4      	addlt	r4, r4, r3
 800698a:	f000 f8e7 	bl	8006b5c <__malloc_lock>
 800698e:	4a1e      	ldr	r2, [pc, #120]	; (8006a08 <_free_r+0x94>)
 8006990:	9801      	ldr	r0, [sp, #4]
 8006992:	6813      	ldr	r3, [r2, #0]
 8006994:	b933      	cbnz	r3, 80069a4 <_free_r+0x30>
 8006996:	6063      	str	r3, [r4, #4]
 8006998:	6014      	str	r4, [r2, #0]
 800699a:	b003      	add	sp, #12
 800699c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069a0:	f000 b8e2 	b.w	8006b68 <__malloc_unlock>
 80069a4:	42a3      	cmp	r3, r4
 80069a6:	d908      	bls.n	80069ba <_free_r+0x46>
 80069a8:	6825      	ldr	r5, [r4, #0]
 80069aa:	1961      	adds	r1, r4, r5
 80069ac:	428b      	cmp	r3, r1
 80069ae:	bf01      	itttt	eq
 80069b0:	6819      	ldreq	r1, [r3, #0]
 80069b2:	685b      	ldreq	r3, [r3, #4]
 80069b4:	1949      	addeq	r1, r1, r5
 80069b6:	6021      	streq	r1, [r4, #0]
 80069b8:	e7ed      	b.n	8006996 <_free_r+0x22>
 80069ba:	461a      	mov	r2, r3
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	b10b      	cbz	r3, 80069c4 <_free_r+0x50>
 80069c0:	42a3      	cmp	r3, r4
 80069c2:	d9fa      	bls.n	80069ba <_free_r+0x46>
 80069c4:	6811      	ldr	r1, [r2, #0]
 80069c6:	1855      	adds	r5, r2, r1
 80069c8:	42a5      	cmp	r5, r4
 80069ca:	d10b      	bne.n	80069e4 <_free_r+0x70>
 80069cc:	6824      	ldr	r4, [r4, #0]
 80069ce:	4421      	add	r1, r4
 80069d0:	1854      	adds	r4, r2, r1
 80069d2:	42a3      	cmp	r3, r4
 80069d4:	6011      	str	r1, [r2, #0]
 80069d6:	d1e0      	bne.n	800699a <_free_r+0x26>
 80069d8:	681c      	ldr	r4, [r3, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	6053      	str	r3, [r2, #4]
 80069de:	440c      	add	r4, r1
 80069e0:	6014      	str	r4, [r2, #0]
 80069e2:	e7da      	b.n	800699a <_free_r+0x26>
 80069e4:	d902      	bls.n	80069ec <_free_r+0x78>
 80069e6:	230c      	movs	r3, #12
 80069e8:	6003      	str	r3, [r0, #0]
 80069ea:	e7d6      	b.n	800699a <_free_r+0x26>
 80069ec:	6825      	ldr	r5, [r4, #0]
 80069ee:	1961      	adds	r1, r4, r5
 80069f0:	428b      	cmp	r3, r1
 80069f2:	bf04      	itt	eq
 80069f4:	6819      	ldreq	r1, [r3, #0]
 80069f6:	685b      	ldreq	r3, [r3, #4]
 80069f8:	6063      	str	r3, [r4, #4]
 80069fa:	bf04      	itt	eq
 80069fc:	1949      	addeq	r1, r1, r5
 80069fe:	6021      	streq	r1, [r4, #0]
 8006a00:	6054      	str	r4, [r2, #4]
 8006a02:	e7ca      	b.n	800699a <_free_r+0x26>
 8006a04:	b003      	add	sp, #12
 8006a06:	bd30      	pop	{r4, r5, pc}
 8006a08:	2000056c 	.word	0x2000056c

08006a0c <malloc>:
 8006a0c:	4b02      	ldr	r3, [pc, #8]	; (8006a18 <malloc+0xc>)
 8006a0e:	4601      	mov	r1, r0
 8006a10:	6818      	ldr	r0, [r3, #0]
 8006a12:	f000 b823 	b.w	8006a5c <_malloc_r>
 8006a16:	bf00      	nop
 8006a18:	20000064 	.word	0x20000064

08006a1c <sbrk_aligned>:
 8006a1c:	b570      	push	{r4, r5, r6, lr}
 8006a1e:	4e0e      	ldr	r6, [pc, #56]	; (8006a58 <sbrk_aligned+0x3c>)
 8006a20:	460c      	mov	r4, r1
 8006a22:	6831      	ldr	r1, [r6, #0]
 8006a24:	4605      	mov	r5, r0
 8006a26:	b911      	cbnz	r1, 8006a2e <sbrk_aligned+0x12>
 8006a28:	f001 fe1a 	bl	8008660 <_sbrk_r>
 8006a2c:	6030      	str	r0, [r6, #0]
 8006a2e:	4621      	mov	r1, r4
 8006a30:	4628      	mov	r0, r5
 8006a32:	f001 fe15 	bl	8008660 <_sbrk_r>
 8006a36:	1c43      	adds	r3, r0, #1
 8006a38:	d00a      	beq.n	8006a50 <sbrk_aligned+0x34>
 8006a3a:	1cc4      	adds	r4, r0, #3
 8006a3c:	f024 0403 	bic.w	r4, r4, #3
 8006a40:	42a0      	cmp	r0, r4
 8006a42:	d007      	beq.n	8006a54 <sbrk_aligned+0x38>
 8006a44:	1a21      	subs	r1, r4, r0
 8006a46:	4628      	mov	r0, r5
 8006a48:	f001 fe0a 	bl	8008660 <_sbrk_r>
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	d101      	bne.n	8006a54 <sbrk_aligned+0x38>
 8006a50:	f04f 34ff 	mov.w	r4, #4294967295
 8006a54:	4620      	mov	r0, r4
 8006a56:	bd70      	pop	{r4, r5, r6, pc}
 8006a58:	20000570 	.word	0x20000570

08006a5c <_malloc_r>:
 8006a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a60:	1ccd      	adds	r5, r1, #3
 8006a62:	f025 0503 	bic.w	r5, r5, #3
 8006a66:	3508      	adds	r5, #8
 8006a68:	2d0c      	cmp	r5, #12
 8006a6a:	bf38      	it	cc
 8006a6c:	250c      	movcc	r5, #12
 8006a6e:	2d00      	cmp	r5, #0
 8006a70:	4607      	mov	r7, r0
 8006a72:	db01      	blt.n	8006a78 <_malloc_r+0x1c>
 8006a74:	42a9      	cmp	r1, r5
 8006a76:	d905      	bls.n	8006a84 <_malloc_r+0x28>
 8006a78:	230c      	movs	r3, #12
 8006a7a:	603b      	str	r3, [r7, #0]
 8006a7c:	2600      	movs	r6, #0
 8006a7e:	4630      	mov	r0, r6
 8006a80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006b58 <_malloc_r+0xfc>
 8006a88:	f000 f868 	bl	8006b5c <__malloc_lock>
 8006a8c:	f8d8 3000 	ldr.w	r3, [r8]
 8006a90:	461c      	mov	r4, r3
 8006a92:	bb5c      	cbnz	r4, 8006aec <_malloc_r+0x90>
 8006a94:	4629      	mov	r1, r5
 8006a96:	4638      	mov	r0, r7
 8006a98:	f7ff ffc0 	bl	8006a1c <sbrk_aligned>
 8006a9c:	1c43      	adds	r3, r0, #1
 8006a9e:	4604      	mov	r4, r0
 8006aa0:	d155      	bne.n	8006b4e <_malloc_r+0xf2>
 8006aa2:	f8d8 4000 	ldr.w	r4, [r8]
 8006aa6:	4626      	mov	r6, r4
 8006aa8:	2e00      	cmp	r6, #0
 8006aaa:	d145      	bne.n	8006b38 <_malloc_r+0xdc>
 8006aac:	2c00      	cmp	r4, #0
 8006aae:	d048      	beq.n	8006b42 <_malloc_r+0xe6>
 8006ab0:	6823      	ldr	r3, [r4, #0]
 8006ab2:	4631      	mov	r1, r6
 8006ab4:	4638      	mov	r0, r7
 8006ab6:	eb04 0903 	add.w	r9, r4, r3
 8006aba:	f001 fdd1 	bl	8008660 <_sbrk_r>
 8006abe:	4581      	cmp	r9, r0
 8006ac0:	d13f      	bne.n	8006b42 <_malloc_r+0xe6>
 8006ac2:	6821      	ldr	r1, [r4, #0]
 8006ac4:	1a6d      	subs	r5, r5, r1
 8006ac6:	4629      	mov	r1, r5
 8006ac8:	4638      	mov	r0, r7
 8006aca:	f7ff ffa7 	bl	8006a1c <sbrk_aligned>
 8006ace:	3001      	adds	r0, #1
 8006ad0:	d037      	beq.n	8006b42 <_malloc_r+0xe6>
 8006ad2:	6823      	ldr	r3, [r4, #0]
 8006ad4:	442b      	add	r3, r5
 8006ad6:	6023      	str	r3, [r4, #0]
 8006ad8:	f8d8 3000 	ldr.w	r3, [r8]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d038      	beq.n	8006b52 <_malloc_r+0xf6>
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	42a2      	cmp	r2, r4
 8006ae4:	d12b      	bne.n	8006b3e <_malloc_r+0xe2>
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	605a      	str	r2, [r3, #4]
 8006aea:	e00f      	b.n	8006b0c <_malloc_r+0xb0>
 8006aec:	6822      	ldr	r2, [r4, #0]
 8006aee:	1b52      	subs	r2, r2, r5
 8006af0:	d41f      	bmi.n	8006b32 <_malloc_r+0xd6>
 8006af2:	2a0b      	cmp	r2, #11
 8006af4:	d917      	bls.n	8006b26 <_malloc_r+0xca>
 8006af6:	1961      	adds	r1, r4, r5
 8006af8:	42a3      	cmp	r3, r4
 8006afa:	6025      	str	r5, [r4, #0]
 8006afc:	bf18      	it	ne
 8006afe:	6059      	strne	r1, [r3, #4]
 8006b00:	6863      	ldr	r3, [r4, #4]
 8006b02:	bf08      	it	eq
 8006b04:	f8c8 1000 	streq.w	r1, [r8]
 8006b08:	5162      	str	r2, [r4, r5]
 8006b0a:	604b      	str	r3, [r1, #4]
 8006b0c:	4638      	mov	r0, r7
 8006b0e:	f104 060b 	add.w	r6, r4, #11
 8006b12:	f000 f829 	bl	8006b68 <__malloc_unlock>
 8006b16:	f026 0607 	bic.w	r6, r6, #7
 8006b1a:	1d23      	adds	r3, r4, #4
 8006b1c:	1af2      	subs	r2, r6, r3
 8006b1e:	d0ae      	beq.n	8006a7e <_malloc_r+0x22>
 8006b20:	1b9b      	subs	r3, r3, r6
 8006b22:	50a3      	str	r3, [r4, r2]
 8006b24:	e7ab      	b.n	8006a7e <_malloc_r+0x22>
 8006b26:	42a3      	cmp	r3, r4
 8006b28:	6862      	ldr	r2, [r4, #4]
 8006b2a:	d1dd      	bne.n	8006ae8 <_malloc_r+0x8c>
 8006b2c:	f8c8 2000 	str.w	r2, [r8]
 8006b30:	e7ec      	b.n	8006b0c <_malloc_r+0xb0>
 8006b32:	4623      	mov	r3, r4
 8006b34:	6864      	ldr	r4, [r4, #4]
 8006b36:	e7ac      	b.n	8006a92 <_malloc_r+0x36>
 8006b38:	4634      	mov	r4, r6
 8006b3a:	6876      	ldr	r6, [r6, #4]
 8006b3c:	e7b4      	b.n	8006aa8 <_malloc_r+0x4c>
 8006b3e:	4613      	mov	r3, r2
 8006b40:	e7cc      	b.n	8006adc <_malloc_r+0x80>
 8006b42:	230c      	movs	r3, #12
 8006b44:	603b      	str	r3, [r7, #0]
 8006b46:	4638      	mov	r0, r7
 8006b48:	f000 f80e 	bl	8006b68 <__malloc_unlock>
 8006b4c:	e797      	b.n	8006a7e <_malloc_r+0x22>
 8006b4e:	6025      	str	r5, [r4, #0]
 8006b50:	e7dc      	b.n	8006b0c <_malloc_r+0xb0>
 8006b52:	605b      	str	r3, [r3, #4]
 8006b54:	deff      	udf	#255	; 0xff
 8006b56:	bf00      	nop
 8006b58:	2000056c 	.word	0x2000056c

08006b5c <__malloc_lock>:
 8006b5c:	4801      	ldr	r0, [pc, #4]	; (8006b64 <__malloc_lock+0x8>)
 8006b5e:	f7ff b884 	b.w	8005c6a <__retarget_lock_acquire_recursive>
 8006b62:	bf00      	nop
 8006b64:	20000568 	.word	0x20000568

08006b68 <__malloc_unlock>:
 8006b68:	4801      	ldr	r0, [pc, #4]	; (8006b70 <__malloc_unlock+0x8>)
 8006b6a:	f7ff b87f 	b.w	8005c6c <__retarget_lock_release_recursive>
 8006b6e:	bf00      	nop
 8006b70:	20000568 	.word	0x20000568

08006b74 <_Balloc>:
 8006b74:	b570      	push	{r4, r5, r6, lr}
 8006b76:	69c6      	ldr	r6, [r0, #28]
 8006b78:	4604      	mov	r4, r0
 8006b7a:	460d      	mov	r5, r1
 8006b7c:	b976      	cbnz	r6, 8006b9c <_Balloc+0x28>
 8006b7e:	2010      	movs	r0, #16
 8006b80:	f7ff ff44 	bl	8006a0c <malloc>
 8006b84:	4602      	mov	r2, r0
 8006b86:	61e0      	str	r0, [r4, #28]
 8006b88:	b920      	cbnz	r0, 8006b94 <_Balloc+0x20>
 8006b8a:	4b18      	ldr	r3, [pc, #96]	; (8006bec <_Balloc+0x78>)
 8006b8c:	4818      	ldr	r0, [pc, #96]	; (8006bf0 <_Balloc+0x7c>)
 8006b8e:	216b      	movs	r1, #107	; 0x6b
 8006b90:	f001 fd8e 	bl	80086b0 <__assert_func>
 8006b94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b98:	6006      	str	r6, [r0, #0]
 8006b9a:	60c6      	str	r6, [r0, #12]
 8006b9c:	69e6      	ldr	r6, [r4, #28]
 8006b9e:	68f3      	ldr	r3, [r6, #12]
 8006ba0:	b183      	cbz	r3, 8006bc4 <_Balloc+0x50>
 8006ba2:	69e3      	ldr	r3, [r4, #28]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006baa:	b9b8      	cbnz	r0, 8006bdc <_Balloc+0x68>
 8006bac:	2101      	movs	r1, #1
 8006bae:	fa01 f605 	lsl.w	r6, r1, r5
 8006bb2:	1d72      	adds	r2, r6, #5
 8006bb4:	0092      	lsls	r2, r2, #2
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	f001 fd98 	bl	80086ec <_calloc_r>
 8006bbc:	b160      	cbz	r0, 8006bd8 <_Balloc+0x64>
 8006bbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006bc2:	e00e      	b.n	8006be2 <_Balloc+0x6e>
 8006bc4:	2221      	movs	r2, #33	; 0x21
 8006bc6:	2104      	movs	r1, #4
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f001 fd8f 	bl	80086ec <_calloc_r>
 8006bce:	69e3      	ldr	r3, [r4, #28]
 8006bd0:	60f0      	str	r0, [r6, #12]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1e4      	bne.n	8006ba2 <_Balloc+0x2e>
 8006bd8:	2000      	movs	r0, #0
 8006bda:	bd70      	pop	{r4, r5, r6, pc}
 8006bdc:	6802      	ldr	r2, [r0, #0]
 8006bde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006be2:	2300      	movs	r3, #0
 8006be4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006be8:	e7f7      	b.n	8006bda <_Balloc+0x66>
 8006bea:	bf00      	nop
 8006bec:	080094f2 	.word	0x080094f2
 8006bf0:	08009572 	.word	0x08009572

08006bf4 <_Bfree>:
 8006bf4:	b570      	push	{r4, r5, r6, lr}
 8006bf6:	69c6      	ldr	r6, [r0, #28]
 8006bf8:	4605      	mov	r5, r0
 8006bfa:	460c      	mov	r4, r1
 8006bfc:	b976      	cbnz	r6, 8006c1c <_Bfree+0x28>
 8006bfe:	2010      	movs	r0, #16
 8006c00:	f7ff ff04 	bl	8006a0c <malloc>
 8006c04:	4602      	mov	r2, r0
 8006c06:	61e8      	str	r0, [r5, #28]
 8006c08:	b920      	cbnz	r0, 8006c14 <_Bfree+0x20>
 8006c0a:	4b09      	ldr	r3, [pc, #36]	; (8006c30 <_Bfree+0x3c>)
 8006c0c:	4809      	ldr	r0, [pc, #36]	; (8006c34 <_Bfree+0x40>)
 8006c0e:	218f      	movs	r1, #143	; 0x8f
 8006c10:	f001 fd4e 	bl	80086b0 <__assert_func>
 8006c14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c18:	6006      	str	r6, [r0, #0]
 8006c1a:	60c6      	str	r6, [r0, #12]
 8006c1c:	b13c      	cbz	r4, 8006c2e <_Bfree+0x3a>
 8006c1e:	69eb      	ldr	r3, [r5, #28]
 8006c20:	6862      	ldr	r2, [r4, #4]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c28:	6021      	str	r1, [r4, #0]
 8006c2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c2e:	bd70      	pop	{r4, r5, r6, pc}
 8006c30:	080094f2 	.word	0x080094f2
 8006c34:	08009572 	.word	0x08009572

08006c38 <__multadd>:
 8006c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c3c:	690d      	ldr	r5, [r1, #16]
 8006c3e:	4607      	mov	r7, r0
 8006c40:	460c      	mov	r4, r1
 8006c42:	461e      	mov	r6, r3
 8006c44:	f101 0c14 	add.w	ip, r1, #20
 8006c48:	2000      	movs	r0, #0
 8006c4a:	f8dc 3000 	ldr.w	r3, [ip]
 8006c4e:	b299      	uxth	r1, r3
 8006c50:	fb02 6101 	mla	r1, r2, r1, r6
 8006c54:	0c1e      	lsrs	r6, r3, #16
 8006c56:	0c0b      	lsrs	r3, r1, #16
 8006c58:	fb02 3306 	mla	r3, r2, r6, r3
 8006c5c:	b289      	uxth	r1, r1
 8006c5e:	3001      	adds	r0, #1
 8006c60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006c64:	4285      	cmp	r5, r0
 8006c66:	f84c 1b04 	str.w	r1, [ip], #4
 8006c6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006c6e:	dcec      	bgt.n	8006c4a <__multadd+0x12>
 8006c70:	b30e      	cbz	r6, 8006cb6 <__multadd+0x7e>
 8006c72:	68a3      	ldr	r3, [r4, #8]
 8006c74:	42ab      	cmp	r3, r5
 8006c76:	dc19      	bgt.n	8006cac <__multadd+0x74>
 8006c78:	6861      	ldr	r1, [r4, #4]
 8006c7a:	4638      	mov	r0, r7
 8006c7c:	3101      	adds	r1, #1
 8006c7e:	f7ff ff79 	bl	8006b74 <_Balloc>
 8006c82:	4680      	mov	r8, r0
 8006c84:	b928      	cbnz	r0, 8006c92 <__multadd+0x5a>
 8006c86:	4602      	mov	r2, r0
 8006c88:	4b0c      	ldr	r3, [pc, #48]	; (8006cbc <__multadd+0x84>)
 8006c8a:	480d      	ldr	r0, [pc, #52]	; (8006cc0 <__multadd+0x88>)
 8006c8c:	21ba      	movs	r1, #186	; 0xba
 8006c8e:	f001 fd0f 	bl	80086b0 <__assert_func>
 8006c92:	6922      	ldr	r2, [r4, #16]
 8006c94:	3202      	adds	r2, #2
 8006c96:	f104 010c 	add.w	r1, r4, #12
 8006c9a:	0092      	lsls	r2, r2, #2
 8006c9c:	300c      	adds	r0, #12
 8006c9e:	f001 fcef 	bl	8008680 <memcpy>
 8006ca2:	4621      	mov	r1, r4
 8006ca4:	4638      	mov	r0, r7
 8006ca6:	f7ff ffa5 	bl	8006bf4 <_Bfree>
 8006caa:	4644      	mov	r4, r8
 8006cac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006cb0:	3501      	adds	r5, #1
 8006cb2:	615e      	str	r6, [r3, #20]
 8006cb4:	6125      	str	r5, [r4, #16]
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cbc:	08009561 	.word	0x08009561
 8006cc0:	08009572 	.word	0x08009572

08006cc4 <__s2b>:
 8006cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cc8:	460c      	mov	r4, r1
 8006cca:	4615      	mov	r5, r2
 8006ccc:	461f      	mov	r7, r3
 8006cce:	2209      	movs	r2, #9
 8006cd0:	3308      	adds	r3, #8
 8006cd2:	4606      	mov	r6, r0
 8006cd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006cd8:	2100      	movs	r1, #0
 8006cda:	2201      	movs	r2, #1
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	db09      	blt.n	8006cf4 <__s2b+0x30>
 8006ce0:	4630      	mov	r0, r6
 8006ce2:	f7ff ff47 	bl	8006b74 <_Balloc>
 8006ce6:	b940      	cbnz	r0, 8006cfa <__s2b+0x36>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	4b19      	ldr	r3, [pc, #100]	; (8006d50 <__s2b+0x8c>)
 8006cec:	4819      	ldr	r0, [pc, #100]	; (8006d54 <__s2b+0x90>)
 8006cee:	21d3      	movs	r1, #211	; 0xd3
 8006cf0:	f001 fcde 	bl	80086b0 <__assert_func>
 8006cf4:	0052      	lsls	r2, r2, #1
 8006cf6:	3101      	adds	r1, #1
 8006cf8:	e7f0      	b.n	8006cdc <__s2b+0x18>
 8006cfa:	9b08      	ldr	r3, [sp, #32]
 8006cfc:	6143      	str	r3, [r0, #20]
 8006cfe:	2d09      	cmp	r5, #9
 8006d00:	f04f 0301 	mov.w	r3, #1
 8006d04:	6103      	str	r3, [r0, #16]
 8006d06:	dd16      	ble.n	8006d36 <__s2b+0x72>
 8006d08:	f104 0909 	add.w	r9, r4, #9
 8006d0c:	46c8      	mov	r8, r9
 8006d0e:	442c      	add	r4, r5
 8006d10:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006d14:	4601      	mov	r1, r0
 8006d16:	3b30      	subs	r3, #48	; 0x30
 8006d18:	220a      	movs	r2, #10
 8006d1a:	4630      	mov	r0, r6
 8006d1c:	f7ff ff8c 	bl	8006c38 <__multadd>
 8006d20:	45a0      	cmp	r8, r4
 8006d22:	d1f5      	bne.n	8006d10 <__s2b+0x4c>
 8006d24:	f1a5 0408 	sub.w	r4, r5, #8
 8006d28:	444c      	add	r4, r9
 8006d2a:	1b2d      	subs	r5, r5, r4
 8006d2c:	1963      	adds	r3, r4, r5
 8006d2e:	42bb      	cmp	r3, r7
 8006d30:	db04      	blt.n	8006d3c <__s2b+0x78>
 8006d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d36:	340a      	adds	r4, #10
 8006d38:	2509      	movs	r5, #9
 8006d3a:	e7f6      	b.n	8006d2a <__s2b+0x66>
 8006d3c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006d40:	4601      	mov	r1, r0
 8006d42:	3b30      	subs	r3, #48	; 0x30
 8006d44:	220a      	movs	r2, #10
 8006d46:	4630      	mov	r0, r6
 8006d48:	f7ff ff76 	bl	8006c38 <__multadd>
 8006d4c:	e7ee      	b.n	8006d2c <__s2b+0x68>
 8006d4e:	bf00      	nop
 8006d50:	08009561 	.word	0x08009561
 8006d54:	08009572 	.word	0x08009572

08006d58 <__hi0bits>:
 8006d58:	0c03      	lsrs	r3, r0, #16
 8006d5a:	041b      	lsls	r3, r3, #16
 8006d5c:	b9d3      	cbnz	r3, 8006d94 <__hi0bits+0x3c>
 8006d5e:	0400      	lsls	r0, r0, #16
 8006d60:	2310      	movs	r3, #16
 8006d62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006d66:	bf04      	itt	eq
 8006d68:	0200      	lsleq	r0, r0, #8
 8006d6a:	3308      	addeq	r3, #8
 8006d6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006d70:	bf04      	itt	eq
 8006d72:	0100      	lsleq	r0, r0, #4
 8006d74:	3304      	addeq	r3, #4
 8006d76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006d7a:	bf04      	itt	eq
 8006d7c:	0080      	lsleq	r0, r0, #2
 8006d7e:	3302      	addeq	r3, #2
 8006d80:	2800      	cmp	r0, #0
 8006d82:	db05      	blt.n	8006d90 <__hi0bits+0x38>
 8006d84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006d88:	f103 0301 	add.w	r3, r3, #1
 8006d8c:	bf08      	it	eq
 8006d8e:	2320      	moveq	r3, #32
 8006d90:	4618      	mov	r0, r3
 8006d92:	4770      	bx	lr
 8006d94:	2300      	movs	r3, #0
 8006d96:	e7e4      	b.n	8006d62 <__hi0bits+0xa>

08006d98 <__lo0bits>:
 8006d98:	6803      	ldr	r3, [r0, #0]
 8006d9a:	f013 0207 	ands.w	r2, r3, #7
 8006d9e:	d00c      	beq.n	8006dba <__lo0bits+0x22>
 8006da0:	07d9      	lsls	r1, r3, #31
 8006da2:	d422      	bmi.n	8006dea <__lo0bits+0x52>
 8006da4:	079a      	lsls	r2, r3, #30
 8006da6:	bf49      	itett	mi
 8006da8:	085b      	lsrmi	r3, r3, #1
 8006daa:	089b      	lsrpl	r3, r3, #2
 8006dac:	6003      	strmi	r3, [r0, #0]
 8006dae:	2201      	movmi	r2, #1
 8006db0:	bf5c      	itt	pl
 8006db2:	6003      	strpl	r3, [r0, #0]
 8006db4:	2202      	movpl	r2, #2
 8006db6:	4610      	mov	r0, r2
 8006db8:	4770      	bx	lr
 8006dba:	b299      	uxth	r1, r3
 8006dbc:	b909      	cbnz	r1, 8006dc2 <__lo0bits+0x2a>
 8006dbe:	0c1b      	lsrs	r3, r3, #16
 8006dc0:	2210      	movs	r2, #16
 8006dc2:	b2d9      	uxtb	r1, r3
 8006dc4:	b909      	cbnz	r1, 8006dca <__lo0bits+0x32>
 8006dc6:	3208      	adds	r2, #8
 8006dc8:	0a1b      	lsrs	r3, r3, #8
 8006dca:	0719      	lsls	r1, r3, #28
 8006dcc:	bf04      	itt	eq
 8006dce:	091b      	lsreq	r3, r3, #4
 8006dd0:	3204      	addeq	r2, #4
 8006dd2:	0799      	lsls	r1, r3, #30
 8006dd4:	bf04      	itt	eq
 8006dd6:	089b      	lsreq	r3, r3, #2
 8006dd8:	3202      	addeq	r2, #2
 8006dda:	07d9      	lsls	r1, r3, #31
 8006ddc:	d403      	bmi.n	8006de6 <__lo0bits+0x4e>
 8006dde:	085b      	lsrs	r3, r3, #1
 8006de0:	f102 0201 	add.w	r2, r2, #1
 8006de4:	d003      	beq.n	8006dee <__lo0bits+0x56>
 8006de6:	6003      	str	r3, [r0, #0]
 8006de8:	e7e5      	b.n	8006db6 <__lo0bits+0x1e>
 8006dea:	2200      	movs	r2, #0
 8006dec:	e7e3      	b.n	8006db6 <__lo0bits+0x1e>
 8006dee:	2220      	movs	r2, #32
 8006df0:	e7e1      	b.n	8006db6 <__lo0bits+0x1e>
	...

08006df4 <__i2b>:
 8006df4:	b510      	push	{r4, lr}
 8006df6:	460c      	mov	r4, r1
 8006df8:	2101      	movs	r1, #1
 8006dfa:	f7ff febb 	bl	8006b74 <_Balloc>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	b928      	cbnz	r0, 8006e0e <__i2b+0x1a>
 8006e02:	4b05      	ldr	r3, [pc, #20]	; (8006e18 <__i2b+0x24>)
 8006e04:	4805      	ldr	r0, [pc, #20]	; (8006e1c <__i2b+0x28>)
 8006e06:	f240 1145 	movw	r1, #325	; 0x145
 8006e0a:	f001 fc51 	bl	80086b0 <__assert_func>
 8006e0e:	2301      	movs	r3, #1
 8006e10:	6144      	str	r4, [r0, #20]
 8006e12:	6103      	str	r3, [r0, #16]
 8006e14:	bd10      	pop	{r4, pc}
 8006e16:	bf00      	nop
 8006e18:	08009561 	.word	0x08009561
 8006e1c:	08009572 	.word	0x08009572

08006e20 <__multiply>:
 8006e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e24:	4691      	mov	r9, r2
 8006e26:	690a      	ldr	r2, [r1, #16]
 8006e28:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	bfb8      	it	lt
 8006e30:	460b      	movlt	r3, r1
 8006e32:	460c      	mov	r4, r1
 8006e34:	bfbc      	itt	lt
 8006e36:	464c      	movlt	r4, r9
 8006e38:	4699      	movlt	r9, r3
 8006e3a:	6927      	ldr	r7, [r4, #16]
 8006e3c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006e40:	68a3      	ldr	r3, [r4, #8]
 8006e42:	6861      	ldr	r1, [r4, #4]
 8006e44:	eb07 060a 	add.w	r6, r7, sl
 8006e48:	42b3      	cmp	r3, r6
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	bfb8      	it	lt
 8006e4e:	3101      	addlt	r1, #1
 8006e50:	f7ff fe90 	bl	8006b74 <_Balloc>
 8006e54:	b930      	cbnz	r0, 8006e64 <__multiply+0x44>
 8006e56:	4602      	mov	r2, r0
 8006e58:	4b44      	ldr	r3, [pc, #272]	; (8006f6c <__multiply+0x14c>)
 8006e5a:	4845      	ldr	r0, [pc, #276]	; (8006f70 <__multiply+0x150>)
 8006e5c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006e60:	f001 fc26 	bl	80086b0 <__assert_func>
 8006e64:	f100 0514 	add.w	r5, r0, #20
 8006e68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006e6c:	462b      	mov	r3, r5
 8006e6e:	2200      	movs	r2, #0
 8006e70:	4543      	cmp	r3, r8
 8006e72:	d321      	bcc.n	8006eb8 <__multiply+0x98>
 8006e74:	f104 0314 	add.w	r3, r4, #20
 8006e78:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006e7c:	f109 0314 	add.w	r3, r9, #20
 8006e80:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006e84:	9202      	str	r2, [sp, #8]
 8006e86:	1b3a      	subs	r2, r7, r4
 8006e88:	3a15      	subs	r2, #21
 8006e8a:	f022 0203 	bic.w	r2, r2, #3
 8006e8e:	3204      	adds	r2, #4
 8006e90:	f104 0115 	add.w	r1, r4, #21
 8006e94:	428f      	cmp	r7, r1
 8006e96:	bf38      	it	cc
 8006e98:	2204      	movcc	r2, #4
 8006e9a:	9201      	str	r2, [sp, #4]
 8006e9c:	9a02      	ldr	r2, [sp, #8]
 8006e9e:	9303      	str	r3, [sp, #12]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d80c      	bhi.n	8006ebe <__multiply+0x9e>
 8006ea4:	2e00      	cmp	r6, #0
 8006ea6:	dd03      	ble.n	8006eb0 <__multiply+0x90>
 8006ea8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d05b      	beq.n	8006f68 <__multiply+0x148>
 8006eb0:	6106      	str	r6, [r0, #16]
 8006eb2:	b005      	add	sp, #20
 8006eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eb8:	f843 2b04 	str.w	r2, [r3], #4
 8006ebc:	e7d8      	b.n	8006e70 <__multiply+0x50>
 8006ebe:	f8b3 a000 	ldrh.w	sl, [r3]
 8006ec2:	f1ba 0f00 	cmp.w	sl, #0
 8006ec6:	d024      	beq.n	8006f12 <__multiply+0xf2>
 8006ec8:	f104 0e14 	add.w	lr, r4, #20
 8006ecc:	46a9      	mov	r9, r5
 8006ece:	f04f 0c00 	mov.w	ip, #0
 8006ed2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006ed6:	f8d9 1000 	ldr.w	r1, [r9]
 8006eda:	fa1f fb82 	uxth.w	fp, r2
 8006ede:	b289      	uxth	r1, r1
 8006ee0:	fb0a 110b 	mla	r1, sl, fp, r1
 8006ee4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006ee8:	f8d9 2000 	ldr.w	r2, [r9]
 8006eec:	4461      	add	r1, ip
 8006eee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006ef2:	fb0a c20b 	mla	r2, sl, fp, ip
 8006ef6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006efa:	b289      	uxth	r1, r1
 8006efc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006f00:	4577      	cmp	r7, lr
 8006f02:	f849 1b04 	str.w	r1, [r9], #4
 8006f06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006f0a:	d8e2      	bhi.n	8006ed2 <__multiply+0xb2>
 8006f0c:	9a01      	ldr	r2, [sp, #4]
 8006f0e:	f845 c002 	str.w	ip, [r5, r2]
 8006f12:	9a03      	ldr	r2, [sp, #12]
 8006f14:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006f18:	3304      	adds	r3, #4
 8006f1a:	f1b9 0f00 	cmp.w	r9, #0
 8006f1e:	d021      	beq.n	8006f64 <__multiply+0x144>
 8006f20:	6829      	ldr	r1, [r5, #0]
 8006f22:	f104 0c14 	add.w	ip, r4, #20
 8006f26:	46ae      	mov	lr, r5
 8006f28:	f04f 0a00 	mov.w	sl, #0
 8006f2c:	f8bc b000 	ldrh.w	fp, [ip]
 8006f30:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006f34:	fb09 220b 	mla	r2, r9, fp, r2
 8006f38:	4452      	add	r2, sl
 8006f3a:	b289      	uxth	r1, r1
 8006f3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006f40:	f84e 1b04 	str.w	r1, [lr], #4
 8006f44:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006f48:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006f4c:	f8be 1000 	ldrh.w	r1, [lr]
 8006f50:	fb09 110a 	mla	r1, r9, sl, r1
 8006f54:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006f58:	4567      	cmp	r7, ip
 8006f5a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006f5e:	d8e5      	bhi.n	8006f2c <__multiply+0x10c>
 8006f60:	9a01      	ldr	r2, [sp, #4]
 8006f62:	50a9      	str	r1, [r5, r2]
 8006f64:	3504      	adds	r5, #4
 8006f66:	e799      	b.n	8006e9c <__multiply+0x7c>
 8006f68:	3e01      	subs	r6, #1
 8006f6a:	e79b      	b.n	8006ea4 <__multiply+0x84>
 8006f6c:	08009561 	.word	0x08009561
 8006f70:	08009572 	.word	0x08009572

08006f74 <__pow5mult>:
 8006f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f78:	4615      	mov	r5, r2
 8006f7a:	f012 0203 	ands.w	r2, r2, #3
 8006f7e:	4606      	mov	r6, r0
 8006f80:	460f      	mov	r7, r1
 8006f82:	d007      	beq.n	8006f94 <__pow5mult+0x20>
 8006f84:	4c25      	ldr	r4, [pc, #148]	; (800701c <__pow5mult+0xa8>)
 8006f86:	3a01      	subs	r2, #1
 8006f88:	2300      	movs	r3, #0
 8006f8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f8e:	f7ff fe53 	bl	8006c38 <__multadd>
 8006f92:	4607      	mov	r7, r0
 8006f94:	10ad      	asrs	r5, r5, #2
 8006f96:	d03d      	beq.n	8007014 <__pow5mult+0xa0>
 8006f98:	69f4      	ldr	r4, [r6, #28]
 8006f9a:	b97c      	cbnz	r4, 8006fbc <__pow5mult+0x48>
 8006f9c:	2010      	movs	r0, #16
 8006f9e:	f7ff fd35 	bl	8006a0c <malloc>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	61f0      	str	r0, [r6, #28]
 8006fa6:	b928      	cbnz	r0, 8006fb4 <__pow5mult+0x40>
 8006fa8:	4b1d      	ldr	r3, [pc, #116]	; (8007020 <__pow5mult+0xac>)
 8006faa:	481e      	ldr	r0, [pc, #120]	; (8007024 <__pow5mult+0xb0>)
 8006fac:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006fb0:	f001 fb7e 	bl	80086b0 <__assert_func>
 8006fb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006fb8:	6004      	str	r4, [r0, #0]
 8006fba:	60c4      	str	r4, [r0, #12]
 8006fbc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006fc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006fc4:	b94c      	cbnz	r4, 8006fda <__pow5mult+0x66>
 8006fc6:	f240 2171 	movw	r1, #625	; 0x271
 8006fca:	4630      	mov	r0, r6
 8006fcc:	f7ff ff12 	bl	8006df4 <__i2b>
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	f8c8 0008 	str.w	r0, [r8, #8]
 8006fd6:	4604      	mov	r4, r0
 8006fd8:	6003      	str	r3, [r0, #0]
 8006fda:	f04f 0900 	mov.w	r9, #0
 8006fde:	07eb      	lsls	r3, r5, #31
 8006fe0:	d50a      	bpl.n	8006ff8 <__pow5mult+0x84>
 8006fe2:	4639      	mov	r1, r7
 8006fe4:	4622      	mov	r2, r4
 8006fe6:	4630      	mov	r0, r6
 8006fe8:	f7ff ff1a 	bl	8006e20 <__multiply>
 8006fec:	4639      	mov	r1, r7
 8006fee:	4680      	mov	r8, r0
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	f7ff fdff 	bl	8006bf4 <_Bfree>
 8006ff6:	4647      	mov	r7, r8
 8006ff8:	106d      	asrs	r5, r5, #1
 8006ffa:	d00b      	beq.n	8007014 <__pow5mult+0xa0>
 8006ffc:	6820      	ldr	r0, [r4, #0]
 8006ffe:	b938      	cbnz	r0, 8007010 <__pow5mult+0x9c>
 8007000:	4622      	mov	r2, r4
 8007002:	4621      	mov	r1, r4
 8007004:	4630      	mov	r0, r6
 8007006:	f7ff ff0b 	bl	8006e20 <__multiply>
 800700a:	6020      	str	r0, [r4, #0]
 800700c:	f8c0 9000 	str.w	r9, [r0]
 8007010:	4604      	mov	r4, r0
 8007012:	e7e4      	b.n	8006fde <__pow5mult+0x6a>
 8007014:	4638      	mov	r0, r7
 8007016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800701a:	bf00      	nop
 800701c:	080096c0 	.word	0x080096c0
 8007020:	080094f2 	.word	0x080094f2
 8007024:	08009572 	.word	0x08009572

08007028 <__lshift>:
 8007028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800702c:	460c      	mov	r4, r1
 800702e:	6849      	ldr	r1, [r1, #4]
 8007030:	6923      	ldr	r3, [r4, #16]
 8007032:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007036:	68a3      	ldr	r3, [r4, #8]
 8007038:	4607      	mov	r7, r0
 800703a:	4691      	mov	r9, r2
 800703c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007040:	f108 0601 	add.w	r6, r8, #1
 8007044:	42b3      	cmp	r3, r6
 8007046:	db0b      	blt.n	8007060 <__lshift+0x38>
 8007048:	4638      	mov	r0, r7
 800704a:	f7ff fd93 	bl	8006b74 <_Balloc>
 800704e:	4605      	mov	r5, r0
 8007050:	b948      	cbnz	r0, 8007066 <__lshift+0x3e>
 8007052:	4602      	mov	r2, r0
 8007054:	4b28      	ldr	r3, [pc, #160]	; (80070f8 <__lshift+0xd0>)
 8007056:	4829      	ldr	r0, [pc, #164]	; (80070fc <__lshift+0xd4>)
 8007058:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800705c:	f001 fb28 	bl	80086b0 <__assert_func>
 8007060:	3101      	adds	r1, #1
 8007062:	005b      	lsls	r3, r3, #1
 8007064:	e7ee      	b.n	8007044 <__lshift+0x1c>
 8007066:	2300      	movs	r3, #0
 8007068:	f100 0114 	add.w	r1, r0, #20
 800706c:	f100 0210 	add.w	r2, r0, #16
 8007070:	4618      	mov	r0, r3
 8007072:	4553      	cmp	r3, sl
 8007074:	db33      	blt.n	80070de <__lshift+0xb6>
 8007076:	6920      	ldr	r0, [r4, #16]
 8007078:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800707c:	f104 0314 	add.w	r3, r4, #20
 8007080:	f019 091f 	ands.w	r9, r9, #31
 8007084:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007088:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800708c:	d02b      	beq.n	80070e6 <__lshift+0xbe>
 800708e:	f1c9 0e20 	rsb	lr, r9, #32
 8007092:	468a      	mov	sl, r1
 8007094:	2200      	movs	r2, #0
 8007096:	6818      	ldr	r0, [r3, #0]
 8007098:	fa00 f009 	lsl.w	r0, r0, r9
 800709c:	4310      	orrs	r0, r2
 800709e:	f84a 0b04 	str.w	r0, [sl], #4
 80070a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80070a6:	459c      	cmp	ip, r3
 80070a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80070ac:	d8f3      	bhi.n	8007096 <__lshift+0x6e>
 80070ae:	ebac 0304 	sub.w	r3, ip, r4
 80070b2:	3b15      	subs	r3, #21
 80070b4:	f023 0303 	bic.w	r3, r3, #3
 80070b8:	3304      	adds	r3, #4
 80070ba:	f104 0015 	add.w	r0, r4, #21
 80070be:	4584      	cmp	ip, r0
 80070c0:	bf38      	it	cc
 80070c2:	2304      	movcc	r3, #4
 80070c4:	50ca      	str	r2, [r1, r3]
 80070c6:	b10a      	cbz	r2, 80070cc <__lshift+0xa4>
 80070c8:	f108 0602 	add.w	r6, r8, #2
 80070cc:	3e01      	subs	r6, #1
 80070ce:	4638      	mov	r0, r7
 80070d0:	612e      	str	r6, [r5, #16]
 80070d2:	4621      	mov	r1, r4
 80070d4:	f7ff fd8e 	bl	8006bf4 <_Bfree>
 80070d8:	4628      	mov	r0, r5
 80070da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070de:	f842 0f04 	str.w	r0, [r2, #4]!
 80070e2:	3301      	adds	r3, #1
 80070e4:	e7c5      	b.n	8007072 <__lshift+0x4a>
 80070e6:	3904      	subs	r1, #4
 80070e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80070ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80070f0:	459c      	cmp	ip, r3
 80070f2:	d8f9      	bhi.n	80070e8 <__lshift+0xc0>
 80070f4:	e7ea      	b.n	80070cc <__lshift+0xa4>
 80070f6:	bf00      	nop
 80070f8:	08009561 	.word	0x08009561
 80070fc:	08009572 	.word	0x08009572

08007100 <__mcmp>:
 8007100:	b530      	push	{r4, r5, lr}
 8007102:	6902      	ldr	r2, [r0, #16]
 8007104:	690c      	ldr	r4, [r1, #16]
 8007106:	1b12      	subs	r2, r2, r4
 8007108:	d10e      	bne.n	8007128 <__mcmp+0x28>
 800710a:	f100 0314 	add.w	r3, r0, #20
 800710e:	3114      	adds	r1, #20
 8007110:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007114:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007118:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800711c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007120:	42a5      	cmp	r5, r4
 8007122:	d003      	beq.n	800712c <__mcmp+0x2c>
 8007124:	d305      	bcc.n	8007132 <__mcmp+0x32>
 8007126:	2201      	movs	r2, #1
 8007128:	4610      	mov	r0, r2
 800712a:	bd30      	pop	{r4, r5, pc}
 800712c:	4283      	cmp	r3, r0
 800712e:	d3f3      	bcc.n	8007118 <__mcmp+0x18>
 8007130:	e7fa      	b.n	8007128 <__mcmp+0x28>
 8007132:	f04f 32ff 	mov.w	r2, #4294967295
 8007136:	e7f7      	b.n	8007128 <__mcmp+0x28>

08007138 <__mdiff>:
 8007138:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800713c:	460c      	mov	r4, r1
 800713e:	4606      	mov	r6, r0
 8007140:	4611      	mov	r1, r2
 8007142:	4620      	mov	r0, r4
 8007144:	4690      	mov	r8, r2
 8007146:	f7ff ffdb 	bl	8007100 <__mcmp>
 800714a:	1e05      	subs	r5, r0, #0
 800714c:	d110      	bne.n	8007170 <__mdiff+0x38>
 800714e:	4629      	mov	r1, r5
 8007150:	4630      	mov	r0, r6
 8007152:	f7ff fd0f 	bl	8006b74 <_Balloc>
 8007156:	b930      	cbnz	r0, 8007166 <__mdiff+0x2e>
 8007158:	4b3a      	ldr	r3, [pc, #232]	; (8007244 <__mdiff+0x10c>)
 800715a:	4602      	mov	r2, r0
 800715c:	f240 2137 	movw	r1, #567	; 0x237
 8007160:	4839      	ldr	r0, [pc, #228]	; (8007248 <__mdiff+0x110>)
 8007162:	f001 faa5 	bl	80086b0 <__assert_func>
 8007166:	2301      	movs	r3, #1
 8007168:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800716c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007170:	bfa4      	itt	ge
 8007172:	4643      	movge	r3, r8
 8007174:	46a0      	movge	r8, r4
 8007176:	4630      	mov	r0, r6
 8007178:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800717c:	bfa6      	itte	ge
 800717e:	461c      	movge	r4, r3
 8007180:	2500      	movge	r5, #0
 8007182:	2501      	movlt	r5, #1
 8007184:	f7ff fcf6 	bl	8006b74 <_Balloc>
 8007188:	b920      	cbnz	r0, 8007194 <__mdiff+0x5c>
 800718a:	4b2e      	ldr	r3, [pc, #184]	; (8007244 <__mdiff+0x10c>)
 800718c:	4602      	mov	r2, r0
 800718e:	f240 2145 	movw	r1, #581	; 0x245
 8007192:	e7e5      	b.n	8007160 <__mdiff+0x28>
 8007194:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007198:	6926      	ldr	r6, [r4, #16]
 800719a:	60c5      	str	r5, [r0, #12]
 800719c:	f104 0914 	add.w	r9, r4, #20
 80071a0:	f108 0514 	add.w	r5, r8, #20
 80071a4:	f100 0e14 	add.w	lr, r0, #20
 80071a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80071ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80071b0:	f108 0210 	add.w	r2, r8, #16
 80071b4:	46f2      	mov	sl, lr
 80071b6:	2100      	movs	r1, #0
 80071b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80071bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80071c0:	fa11 f88b 	uxtah	r8, r1, fp
 80071c4:	b299      	uxth	r1, r3
 80071c6:	0c1b      	lsrs	r3, r3, #16
 80071c8:	eba8 0801 	sub.w	r8, r8, r1
 80071cc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80071d0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80071d4:	fa1f f888 	uxth.w	r8, r8
 80071d8:	1419      	asrs	r1, r3, #16
 80071da:	454e      	cmp	r6, r9
 80071dc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80071e0:	f84a 3b04 	str.w	r3, [sl], #4
 80071e4:	d8e8      	bhi.n	80071b8 <__mdiff+0x80>
 80071e6:	1b33      	subs	r3, r6, r4
 80071e8:	3b15      	subs	r3, #21
 80071ea:	f023 0303 	bic.w	r3, r3, #3
 80071ee:	3304      	adds	r3, #4
 80071f0:	3415      	adds	r4, #21
 80071f2:	42a6      	cmp	r6, r4
 80071f4:	bf38      	it	cc
 80071f6:	2304      	movcc	r3, #4
 80071f8:	441d      	add	r5, r3
 80071fa:	4473      	add	r3, lr
 80071fc:	469e      	mov	lr, r3
 80071fe:	462e      	mov	r6, r5
 8007200:	4566      	cmp	r6, ip
 8007202:	d30e      	bcc.n	8007222 <__mdiff+0xea>
 8007204:	f10c 0203 	add.w	r2, ip, #3
 8007208:	1b52      	subs	r2, r2, r5
 800720a:	f022 0203 	bic.w	r2, r2, #3
 800720e:	3d03      	subs	r5, #3
 8007210:	45ac      	cmp	ip, r5
 8007212:	bf38      	it	cc
 8007214:	2200      	movcc	r2, #0
 8007216:	4413      	add	r3, r2
 8007218:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800721c:	b17a      	cbz	r2, 800723e <__mdiff+0x106>
 800721e:	6107      	str	r7, [r0, #16]
 8007220:	e7a4      	b.n	800716c <__mdiff+0x34>
 8007222:	f856 8b04 	ldr.w	r8, [r6], #4
 8007226:	fa11 f288 	uxtah	r2, r1, r8
 800722a:	1414      	asrs	r4, r2, #16
 800722c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007230:	b292      	uxth	r2, r2
 8007232:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007236:	f84e 2b04 	str.w	r2, [lr], #4
 800723a:	1421      	asrs	r1, r4, #16
 800723c:	e7e0      	b.n	8007200 <__mdiff+0xc8>
 800723e:	3f01      	subs	r7, #1
 8007240:	e7ea      	b.n	8007218 <__mdiff+0xe0>
 8007242:	bf00      	nop
 8007244:	08009561 	.word	0x08009561
 8007248:	08009572 	.word	0x08009572

0800724c <__ulp>:
 800724c:	b082      	sub	sp, #8
 800724e:	ed8d 0b00 	vstr	d0, [sp]
 8007252:	9a01      	ldr	r2, [sp, #4]
 8007254:	4b0f      	ldr	r3, [pc, #60]	; (8007294 <__ulp+0x48>)
 8007256:	4013      	ands	r3, r2
 8007258:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800725c:	2b00      	cmp	r3, #0
 800725e:	dc08      	bgt.n	8007272 <__ulp+0x26>
 8007260:	425b      	negs	r3, r3
 8007262:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007266:	ea4f 5223 	mov.w	r2, r3, asr #20
 800726a:	da04      	bge.n	8007276 <__ulp+0x2a>
 800726c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007270:	4113      	asrs	r3, r2
 8007272:	2200      	movs	r2, #0
 8007274:	e008      	b.n	8007288 <__ulp+0x3c>
 8007276:	f1a2 0314 	sub.w	r3, r2, #20
 800727a:	2b1e      	cmp	r3, #30
 800727c:	bfda      	itte	le
 800727e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007282:	40da      	lsrle	r2, r3
 8007284:	2201      	movgt	r2, #1
 8007286:	2300      	movs	r3, #0
 8007288:	4619      	mov	r1, r3
 800728a:	4610      	mov	r0, r2
 800728c:	ec41 0b10 	vmov	d0, r0, r1
 8007290:	b002      	add	sp, #8
 8007292:	4770      	bx	lr
 8007294:	7ff00000 	.word	0x7ff00000

08007298 <__b2d>:
 8007298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800729c:	6906      	ldr	r6, [r0, #16]
 800729e:	f100 0814 	add.w	r8, r0, #20
 80072a2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80072a6:	1f37      	subs	r7, r6, #4
 80072a8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80072ac:	4610      	mov	r0, r2
 80072ae:	f7ff fd53 	bl	8006d58 <__hi0bits>
 80072b2:	f1c0 0320 	rsb	r3, r0, #32
 80072b6:	280a      	cmp	r0, #10
 80072b8:	600b      	str	r3, [r1, #0]
 80072ba:	491b      	ldr	r1, [pc, #108]	; (8007328 <__b2d+0x90>)
 80072bc:	dc15      	bgt.n	80072ea <__b2d+0x52>
 80072be:	f1c0 0c0b 	rsb	ip, r0, #11
 80072c2:	fa22 f30c 	lsr.w	r3, r2, ip
 80072c6:	45b8      	cmp	r8, r7
 80072c8:	ea43 0501 	orr.w	r5, r3, r1
 80072cc:	bf34      	ite	cc
 80072ce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80072d2:	2300      	movcs	r3, #0
 80072d4:	3015      	adds	r0, #21
 80072d6:	fa02 f000 	lsl.w	r0, r2, r0
 80072da:	fa23 f30c 	lsr.w	r3, r3, ip
 80072de:	4303      	orrs	r3, r0
 80072e0:	461c      	mov	r4, r3
 80072e2:	ec45 4b10 	vmov	d0, r4, r5
 80072e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072ea:	45b8      	cmp	r8, r7
 80072ec:	bf3a      	itte	cc
 80072ee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80072f2:	f1a6 0708 	subcc.w	r7, r6, #8
 80072f6:	2300      	movcs	r3, #0
 80072f8:	380b      	subs	r0, #11
 80072fa:	d012      	beq.n	8007322 <__b2d+0x8a>
 80072fc:	f1c0 0120 	rsb	r1, r0, #32
 8007300:	fa23 f401 	lsr.w	r4, r3, r1
 8007304:	4082      	lsls	r2, r0
 8007306:	4322      	orrs	r2, r4
 8007308:	4547      	cmp	r7, r8
 800730a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800730e:	bf8c      	ite	hi
 8007310:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007314:	2200      	movls	r2, #0
 8007316:	4083      	lsls	r3, r0
 8007318:	40ca      	lsrs	r2, r1
 800731a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800731e:	4313      	orrs	r3, r2
 8007320:	e7de      	b.n	80072e0 <__b2d+0x48>
 8007322:	ea42 0501 	orr.w	r5, r2, r1
 8007326:	e7db      	b.n	80072e0 <__b2d+0x48>
 8007328:	3ff00000 	.word	0x3ff00000

0800732c <__d2b>:
 800732c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007330:	460f      	mov	r7, r1
 8007332:	2101      	movs	r1, #1
 8007334:	ec59 8b10 	vmov	r8, r9, d0
 8007338:	4616      	mov	r6, r2
 800733a:	f7ff fc1b 	bl	8006b74 <_Balloc>
 800733e:	4604      	mov	r4, r0
 8007340:	b930      	cbnz	r0, 8007350 <__d2b+0x24>
 8007342:	4602      	mov	r2, r0
 8007344:	4b24      	ldr	r3, [pc, #144]	; (80073d8 <__d2b+0xac>)
 8007346:	4825      	ldr	r0, [pc, #148]	; (80073dc <__d2b+0xb0>)
 8007348:	f240 310f 	movw	r1, #783	; 0x30f
 800734c:	f001 f9b0 	bl	80086b0 <__assert_func>
 8007350:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007354:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007358:	bb2d      	cbnz	r5, 80073a6 <__d2b+0x7a>
 800735a:	9301      	str	r3, [sp, #4]
 800735c:	f1b8 0300 	subs.w	r3, r8, #0
 8007360:	d026      	beq.n	80073b0 <__d2b+0x84>
 8007362:	4668      	mov	r0, sp
 8007364:	9300      	str	r3, [sp, #0]
 8007366:	f7ff fd17 	bl	8006d98 <__lo0bits>
 800736a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800736e:	b1e8      	cbz	r0, 80073ac <__d2b+0x80>
 8007370:	f1c0 0320 	rsb	r3, r0, #32
 8007374:	fa02 f303 	lsl.w	r3, r2, r3
 8007378:	430b      	orrs	r3, r1
 800737a:	40c2      	lsrs	r2, r0
 800737c:	6163      	str	r3, [r4, #20]
 800737e:	9201      	str	r2, [sp, #4]
 8007380:	9b01      	ldr	r3, [sp, #4]
 8007382:	61a3      	str	r3, [r4, #24]
 8007384:	2b00      	cmp	r3, #0
 8007386:	bf14      	ite	ne
 8007388:	2202      	movne	r2, #2
 800738a:	2201      	moveq	r2, #1
 800738c:	6122      	str	r2, [r4, #16]
 800738e:	b1bd      	cbz	r5, 80073c0 <__d2b+0x94>
 8007390:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007394:	4405      	add	r5, r0
 8007396:	603d      	str	r5, [r7, #0]
 8007398:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800739c:	6030      	str	r0, [r6, #0]
 800739e:	4620      	mov	r0, r4
 80073a0:	b003      	add	sp, #12
 80073a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073aa:	e7d6      	b.n	800735a <__d2b+0x2e>
 80073ac:	6161      	str	r1, [r4, #20]
 80073ae:	e7e7      	b.n	8007380 <__d2b+0x54>
 80073b0:	a801      	add	r0, sp, #4
 80073b2:	f7ff fcf1 	bl	8006d98 <__lo0bits>
 80073b6:	9b01      	ldr	r3, [sp, #4]
 80073b8:	6163      	str	r3, [r4, #20]
 80073ba:	3020      	adds	r0, #32
 80073bc:	2201      	movs	r2, #1
 80073be:	e7e5      	b.n	800738c <__d2b+0x60>
 80073c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80073c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80073c8:	6038      	str	r0, [r7, #0]
 80073ca:	6918      	ldr	r0, [r3, #16]
 80073cc:	f7ff fcc4 	bl	8006d58 <__hi0bits>
 80073d0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80073d4:	e7e2      	b.n	800739c <__d2b+0x70>
 80073d6:	bf00      	nop
 80073d8:	08009561 	.word	0x08009561
 80073dc:	08009572 	.word	0x08009572

080073e0 <__ratio>:
 80073e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e4:	4688      	mov	r8, r1
 80073e6:	4669      	mov	r1, sp
 80073e8:	4681      	mov	r9, r0
 80073ea:	f7ff ff55 	bl	8007298 <__b2d>
 80073ee:	a901      	add	r1, sp, #4
 80073f0:	4640      	mov	r0, r8
 80073f2:	ec55 4b10 	vmov	r4, r5, d0
 80073f6:	f7ff ff4f 	bl	8007298 <__b2d>
 80073fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80073fe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007402:	eba3 0c02 	sub.w	ip, r3, r2
 8007406:	e9dd 3200 	ldrd	r3, r2, [sp]
 800740a:	1a9b      	subs	r3, r3, r2
 800740c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007410:	ec51 0b10 	vmov	r0, r1, d0
 8007414:	2b00      	cmp	r3, #0
 8007416:	bfd6      	itet	le
 8007418:	460a      	movle	r2, r1
 800741a:	462a      	movgt	r2, r5
 800741c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007420:	468b      	mov	fp, r1
 8007422:	462f      	mov	r7, r5
 8007424:	bfd4      	ite	le
 8007426:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800742a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800742e:	4620      	mov	r0, r4
 8007430:	ee10 2a10 	vmov	r2, s0
 8007434:	465b      	mov	r3, fp
 8007436:	4639      	mov	r1, r7
 8007438:	f7f9 fa08 	bl	800084c <__aeabi_ddiv>
 800743c:	ec41 0b10 	vmov	d0, r0, r1
 8007440:	b003      	add	sp, #12
 8007442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007446 <__copybits>:
 8007446:	3901      	subs	r1, #1
 8007448:	b570      	push	{r4, r5, r6, lr}
 800744a:	1149      	asrs	r1, r1, #5
 800744c:	6914      	ldr	r4, [r2, #16]
 800744e:	3101      	adds	r1, #1
 8007450:	f102 0314 	add.w	r3, r2, #20
 8007454:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007458:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800745c:	1f05      	subs	r5, r0, #4
 800745e:	42a3      	cmp	r3, r4
 8007460:	d30c      	bcc.n	800747c <__copybits+0x36>
 8007462:	1aa3      	subs	r3, r4, r2
 8007464:	3b11      	subs	r3, #17
 8007466:	f023 0303 	bic.w	r3, r3, #3
 800746a:	3211      	adds	r2, #17
 800746c:	42a2      	cmp	r2, r4
 800746e:	bf88      	it	hi
 8007470:	2300      	movhi	r3, #0
 8007472:	4418      	add	r0, r3
 8007474:	2300      	movs	r3, #0
 8007476:	4288      	cmp	r0, r1
 8007478:	d305      	bcc.n	8007486 <__copybits+0x40>
 800747a:	bd70      	pop	{r4, r5, r6, pc}
 800747c:	f853 6b04 	ldr.w	r6, [r3], #4
 8007480:	f845 6f04 	str.w	r6, [r5, #4]!
 8007484:	e7eb      	b.n	800745e <__copybits+0x18>
 8007486:	f840 3b04 	str.w	r3, [r0], #4
 800748a:	e7f4      	b.n	8007476 <__copybits+0x30>

0800748c <__any_on>:
 800748c:	f100 0214 	add.w	r2, r0, #20
 8007490:	6900      	ldr	r0, [r0, #16]
 8007492:	114b      	asrs	r3, r1, #5
 8007494:	4298      	cmp	r0, r3
 8007496:	b510      	push	{r4, lr}
 8007498:	db11      	blt.n	80074be <__any_on+0x32>
 800749a:	dd0a      	ble.n	80074b2 <__any_on+0x26>
 800749c:	f011 011f 	ands.w	r1, r1, #31
 80074a0:	d007      	beq.n	80074b2 <__any_on+0x26>
 80074a2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80074a6:	fa24 f001 	lsr.w	r0, r4, r1
 80074aa:	fa00 f101 	lsl.w	r1, r0, r1
 80074ae:	428c      	cmp	r4, r1
 80074b0:	d10b      	bne.n	80074ca <__any_on+0x3e>
 80074b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d803      	bhi.n	80074c2 <__any_on+0x36>
 80074ba:	2000      	movs	r0, #0
 80074bc:	bd10      	pop	{r4, pc}
 80074be:	4603      	mov	r3, r0
 80074c0:	e7f7      	b.n	80074b2 <__any_on+0x26>
 80074c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80074c6:	2900      	cmp	r1, #0
 80074c8:	d0f5      	beq.n	80074b6 <__any_on+0x2a>
 80074ca:	2001      	movs	r0, #1
 80074cc:	e7f6      	b.n	80074bc <__any_on+0x30>

080074ce <sulp>:
 80074ce:	b570      	push	{r4, r5, r6, lr}
 80074d0:	4604      	mov	r4, r0
 80074d2:	460d      	mov	r5, r1
 80074d4:	ec45 4b10 	vmov	d0, r4, r5
 80074d8:	4616      	mov	r6, r2
 80074da:	f7ff feb7 	bl	800724c <__ulp>
 80074de:	ec51 0b10 	vmov	r0, r1, d0
 80074e2:	b17e      	cbz	r6, 8007504 <sulp+0x36>
 80074e4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80074e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	dd09      	ble.n	8007504 <sulp+0x36>
 80074f0:	051b      	lsls	r3, r3, #20
 80074f2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80074f6:	2400      	movs	r4, #0
 80074f8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80074fc:	4622      	mov	r2, r4
 80074fe:	462b      	mov	r3, r5
 8007500:	f7f9 f87a 	bl	80005f8 <__aeabi_dmul>
 8007504:	bd70      	pop	{r4, r5, r6, pc}
	...

08007508 <_strtod_l>:
 8007508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800750c:	ed2d 8b02 	vpush	{d8}
 8007510:	b09b      	sub	sp, #108	; 0x6c
 8007512:	4604      	mov	r4, r0
 8007514:	9213      	str	r2, [sp, #76]	; 0x4c
 8007516:	2200      	movs	r2, #0
 8007518:	9216      	str	r2, [sp, #88]	; 0x58
 800751a:	460d      	mov	r5, r1
 800751c:	f04f 0800 	mov.w	r8, #0
 8007520:	f04f 0900 	mov.w	r9, #0
 8007524:	460a      	mov	r2, r1
 8007526:	9215      	str	r2, [sp, #84]	; 0x54
 8007528:	7811      	ldrb	r1, [r2, #0]
 800752a:	292b      	cmp	r1, #43	; 0x2b
 800752c:	d04c      	beq.n	80075c8 <_strtod_l+0xc0>
 800752e:	d83a      	bhi.n	80075a6 <_strtod_l+0x9e>
 8007530:	290d      	cmp	r1, #13
 8007532:	d834      	bhi.n	800759e <_strtod_l+0x96>
 8007534:	2908      	cmp	r1, #8
 8007536:	d834      	bhi.n	80075a2 <_strtod_l+0x9a>
 8007538:	2900      	cmp	r1, #0
 800753a:	d03d      	beq.n	80075b8 <_strtod_l+0xb0>
 800753c:	2200      	movs	r2, #0
 800753e:	920a      	str	r2, [sp, #40]	; 0x28
 8007540:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007542:	7832      	ldrb	r2, [r6, #0]
 8007544:	2a30      	cmp	r2, #48	; 0x30
 8007546:	f040 80b4 	bne.w	80076b2 <_strtod_l+0x1aa>
 800754a:	7872      	ldrb	r2, [r6, #1]
 800754c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007550:	2a58      	cmp	r2, #88	; 0x58
 8007552:	d170      	bne.n	8007636 <_strtod_l+0x12e>
 8007554:	9302      	str	r3, [sp, #8]
 8007556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007558:	9301      	str	r3, [sp, #4]
 800755a:	ab16      	add	r3, sp, #88	; 0x58
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	4a8e      	ldr	r2, [pc, #568]	; (8007798 <_strtod_l+0x290>)
 8007560:	ab17      	add	r3, sp, #92	; 0x5c
 8007562:	a915      	add	r1, sp, #84	; 0x54
 8007564:	4620      	mov	r0, r4
 8007566:	f001 f93f 	bl	80087e8 <__gethex>
 800756a:	f010 070f 	ands.w	r7, r0, #15
 800756e:	4605      	mov	r5, r0
 8007570:	d005      	beq.n	800757e <_strtod_l+0x76>
 8007572:	2f06      	cmp	r7, #6
 8007574:	d12a      	bne.n	80075cc <_strtod_l+0xc4>
 8007576:	3601      	adds	r6, #1
 8007578:	2300      	movs	r3, #0
 800757a:	9615      	str	r6, [sp, #84]	; 0x54
 800757c:	930a      	str	r3, [sp, #40]	; 0x28
 800757e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007580:	2b00      	cmp	r3, #0
 8007582:	f040 857f 	bne.w	8008084 <_strtod_l+0xb7c>
 8007586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007588:	b1db      	cbz	r3, 80075c2 <_strtod_l+0xba>
 800758a:	4642      	mov	r2, r8
 800758c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007590:	ec43 2b10 	vmov	d0, r2, r3
 8007594:	b01b      	add	sp, #108	; 0x6c
 8007596:	ecbd 8b02 	vpop	{d8}
 800759a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800759e:	2920      	cmp	r1, #32
 80075a0:	d1cc      	bne.n	800753c <_strtod_l+0x34>
 80075a2:	3201      	adds	r2, #1
 80075a4:	e7bf      	b.n	8007526 <_strtod_l+0x1e>
 80075a6:	292d      	cmp	r1, #45	; 0x2d
 80075a8:	d1c8      	bne.n	800753c <_strtod_l+0x34>
 80075aa:	2101      	movs	r1, #1
 80075ac:	910a      	str	r1, [sp, #40]	; 0x28
 80075ae:	1c51      	adds	r1, r2, #1
 80075b0:	9115      	str	r1, [sp, #84]	; 0x54
 80075b2:	7852      	ldrb	r2, [r2, #1]
 80075b4:	2a00      	cmp	r2, #0
 80075b6:	d1c3      	bne.n	8007540 <_strtod_l+0x38>
 80075b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80075ba:	9515      	str	r5, [sp, #84]	; 0x54
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f040 855f 	bne.w	8008080 <_strtod_l+0xb78>
 80075c2:	4642      	mov	r2, r8
 80075c4:	464b      	mov	r3, r9
 80075c6:	e7e3      	b.n	8007590 <_strtod_l+0x88>
 80075c8:	2100      	movs	r1, #0
 80075ca:	e7ef      	b.n	80075ac <_strtod_l+0xa4>
 80075cc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80075ce:	b13a      	cbz	r2, 80075e0 <_strtod_l+0xd8>
 80075d0:	2135      	movs	r1, #53	; 0x35
 80075d2:	a818      	add	r0, sp, #96	; 0x60
 80075d4:	f7ff ff37 	bl	8007446 <__copybits>
 80075d8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80075da:	4620      	mov	r0, r4
 80075dc:	f7ff fb0a 	bl	8006bf4 <_Bfree>
 80075e0:	3f01      	subs	r7, #1
 80075e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80075e4:	2f04      	cmp	r7, #4
 80075e6:	d806      	bhi.n	80075f6 <_strtod_l+0xee>
 80075e8:	e8df f007 	tbb	[pc, r7]
 80075ec:	201d0314 	.word	0x201d0314
 80075f0:	14          	.byte	0x14
 80075f1:	00          	.byte	0x00
 80075f2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80075f6:	05e9      	lsls	r1, r5, #23
 80075f8:	bf48      	it	mi
 80075fa:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80075fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007602:	0d1b      	lsrs	r3, r3, #20
 8007604:	051b      	lsls	r3, r3, #20
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1b9      	bne.n	800757e <_strtod_l+0x76>
 800760a:	f7fe fb03 	bl	8005c14 <__errno>
 800760e:	2322      	movs	r3, #34	; 0x22
 8007610:	6003      	str	r3, [r0, #0]
 8007612:	e7b4      	b.n	800757e <_strtod_l+0x76>
 8007614:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007618:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800761c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007620:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007624:	e7e7      	b.n	80075f6 <_strtod_l+0xee>
 8007626:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80077a0 <_strtod_l+0x298>
 800762a:	e7e4      	b.n	80075f6 <_strtod_l+0xee>
 800762c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007630:	f04f 38ff 	mov.w	r8, #4294967295
 8007634:	e7df      	b.n	80075f6 <_strtod_l+0xee>
 8007636:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007638:	1c5a      	adds	r2, r3, #1
 800763a:	9215      	str	r2, [sp, #84]	; 0x54
 800763c:	785b      	ldrb	r3, [r3, #1]
 800763e:	2b30      	cmp	r3, #48	; 0x30
 8007640:	d0f9      	beq.n	8007636 <_strtod_l+0x12e>
 8007642:	2b00      	cmp	r3, #0
 8007644:	d09b      	beq.n	800757e <_strtod_l+0x76>
 8007646:	2301      	movs	r3, #1
 8007648:	f04f 0a00 	mov.w	sl, #0
 800764c:	9304      	str	r3, [sp, #16]
 800764e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007650:	930b      	str	r3, [sp, #44]	; 0x2c
 8007652:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007656:	46d3      	mov	fp, sl
 8007658:	220a      	movs	r2, #10
 800765a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800765c:	7806      	ldrb	r6, [r0, #0]
 800765e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007662:	b2d9      	uxtb	r1, r3
 8007664:	2909      	cmp	r1, #9
 8007666:	d926      	bls.n	80076b6 <_strtod_l+0x1ae>
 8007668:	494c      	ldr	r1, [pc, #304]	; (800779c <_strtod_l+0x294>)
 800766a:	2201      	movs	r2, #1
 800766c:	f000 ffe6 	bl	800863c <strncmp>
 8007670:	2800      	cmp	r0, #0
 8007672:	d030      	beq.n	80076d6 <_strtod_l+0x1ce>
 8007674:	2000      	movs	r0, #0
 8007676:	4632      	mov	r2, r6
 8007678:	9005      	str	r0, [sp, #20]
 800767a:	465e      	mov	r6, fp
 800767c:	4603      	mov	r3, r0
 800767e:	2a65      	cmp	r2, #101	; 0x65
 8007680:	d001      	beq.n	8007686 <_strtod_l+0x17e>
 8007682:	2a45      	cmp	r2, #69	; 0x45
 8007684:	d113      	bne.n	80076ae <_strtod_l+0x1a6>
 8007686:	b91e      	cbnz	r6, 8007690 <_strtod_l+0x188>
 8007688:	9a04      	ldr	r2, [sp, #16]
 800768a:	4302      	orrs	r2, r0
 800768c:	d094      	beq.n	80075b8 <_strtod_l+0xb0>
 800768e:	2600      	movs	r6, #0
 8007690:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007692:	1c6a      	adds	r2, r5, #1
 8007694:	9215      	str	r2, [sp, #84]	; 0x54
 8007696:	786a      	ldrb	r2, [r5, #1]
 8007698:	2a2b      	cmp	r2, #43	; 0x2b
 800769a:	d074      	beq.n	8007786 <_strtod_l+0x27e>
 800769c:	2a2d      	cmp	r2, #45	; 0x2d
 800769e:	d078      	beq.n	8007792 <_strtod_l+0x28a>
 80076a0:	f04f 0c00 	mov.w	ip, #0
 80076a4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80076a8:	2909      	cmp	r1, #9
 80076aa:	d97f      	bls.n	80077ac <_strtod_l+0x2a4>
 80076ac:	9515      	str	r5, [sp, #84]	; 0x54
 80076ae:	2700      	movs	r7, #0
 80076b0:	e09e      	b.n	80077f0 <_strtod_l+0x2e8>
 80076b2:	2300      	movs	r3, #0
 80076b4:	e7c8      	b.n	8007648 <_strtod_l+0x140>
 80076b6:	f1bb 0f08 	cmp.w	fp, #8
 80076ba:	bfd8      	it	le
 80076bc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80076be:	f100 0001 	add.w	r0, r0, #1
 80076c2:	bfda      	itte	le
 80076c4:	fb02 3301 	mlale	r3, r2, r1, r3
 80076c8:	9309      	strle	r3, [sp, #36]	; 0x24
 80076ca:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80076ce:	f10b 0b01 	add.w	fp, fp, #1
 80076d2:	9015      	str	r0, [sp, #84]	; 0x54
 80076d4:	e7c1      	b.n	800765a <_strtod_l+0x152>
 80076d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076d8:	1c5a      	adds	r2, r3, #1
 80076da:	9215      	str	r2, [sp, #84]	; 0x54
 80076dc:	785a      	ldrb	r2, [r3, #1]
 80076de:	f1bb 0f00 	cmp.w	fp, #0
 80076e2:	d037      	beq.n	8007754 <_strtod_l+0x24c>
 80076e4:	9005      	str	r0, [sp, #20]
 80076e6:	465e      	mov	r6, fp
 80076e8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80076ec:	2b09      	cmp	r3, #9
 80076ee:	d912      	bls.n	8007716 <_strtod_l+0x20e>
 80076f0:	2301      	movs	r3, #1
 80076f2:	e7c4      	b.n	800767e <_strtod_l+0x176>
 80076f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076f6:	1c5a      	adds	r2, r3, #1
 80076f8:	9215      	str	r2, [sp, #84]	; 0x54
 80076fa:	785a      	ldrb	r2, [r3, #1]
 80076fc:	3001      	adds	r0, #1
 80076fe:	2a30      	cmp	r2, #48	; 0x30
 8007700:	d0f8      	beq.n	80076f4 <_strtod_l+0x1ec>
 8007702:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007706:	2b08      	cmp	r3, #8
 8007708:	f200 84c1 	bhi.w	800808e <_strtod_l+0xb86>
 800770c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800770e:	9005      	str	r0, [sp, #20]
 8007710:	2000      	movs	r0, #0
 8007712:	930b      	str	r3, [sp, #44]	; 0x2c
 8007714:	4606      	mov	r6, r0
 8007716:	3a30      	subs	r2, #48	; 0x30
 8007718:	f100 0301 	add.w	r3, r0, #1
 800771c:	d014      	beq.n	8007748 <_strtod_l+0x240>
 800771e:	9905      	ldr	r1, [sp, #20]
 8007720:	4419      	add	r1, r3
 8007722:	9105      	str	r1, [sp, #20]
 8007724:	4633      	mov	r3, r6
 8007726:	eb00 0c06 	add.w	ip, r0, r6
 800772a:	210a      	movs	r1, #10
 800772c:	4563      	cmp	r3, ip
 800772e:	d113      	bne.n	8007758 <_strtod_l+0x250>
 8007730:	1833      	adds	r3, r6, r0
 8007732:	2b08      	cmp	r3, #8
 8007734:	f106 0601 	add.w	r6, r6, #1
 8007738:	4406      	add	r6, r0
 800773a:	dc1a      	bgt.n	8007772 <_strtod_l+0x26a>
 800773c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800773e:	230a      	movs	r3, #10
 8007740:	fb03 2301 	mla	r3, r3, r1, r2
 8007744:	9309      	str	r3, [sp, #36]	; 0x24
 8007746:	2300      	movs	r3, #0
 8007748:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800774a:	1c51      	adds	r1, r2, #1
 800774c:	9115      	str	r1, [sp, #84]	; 0x54
 800774e:	7852      	ldrb	r2, [r2, #1]
 8007750:	4618      	mov	r0, r3
 8007752:	e7c9      	b.n	80076e8 <_strtod_l+0x1e0>
 8007754:	4658      	mov	r0, fp
 8007756:	e7d2      	b.n	80076fe <_strtod_l+0x1f6>
 8007758:	2b08      	cmp	r3, #8
 800775a:	f103 0301 	add.w	r3, r3, #1
 800775e:	dc03      	bgt.n	8007768 <_strtod_l+0x260>
 8007760:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007762:	434f      	muls	r7, r1
 8007764:	9709      	str	r7, [sp, #36]	; 0x24
 8007766:	e7e1      	b.n	800772c <_strtod_l+0x224>
 8007768:	2b10      	cmp	r3, #16
 800776a:	bfd8      	it	le
 800776c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007770:	e7dc      	b.n	800772c <_strtod_l+0x224>
 8007772:	2e10      	cmp	r6, #16
 8007774:	bfdc      	itt	le
 8007776:	230a      	movle	r3, #10
 8007778:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800777c:	e7e3      	b.n	8007746 <_strtod_l+0x23e>
 800777e:	2300      	movs	r3, #0
 8007780:	9305      	str	r3, [sp, #20]
 8007782:	2301      	movs	r3, #1
 8007784:	e780      	b.n	8007688 <_strtod_l+0x180>
 8007786:	f04f 0c00 	mov.w	ip, #0
 800778a:	1caa      	adds	r2, r5, #2
 800778c:	9215      	str	r2, [sp, #84]	; 0x54
 800778e:	78aa      	ldrb	r2, [r5, #2]
 8007790:	e788      	b.n	80076a4 <_strtod_l+0x19c>
 8007792:	f04f 0c01 	mov.w	ip, #1
 8007796:	e7f8      	b.n	800778a <_strtod_l+0x282>
 8007798:	080096d0 	.word	0x080096d0
 800779c:	080096cc 	.word	0x080096cc
 80077a0:	7ff00000 	.word	0x7ff00000
 80077a4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80077a6:	1c51      	adds	r1, r2, #1
 80077a8:	9115      	str	r1, [sp, #84]	; 0x54
 80077aa:	7852      	ldrb	r2, [r2, #1]
 80077ac:	2a30      	cmp	r2, #48	; 0x30
 80077ae:	d0f9      	beq.n	80077a4 <_strtod_l+0x29c>
 80077b0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80077b4:	2908      	cmp	r1, #8
 80077b6:	f63f af7a 	bhi.w	80076ae <_strtod_l+0x1a6>
 80077ba:	3a30      	subs	r2, #48	; 0x30
 80077bc:	9208      	str	r2, [sp, #32]
 80077be:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80077c0:	920c      	str	r2, [sp, #48]	; 0x30
 80077c2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80077c4:	1c57      	adds	r7, r2, #1
 80077c6:	9715      	str	r7, [sp, #84]	; 0x54
 80077c8:	7852      	ldrb	r2, [r2, #1]
 80077ca:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80077ce:	f1be 0f09 	cmp.w	lr, #9
 80077d2:	d938      	bls.n	8007846 <_strtod_l+0x33e>
 80077d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80077d6:	1a7f      	subs	r7, r7, r1
 80077d8:	2f08      	cmp	r7, #8
 80077da:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80077de:	dc03      	bgt.n	80077e8 <_strtod_l+0x2e0>
 80077e0:	9908      	ldr	r1, [sp, #32]
 80077e2:	428f      	cmp	r7, r1
 80077e4:	bfa8      	it	ge
 80077e6:	460f      	movge	r7, r1
 80077e8:	f1bc 0f00 	cmp.w	ip, #0
 80077ec:	d000      	beq.n	80077f0 <_strtod_l+0x2e8>
 80077ee:	427f      	negs	r7, r7
 80077f0:	2e00      	cmp	r6, #0
 80077f2:	d14f      	bne.n	8007894 <_strtod_l+0x38c>
 80077f4:	9904      	ldr	r1, [sp, #16]
 80077f6:	4301      	orrs	r1, r0
 80077f8:	f47f aec1 	bne.w	800757e <_strtod_l+0x76>
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f47f aedb 	bne.w	80075b8 <_strtod_l+0xb0>
 8007802:	2a69      	cmp	r2, #105	; 0x69
 8007804:	d029      	beq.n	800785a <_strtod_l+0x352>
 8007806:	dc26      	bgt.n	8007856 <_strtod_l+0x34e>
 8007808:	2a49      	cmp	r2, #73	; 0x49
 800780a:	d026      	beq.n	800785a <_strtod_l+0x352>
 800780c:	2a4e      	cmp	r2, #78	; 0x4e
 800780e:	f47f aed3 	bne.w	80075b8 <_strtod_l+0xb0>
 8007812:	499b      	ldr	r1, [pc, #620]	; (8007a80 <_strtod_l+0x578>)
 8007814:	a815      	add	r0, sp, #84	; 0x54
 8007816:	f001 fa27 	bl	8008c68 <__match>
 800781a:	2800      	cmp	r0, #0
 800781c:	f43f aecc 	beq.w	80075b8 <_strtod_l+0xb0>
 8007820:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	2b28      	cmp	r3, #40	; 0x28
 8007826:	d12f      	bne.n	8007888 <_strtod_l+0x380>
 8007828:	4996      	ldr	r1, [pc, #600]	; (8007a84 <_strtod_l+0x57c>)
 800782a:	aa18      	add	r2, sp, #96	; 0x60
 800782c:	a815      	add	r0, sp, #84	; 0x54
 800782e:	f001 fa2f 	bl	8008c90 <__hexnan>
 8007832:	2805      	cmp	r0, #5
 8007834:	d128      	bne.n	8007888 <_strtod_l+0x380>
 8007836:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007838:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800783c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007840:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007844:	e69b      	b.n	800757e <_strtod_l+0x76>
 8007846:	9f08      	ldr	r7, [sp, #32]
 8007848:	210a      	movs	r1, #10
 800784a:	fb01 2107 	mla	r1, r1, r7, r2
 800784e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007852:	9208      	str	r2, [sp, #32]
 8007854:	e7b5      	b.n	80077c2 <_strtod_l+0x2ba>
 8007856:	2a6e      	cmp	r2, #110	; 0x6e
 8007858:	e7d9      	b.n	800780e <_strtod_l+0x306>
 800785a:	498b      	ldr	r1, [pc, #556]	; (8007a88 <_strtod_l+0x580>)
 800785c:	a815      	add	r0, sp, #84	; 0x54
 800785e:	f001 fa03 	bl	8008c68 <__match>
 8007862:	2800      	cmp	r0, #0
 8007864:	f43f aea8 	beq.w	80075b8 <_strtod_l+0xb0>
 8007868:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800786a:	4988      	ldr	r1, [pc, #544]	; (8007a8c <_strtod_l+0x584>)
 800786c:	3b01      	subs	r3, #1
 800786e:	a815      	add	r0, sp, #84	; 0x54
 8007870:	9315      	str	r3, [sp, #84]	; 0x54
 8007872:	f001 f9f9 	bl	8008c68 <__match>
 8007876:	b910      	cbnz	r0, 800787e <_strtod_l+0x376>
 8007878:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800787a:	3301      	adds	r3, #1
 800787c:	9315      	str	r3, [sp, #84]	; 0x54
 800787e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8007a9c <_strtod_l+0x594>
 8007882:	f04f 0800 	mov.w	r8, #0
 8007886:	e67a      	b.n	800757e <_strtod_l+0x76>
 8007888:	4881      	ldr	r0, [pc, #516]	; (8007a90 <_strtod_l+0x588>)
 800788a:	f000 ff09 	bl	80086a0 <nan>
 800788e:	ec59 8b10 	vmov	r8, r9, d0
 8007892:	e674      	b.n	800757e <_strtod_l+0x76>
 8007894:	9b05      	ldr	r3, [sp, #20]
 8007896:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007898:	1afb      	subs	r3, r7, r3
 800789a:	f1bb 0f00 	cmp.w	fp, #0
 800789e:	bf08      	it	eq
 80078a0:	46b3      	moveq	fp, r6
 80078a2:	2e10      	cmp	r6, #16
 80078a4:	9308      	str	r3, [sp, #32]
 80078a6:	4635      	mov	r5, r6
 80078a8:	bfa8      	it	ge
 80078aa:	2510      	movge	r5, #16
 80078ac:	f7f8 fe2a 	bl	8000504 <__aeabi_ui2d>
 80078b0:	2e09      	cmp	r6, #9
 80078b2:	4680      	mov	r8, r0
 80078b4:	4689      	mov	r9, r1
 80078b6:	dd13      	ble.n	80078e0 <_strtod_l+0x3d8>
 80078b8:	4b76      	ldr	r3, [pc, #472]	; (8007a94 <_strtod_l+0x58c>)
 80078ba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80078be:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80078c2:	f7f8 fe99 	bl	80005f8 <__aeabi_dmul>
 80078c6:	4680      	mov	r8, r0
 80078c8:	4650      	mov	r0, sl
 80078ca:	4689      	mov	r9, r1
 80078cc:	f7f8 fe1a 	bl	8000504 <__aeabi_ui2d>
 80078d0:	4602      	mov	r2, r0
 80078d2:	460b      	mov	r3, r1
 80078d4:	4640      	mov	r0, r8
 80078d6:	4649      	mov	r1, r9
 80078d8:	f7f8 fcd8 	bl	800028c <__adddf3>
 80078dc:	4680      	mov	r8, r0
 80078de:	4689      	mov	r9, r1
 80078e0:	2e0f      	cmp	r6, #15
 80078e2:	dc38      	bgt.n	8007956 <_strtod_l+0x44e>
 80078e4:	9b08      	ldr	r3, [sp, #32]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f43f ae49 	beq.w	800757e <_strtod_l+0x76>
 80078ec:	dd24      	ble.n	8007938 <_strtod_l+0x430>
 80078ee:	2b16      	cmp	r3, #22
 80078f0:	dc0b      	bgt.n	800790a <_strtod_l+0x402>
 80078f2:	4968      	ldr	r1, [pc, #416]	; (8007a94 <_strtod_l+0x58c>)
 80078f4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80078f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078fc:	4642      	mov	r2, r8
 80078fe:	464b      	mov	r3, r9
 8007900:	f7f8 fe7a 	bl	80005f8 <__aeabi_dmul>
 8007904:	4680      	mov	r8, r0
 8007906:	4689      	mov	r9, r1
 8007908:	e639      	b.n	800757e <_strtod_l+0x76>
 800790a:	9a08      	ldr	r2, [sp, #32]
 800790c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007910:	4293      	cmp	r3, r2
 8007912:	db20      	blt.n	8007956 <_strtod_l+0x44e>
 8007914:	4c5f      	ldr	r4, [pc, #380]	; (8007a94 <_strtod_l+0x58c>)
 8007916:	f1c6 060f 	rsb	r6, r6, #15
 800791a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800791e:	4642      	mov	r2, r8
 8007920:	464b      	mov	r3, r9
 8007922:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007926:	f7f8 fe67 	bl	80005f8 <__aeabi_dmul>
 800792a:	9b08      	ldr	r3, [sp, #32]
 800792c:	1b9e      	subs	r6, r3, r6
 800792e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007932:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007936:	e7e3      	b.n	8007900 <_strtod_l+0x3f8>
 8007938:	9b08      	ldr	r3, [sp, #32]
 800793a:	3316      	adds	r3, #22
 800793c:	db0b      	blt.n	8007956 <_strtod_l+0x44e>
 800793e:	9b05      	ldr	r3, [sp, #20]
 8007940:	1bdf      	subs	r7, r3, r7
 8007942:	4b54      	ldr	r3, [pc, #336]	; (8007a94 <_strtod_l+0x58c>)
 8007944:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007948:	e9d7 2300 	ldrd	r2, r3, [r7]
 800794c:	4640      	mov	r0, r8
 800794e:	4649      	mov	r1, r9
 8007950:	f7f8 ff7c 	bl	800084c <__aeabi_ddiv>
 8007954:	e7d6      	b.n	8007904 <_strtod_l+0x3fc>
 8007956:	9b08      	ldr	r3, [sp, #32]
 8007958:	1b75      	subs	r5, r6, r5
 800795a:	441d      	add	r5, r3
 800795c:	2d00      	cmp	r5, #0
 800795e:	dd70      	ble.n	8007a42 <_strtod_l+0x53a>
 8007960:	f015 030f 	ands.w	r3, r5, #15
 8007964:	d00a      	beq.n	800797c <_strtod_l+0x474>
 8007966:	494b      	ldr	r1, [pc, #300]	; (8007a94 <_strtod_l+0x58c>)
 8007968:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800796c:	4642      	mov	r2, r8
 800796e:	464b      	mov	r3, r9
 8007970:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007974:	f7f8 fe40 	bl	80005f8 <__aeabi_dmul>
 8007978:	4680      	mov	r8, r0
 800797a:	4689      	mov	r9, r1
 800797c:	f035 050f 	bics.w	r5, r5, #15
 8007980:	d04d      	beq.n	8007a1e <_strtod_l+0x516>
 8007982:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007986:	dd22      	ble.n	80079ce <_strtod_l+0x4c6>
 8007988:	2500      	movs	r5, #0
 800798a:	46ab      	mov	fp, r5
 800798c:	9509      	str	r5, [sp, #36]	; 0x24
 800798e:	9505      	str	r5, [sp, #20]
 8007990:	2322      	movs	r3, #34	; 0x22
 8007992:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007a9c <_strtod_l+0x594>
 8007996:	6023      	str	r3, [r4, #0]
 8007998:	f04f 0800 	mov.w	r8, #0
 800799c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f43f aded 	beq.w	800757e <_strtod_l+0x76>
 80079a4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80079a6:	4620      	mov	r0, r4
 80079a8:	f7ff f924 	bl	8006bf4 <_Bfree>
 80079ac:	9905      	ldr	r1, [sp, #20]
 80079ae:	4620      	mov	r0, r4
 80079b0:	f7ff f920 	bl	8006bf4 <_Bfree>
 80079b4:	4659      	mov	r1, fp
 80079b6:	4620      	mov	r0, r4
 80079b8:	f7ff f91c 	bl	8006bf4 <_Bfree>
 80079bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079be:	4620      	mov	r0, r4
 80079c0:	f7ff f918 	bl	8006bf4 <_Bfree>
 80079c4:	4629      	mov	r1, r5
 80079c6:	4620      	mov	r0, r4
 80079c8:	f7ff f914 	bl	8006bf4 <_Bfree>
 80079cc:	e5d7      	b.n	800757e <_strtod_l+0x76>
 80079ce:	4b32      	ldr	r3, [pc, #200]	; (8007a98 <_strtod_l+0x590>)
 80079d0:	9304      	str	r3, [sp, #16]
 80079d2:	2300      	movs	r3, #0
 80079d4:	112d      	asrs	r5, r5, #4
 80079d6:	4640      	mov	r0, r8
 80079d8:	4649      	mov	r1, r9
 80079da:	469a      	mov	sl, r3
 80079dc:	2d01      	cmp	r5, #1
 80079de:	dc21      	bgt.n	8007a24 <_strtod_l+0x51c>
 80079e0:	b10b      	cbz	r3, 80079e6 <_strtod_l+0x4de>
 80079e2:	4680      	mov	r8, r0
 80079e4:	4689      	mov	r9, r1
 80079e6:	492c      	ldr	r1, [pc, #176]	; (8007a98 <_strtod_l+0x590>)
 80079e8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80079ec:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80079f0:	4642      	mov	r2, r8
 80079f2:	464b      	mov	r3, r9
 80079f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079f8:	f7f8 fdfe 	bl	80005f8 <__aeabi_dmul>
 80079fc:	4b27      	ldr	r3, [pc, #156]	; (8007a9c <_strtod_l+0x594>)
 80079fe:	460a      	mov	r2, r1
 8007a00:	400b      	ands	r3, r1
 8007a02:	4927      	ldr	r1, [pc, #156]	; (8007aa0 <_strtod_l+0x598>)
 8007a04:	428b      	cmp	r3, r1
 8007a06:	4680      	mov	r8, r0
 8007a08:	d8be      	bhi.n	8007988 <_strtod_l+0x480>
 8007a0a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007a0e:	428b      	cmp	r3, r1
 8007a10:	bf86      	itte	hi
 8007a12:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8007aa4 <_strtod_l+0x59c>
 8007a16:	f04f 38ff 	movhi.w	r8, #4294967295
 8007a1a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007a1e:	2300      	movs	r3, #0
 8007a20:	9304      	str	r3, [sp, #16]
 8007a22:	e07b      	b.n	8007b1c <_strtod_l+0x614>
 8007a24:	07ea      	lsls	r2, r5, #31
 8007a26:	d505      	bpl.n	8007a34 <_strtod_l+0x52c>
 8007a28:	9b04      	ldr	r3, [sp, #16]
 8007a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2e:	f7f8 fde3 	bl	80005f8 <__aeabi_dmul>
 8007a32:	2301      	movs	r3, #1
 8007a34:	9a04      	ldr	r2, [sp, #16]
 8007a36:	3208      	adds	r2, #8
 8007a38:	f10a 0a01 	add.w	sl, sl, #1
 8007a3c:	106d      	asrs	r5, r5, #1
 8007a3e:	9204      	str	r2, [sp, #16]
 8007a40:	e7cc      	b.n	80079dc <_strtod_l+0x4d4>
 8007a42:	d0ec      	beq.n	8007a1e <_strtod_l+0x516>
 8007a44:	426d      	negs	r5, r5
 8007a46:	f015 020f 	ands.w	r2, r5, #15
 8007a4a:	d00a      	beq.n	8007a62 <_strtod_l+0x55a>
 8007a4c:	4b11      	ldr	r3, [pc, #68]	; (8007a94 <_strtod_l+0x58c>)
 8007a4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a52:	4640      	mov	r0, r8
 8007a54:	4649      	mov	r1, r9
 8007a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5a:	f7f8 fef7 	bl	800084c <__aeabi_ddiv>
 8007a5e:	4680      	mov	r8, r0
 8007a60:	4689      	mov	r9, r1
 8007a62:	112d      	asrs	r5, r5, #4
 8007a64:	d0db      	beq.n	8007a1e <_strtod_l+0x516>
 8007a66:	2d1f      	cmp	r5, #31
 8007a68:	dd1e      	ble.n	8007aa8 <_strtod_l+0x5a0>
 8007a6a:	2500      	movs	r5, #0
 8007a6c:	46ab      	mov	fp, r5
 8007a6e:	9509      	str	r5, [sp, #36]	; 0x24
 8007a70:	9505      	str	r5, [sp, #20]
 8007a72:	2322      	movs	r3, #34	; 0x22
 8007a74:	f04f 0800 	mov.w	r8, #0
 8007a78:	f04f 0900 	mov.w	r9, #0
 8007a7c:	6023      	str	r3, [r4, #0]
 8007a7e:	e78d      	b.n	800799c <_strtod_l+0x494>
 8007a80:	080094b9 	.word	0x080094b9
 8007a84:	080096e4 	.word	0x080096e4
 8007a88:	080094b1 	.word	0x080094b1
 8007a8c:	080094e8 	.word	0x080094e8
 8007a90:	08009875 	.word	0x08009875
 8007a94:	080095f8 	.word	0x080095f8
 8007a98:	080095d0 	.word	0x080095d0
 8007a9c:	7ff00000 	.word	0x7ff00000
 8007aa0:	7ca00000 	.word	0x7ca00000
 8007aa4:	7fefffff 	.word	0x7fefffff
 8007aa8:	f015 0310 	ands.w	r3, r5, #16
 8007aac:	bf18      	it	ne
 8007aae:	236a      	movne	r3, #106	; 0x6a
 8007ab0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8007e54 <_strtod_l+0x94c>
 8007ab4:	9304      	str	r3, [sp, #16]
 8007ab6:	4640      	mov	r0, r8
 8007ab8:	4649      	mov	r1, r9
 8007aba:	2300      	movs	r3, #0
 8007abc:	07ea      	lsls	r2, r5, #31
 8007abe:	d504      	bpl.n	8007aca <_strtod_l+0x5c2>
 8007ac0:	e9da 2300 	ldrd	r2, r3, [sl]
 8007ac4:	f7f8 fd98 	bl	80005f8 <__aeabi_dmul>
 8007ac8:	2301      	movs	r3, #1
 8007aca:	106d      	asrs	r5, r5, #1
 8007acc:	f10a 0a08 	add.w	sl, sl, #8
 8007ad0:	d1f4      	bne.n	8007abc <_strtod_l+0x5b4>
 8007ad2:	b10b      	cbz	r3, 8007ad8 <_strtod_l+0x5d0>
 8007ad4:	4680      	mov	r8, r0
 8007ad6:	4689      	mov	r9, r1
 8007ad8:	9b04      	ldr	r3, [sp, #16]
 8007ada:	b1bb      	cbz	r3, 8007b0c <_strtod_l+0x604>
 8007adc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007ae0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	4649      	mov	r1, r9
 8007ae8:	dd10      	ble.n	8007b0c <_strtod_l+0x604>
 8007aea:	2b1f      	cmp	r3, #31
 8007aec:	f340 811e 	ble.w	8007d2c <_strtod_l+0x824>
 8007af0:	2b34      	cmp	r3, #52	; 0x34
 8007af2:	bfde      	ittt	le
 8007af4:	f04f 33ff 	movle.w	r3, #4294967295
 8007af8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007afc:	4093      	lslle	r3, r2
 8007afe:	f04f 0800 	mov.w	r8, #0
 8007b02:	bfcc      	ite	gt
 8007b04:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007b08:	ea03 0901 	andle.w	r9, r3, r1
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	2300      	movs	r3, #0
 8007b10:	4640      	mov	r0, r8
 8007b12:	4649      	mov	r1, r9
 8007b14:	f7f8 ffd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	d1a6      	bne.n	8007a6a <_strtod_l+0x562>
 8007b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b1e:	9300      	str	r3, [sp, #0]
 8007b20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b22:	4633      	mov	r3, r6
 8007b24:	465a      	mov	r2, fp
 8007b26:	4620      	mov	r0, r4
 8007b28:	f7ff f8cc 	bl	8006cc4 <__s2b>
 8007b2c:	9009      	str	r0, [sp, #36]	; 0x24
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	f43f af2a 	beq.w	8007988 <_strtod_l+0x480>
 8007b34:	9a08      	ldr	r2, [sp, #32]
 8007b36:	9b05      	ldr	r3, [sp, #20]
 8007b38:	2a00      	cmp	r2, #0
 8007b3a:	eba3 0307 	sub.w	r3, r3, r7
 8007b3e:	bfa8      	it	ge
 8007b40:	2300      	movge	r3, #0
 8007b42:	930c      	str	r3, [sp, #48]	; 0x30
 8007b44:	2500      	movs	r5, #0
 8007b46:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007b4a:	9312      	str	r3, [sp, #72]	; 0x48
 8007b4c:	46ab      	mov	fp, r5
 8007b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b50:	4620      	mov	r0, r4
 8007b52:	6859      	ldr	r1, [r3, #4]
 8007b54:	f7ff f80e 	bl	8006b74 <_Balloc>
 8007b58:	9005      	str	r0, [sp, #20]
 8007b5a:	2800      	cmp	r0, #0
 8007b5c:	f43f af18 	beq.w	8007990 <_strtod_l+0x488>
 8007b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b62:	691a      	ldr	r2, [r3, #16]
 8007b64:	3202      	adds	r2, #2
 8007b66:	f103 010c 	add.w	r1, r3, #12
 8007b6a:	0092      	lsls	r2, r2, #2
 8007b6c:	300c      	adds	r0, #12
 8007b6e:	f000 fd87 	bl	8008680 <memcpy>
 8007b72:	ec49 8b10 	vmov	d0, r8, r9
 8007b76:	aa18      	add	r2, sp, #96	; 0x60
 8007b78:	a917      	add	r1, sp, #92	; 0x5c
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f7ff fbd6 	bl	800732c <__d2b>
 8007b80:	ec49 8b18 	vmov	d8, r8, r9
 8007b84:	9016      	str	r0, [sp, #88]	; 0x58
 8007b86:	2800      	cmp	r0, #0
 8007b88:	f43f af02 	beq.w	8007990 <_strtod_l+0x488>
 8007b8c:	2101      	movs	r1, #1
 8007b8e:	4620      	mov	r0, r4
 8007b90:	f7ff f930 	bl	8006df4 <__i2b>
 8007b94:	4683      	mov	fp, r0
 8007b96:	2800      	cmp	r0, #0
 8007b98:	f43f aefa 	beq.w	8007990 <_strtod_l+0x488>
 8007b9c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007b9e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007ba0:	2e00      	cmp	r6, #0
 8007ba2:	bfab      	itete	ge
 8007ba4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8007ba6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007ba8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007baa:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8007bae:	bfac      	ite	ge
 8007bb0:	eb06 0a03 	addge.w	sl, r6, r3
 8007bb4:	1b9f      	sublt	r7, r3, r6
 8007bb6:	9b04      	ldr	r3, [sp, #16]
 8007bb8:	1af6      	subs	r6, r6, r3
 8007bba:	4416      	add	r6, r2
 8007bbc:	4ba0      	ldr	r3, [pc, #640]	; (8007e40 <_strtod_l+0x938>)
 8007bbe:	3e01      	subs	r6, #1
 8007bc0:	429e      	cmp	r6, r3
 8007bc2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007bc6:	f280 80c4 	bge.w	8007d52 <_strtod_l+0x84a>
 8007bca:	1b9b      	subs	r3, r3, r6
 8007bcc:	2b1f      	cmp	r3, #31
 8007bce:	eba2 0203 	sub.w	r2, r2, r3
 8007bd2:	f04f 0101 	mov.w	r1, #1
 8007bd6:	f300 80b0 	bgt.w	8007d3a <_strtod_l+0x832>
 8007bda:	fa01 f303 	lsl.w	r3, r1, r3
 8007bde:	930e      	str	r3, [sp, #56]	; 0x38
 8007be0:	2300      	movs	r3, #0
 8007be2:	930d      	str	r3, [sp, #52]	; 0x34
 8007be4:	eb0a 0602 	add.w	r6, sl, r2
 8007be8:	9b04      	ldr	r3, [sp, #16]
 8007bea:	45b2      	cmp	sl, r6
 8007bec:	4417      	add	r7, r2
 8007bee:	441f      	add	r7, r3
 8007bf0:	4653      	mov	r3, sl
 8007bf2:	bfa8      	it	ge
 8007bf4:	4633      	movge	r3, r6
 8007bf6:	42bb      	cmp	r3, r7
 8007bf8:	bfa8      	it	ge
 8007bfa:	463b      	movge	r3, r7
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	bfc2      	ittt	gt
 8007c00:	1af6      	subgt	r6, r6, r3
 8007c02:	1aff      	subgt	r7, r7, r3
 8007c04:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007c08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	dd17      	ble.n	8007c3e <_strtod_l+0x736>
 8007c0e:	4659      	mov	r1, fp
 8007c10:	461a      	mov	r2, r3
 8007c12:	4620      	mov	r0, r4
 8007c14:	f7ff f9ae 	bl	8006f74 <__pow5mult>
 8007c18:	4683      	mov	fp, r0
 8007c1a:	2800      	cmp	r0, #0
 8007c1c:	f43f aeb8 	beq.w	8007990 <_strtod_l+0x488>
 8007c20:	4601      	mov	r1, r0
 8007c22:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007c24:	4620      	mov	r0, r4
 8007c26:	f7ff f8fb 	bl	8006e20 <__multiply>
 8007c2a:	900b      	str	r0, [sp, #44]	; 0x2c
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	f43f aeaf 	beq.w	8007990 <_strtod_l+0x488>
 8007c32:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007c34:	4620      	mov	r0, r4
 8007c36:	f7fe ffdd 	bl	8006bf4 <_Bfree>
 8007c3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c3c:	9316      	str	r3, [sp, #88]	; 0x58
 8007c3e:	2e00      	cmp	r6, #0
 8007c40:	f300 808c 	bgt.w	8007d5c <_strtod_l+0x854>
 8007c44:	9b08      	ldr	r3, [sp, #32]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	dd08      	ble.n	8007c5c <_strtod_l+0x754>
 8007c4a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c4c:	9905      	ldr	r1, [sp, #20]
 8007c4e:	4620      	mov	r0, r4
 8007c50:	f7ff f990 	bl	8006f74 <__pow5mult>
 8007c54:	9005      	str	r0, [sp, #20]
 8007c56:	2800      	cmp	r0, #0
 8007c58:	f43f ae9a 	beq.w	8007990 <_strtod_l+0x488>
 8007c5c:	2f00      	cmp	r7, #0
 8007c5e:	dd08      	ble.n	8007c72 <_strtod_l+0x76a>
 8007c60:	9905      	ldr	r1, [sp, #20]
 8007c62:	463a      	mov	r2, r7
 8007c64:	4620      	mov	r0, r4
 8007c66:	f7ff f9df 	bl	8007028 <__lshift>
 8007c6a:	9005      	str	r0, [sp, #20]
 8007c6c:	2800      	cmp	r0, #0
 8007c6e:	f43f ae8f 	beq.w	8007990 <_strtod_l+0x488>
 8007c72:	f1ba 0f00 	cmp.w	sl, #0
 8007c76:	dd08      	ble.n	8007c8a <_strtod_l+0x782>
 8007c78:	4659      	mov	r1, fp
 8007c7a:	4652      	mov	r2, sl
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	f7ff f9d3 	bl	8007028 <__lshift>
 8007c82:	4683      	mov	fp, r0
 8007c84:	2800      	cmp	r0, #0
 8007c86:	f43f ae83 	beq.w	8007990 <_strtod_l+0x488>
 8007c8a:	9a05      	ldr	r2, [sp, #20]
 8007c8c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007c8e:	4620      	mov	r0, r4
 8007c90:	f7ff fa52 	bl	8007138 <__mdiff>
 8007c94:	4605      	mov	r5, r0
 8007c96:	2800      	cmp	r0, #0
 8007c98:	f43f ae7a 	beq.w	8007990 <_strtod_l+0x488>
 8007c9c:	68c3      	ldr	r3, [r0, #12]
 8007c9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	60c3      	str	r3, [r0, #12]
 8007ca4:	4659      	mov	r1, fp
 8007ca6:	f7ff fa2b 	bl	8007100 <__mcmp>
 8007caa:	2800      	cmp	r0, #0
 8007cac:	da60      	bge.n	8007d70 <_strtod_l+0x868>
 8007cae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cb0:	ea53 0308 	orrs.w	r3, r3, r8
 8007cb4:	f040 8084 	bne.w	8007dc0 <_strtod_l+0x8b8>
 8007cb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d17f      	bne.n	8007dc0 <_strtod_l+0x8b8>
 8007cc0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007cc4:	0d1b      	lsrs	r3, r3, #20
 8007cc6:	051b      	lsls	r3, r3, #20
 8007cc8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007ccc:	d978      	bls.n	8007dc0 <_strtod_l+0x8b8>
 8007cce:	696b      	ldr	r3, [r5, #20]
 8007cd0:	b913      	cbnz	r3, 8007cd8 <_strtod_l+0x7d0>
 8007cd2:	692b      	ldr	r3, [r5, #16]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	dd73      	ble.n	8007dc0 <_strtod_l+0x8b8>
 8007cd8:	4629      	mov	r1, r5
 8007cda:	2201      	movs	r2, #1
 8007cdc:	4620      	mov	r0, r4
 8007cde:	f7ff f9a3 	bl	8007028 <__lshift>
 8007ce2:	4659      	mov	r1, fp
 8007ce4:	4605      	mov	r5, r0
 8007ce6:	f7ff fa0b 	bl	8007100 <__mcmp>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	dd68      	ble.n	8007dc0 <_strtod_l+0x8b8>
 8007cee:	9904      	ldr	r1, [sp, #16]
 8007cf0:	4a54      	ldr	r2, [pc, #336]	; (8007e44 <_strtod_l+0x93c>)
 8007cf2:	464b      	mov	r3, r9
 8007cf4:	2900      	cmp	r1, #0
 8007cf6:	f000 8084 	beq.w	8007e02 <_strtod_l+0x8fa>
 8007cfa:	ea02 0109 	and.w	r1, r2, r9
 8007cfe:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007d02:	dc7e      	bgt.n	8007e02 <_strtod_l+0x8fa>
 8007d04:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007d08:	f77f aeb3 	ble.w	8007a72 <_strtod_l+0x56a>
 8007d0c:	4b4e      	ldr	r3, [pc, #312]	; (8007e48 <_strtod_l+0x940>)
 8007d0e:	4640      	mov	r0, r8
 8007d10:	4649      	mov	r1, r9
 8007d12:	2200      	movs	r2, #0
 8007d14:	f7f8 fc70 	bl	80005f8 <__aeabi_dmul>
 8007d18:	4b4a      	ldr	r3, [pc, #296]	; (8007e44 <_strtod_l+0x93c>)
 8007d1a:	400b      	ands	r3, r1
 8007d1c:	4680      	mov	r8, r0
 8007d1e:	4689      	mov	r9, r1
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f47f ae3f 	bne.w	80079a4 <_strtod_l+0x49c>
 8007d26:	2322      	movs	r3, #34	; 0x22
 8007d28:	6023      	str	r3, [r4, #0]
 8007d2a:	e63b      	b.n	80079a4 <_strtod_l+0x49c>
 8007d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d30:	fa02 f303 	lsl.w	r3, r2, r3
 8007d34:	ea03 0808 	and.w	r8, r3, r8
 8007d38:	e6e8      	b.n	8007b0c <_strtod_l+0x604>
 8007d3a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007d3e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007d42:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007d46:	36e2      	adds	r6, #226	; 0xe2
 8007d48:	fa01 f306 	lsl.w	r3, r1, r6
 8007d4c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007d50:	e748      	b.n	8007be4 <_strtod_l+0x6dc>
 8007d52:	2100      	movs	r1, #0
 8007d54:	2301      	movs	r3, #1
 8007d56:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8007d5a:	e743      	b.n	8007be4 <_strtod_l+0x6dc>
 8007d5c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007d5e:	4632      	mov	r2, r6
 8007d60:	4620      	mov	r0, r4
 8007d62:	f7ff f961 	bl	8007028 <__lshift>
 8007d66:	9016      	str	r0, [sp, #88]	; 0x58
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	f47f af6b 	bne.w	8007c44 <_strtod_l+0x73c>
 8007d6e:	e60f      	b.n	8007990 <_strtod_l+0x488>
 8007d70:	46ca      	mov	sl, r9
 8007d72:	d171      	bne.n	8007e58 <_strtod_l+0x950>
 8007d74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d76:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d7a:	b352      	cbz	r2, 8007dd2 <_strtod_l+0x8ca>
 8007d7c:	4a33      	ldr	r2, [pc, #204]	; (8007e4c <_strtod_l+0x944>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d12a      	bne.n	8007dd8 <_strtod_l+0x8d0>
 8007d82:	9b04      	ldr	r3, [sp, #16]
 8007d84:	4641      	mov	r1, r8
 8007d86:	b1fb      	cbz	r3, 8007dc8 <_strtod_l+0x8c0>
 8007d88:	4b2e      	ldr	r3, [pc, #184]	; (8007e44 <_strtod_l+0x93c>)
 8007d8a:	ea09 0303 	and.w	r3, r9, r3
 8007d8e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007d92:	f04f 32ff 	mov.w	r2, #4294967295
 8007d96:	d81a      	bhi.n	8007dce <_strtod_l+0x8c6>
 8007d98:	0d1b      	lsrs	r3, r3, #20
 8007d9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007da2:	4299      	cmp	r1, r3
 8007da4:	d118      	bne.n	8007dd8 <_strtod_l+0x8d0>
 8007da6:	4b2a      	ldr	r3, [pc, #168]	; (8007e50 <_strtod_l+0x948>)
 8007da8:	459a      	cmp	sl, r3
 8007daa:	d102      	bne.n	8007db2 <_strtod_l+0x8aa>
 8007dac:	3101      	adds	r1, #1
 8007dae:	f43f adef 	beq.w	8007990 <_strtod_l+0x488>
 8007db2:	4b24      	ldr	r3, [pc, #144]	; (8007e44 <_strtod_l+0x93c>)
 8007db4:	ea0a 0303 	and.w	r3, sl, r3
 8007db8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007dbc:	f04f 0800 	mov.w	r8, #0
 8007dc0:	9b04      	ldr	r3, [sp, #16]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1a2      	bne.n	8007d0c <_strtod_l+0x804>
 8007dc6:	e5ed      	b.n	80079a4 <_strtod_l+0x49c>
 8007dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8007dcc:	e7e9      	b.n	8007da2 <_strtod_l+0x89a>
 8007dce:	4613      	mov	r3, r2
 8007dd0:	e7e7      	b.n	8007da2 <_strtod_l+0x89a>
 8007dd2:	ea53 0308 	orrs.w	r3, r3, r8
 8007dd6:	d08a      	beq.n	8007cee <_strtod_l+0x7e6>
 8007dd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dda:	b1e3      	cbz	r3, 8007e16 <_strtod_l+0x90e>
 8007ddc:	ea13 0f0a 	tst.w	r3, sl
 8007de0:	d0ee      	beq.n	8007dc0 <_strtod_l+0x8b8>
 8007de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007de4:	9a04      	ldr	r2, [sp, #16]
 8007de6:	4640      	mov	r0, r8
 8007de8:	4649      	mov	r1, r9
 8007dea:	b1c3      	cbz	r3, 8007e1e <_strtod_l+0x916>
 8007dec:	f7ff fb6f 	bl	80074ce <sulp>
 8007df0:	4602      	mov	r2, r0
 8007df2:	460b      	mov	r3, r1
 8007df4:	ec51 0b18 	vmov	r0, r1, d8
 8007df8:	f7f8 fa48 	bl	800028c <__adddf3>
 8007dfc:	4680      	mov	r8, r0
 8007dfe:	4689      	mov	r9, r1
 8007e00:	e7de      	b.n	8007dc0 <_strtod_l+0x8b8>
 8007e02:	4013      	ands	r3, r2
 8007e04:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007e08:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007e0c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007e10:	f04f 38ff 	mov.w	r8, #4294967295
 8007e14:	e7d4      	b.n	8007dc0 <_strtod_l+0x8b8>
 8007e16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e18:	ea13 0f08 	tst.w	r3, r8
 8007e1c:	e7e0      	b.n	8007de0 <_strtod_l+0x8d8>
 8007e1e:	f7ff fb56 	bl	80074ce <sulp>
 8007e22:	4602      	mov	r2, r0
 8007e24:	460b      	mov	r3, r1
 8007e26:	ec51 0b18 	vmov	r0, r1, d8
 8007e2a:	f7f8 fa2d 	bl	8000288 <__aeabi_dsub>
 8007e2e:	2200      	movs	r2, #0
 8007e30:	2300      	movs	r3, #0
 8007e32:	4680      	mov	r8, r0
 8007e34:	4689      	mov	r9, r1
 8007e36:	f7f8 fe47 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	d0c0      	beq.n	8007dc0 <_strtod_l+0x8b8>
 8007e3e:	e618      	b.n	8007a72 <_strtod_l+0x56a>
 8007e40:	fffffc02 	.word	0xfffffc02
 8007e44:	7ff00000 	.word	0x7ff00000
 8007e48:	39500000 	.word	0x39500000
 8007e4c:	000fffff 	.word	0x000fffff
 8007e50:	7fefffff 	.word	0x7fefffff
 8007e54:	080096f8 	.word	0x080096f8
 8007e58:	4659      	mov	r1, fp
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	f7ff fac0 	bl	80073e0 <__ratio>
 8007e60:	ec57 6b10 	vmov	r6, r7, d0
 8007e64:	ee10 0a10 	vmov	r0, s0
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e6e:	4639      	mov	r1, r7
 8007e70:	f7f8 fe3e 	bl	8000af0 <__aeabi_dcmple>
 8007e74:	2800      	cmp	r0, #0
 8007e76:	d071      	beq.n	8007f5c <_strtod_l+0xa54>
 8007e78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d17c      	bne.n	8007f78 <_strtod_l+0xa70>
 8007e7e:	f1b8 0f00 	cmp.w	r8, #0
 8007e82:	d15a      	bne.n	8007f3a <_strtod_l+0xa32>
 8007e84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d15d      	bne.n	8007f48 <_strtod_l+0xa40>
 8007e8c:	4b90      	ldr	r3, [pc, #576]	; (80080d0 <_strtod_l+0xbc8>)
 8007e8e:	2200      	movs	r2, #0
 8007e90:	4630      	mov	r0, r6
 8007e92:	4639      	mov	r1, r7
 8007e94:	f7f8 fe22 	bl	8000adc <__aeabi_dcmplt>
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	d15c      	bne.n	8007f56 <_strtod_l+0xa4e>
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	4639      	mov	r1, r7
 8007ea0:	4b8c      	ldr	r3, [pc, #560]	; (80080d4 <_strtod_l+0xbcc>)
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f7f8 fba8 	bl	80005f8 <__aeabi_dmul>
 8007ea8:	4606      	mov	r6, r0
 8007eaa:	460f      	mov	r7, r1
 8007eac:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007eb0:	9606      	str	r6, [sp, #24]
 8007eb2:	9307      	str	r3, [sp, #28]
 8007eb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007eb8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007ebc:	4b86      	ldr	r3, [pc, #536]	; (80080d8 <_strtod_l+0xbd0>)
 8007ebe:	ea0a 0303 	and.w	r3, sl, r3
 8007ec2:	930d      	str	r3, [sp, #52]	; 0x34
 8007ec4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ec6:	4b85      	ldr	r3, [pc, #532]	; (80080dc <_strtod_l+0xbd4>)
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	f040 8090 	bne.w	8007fee <_strtod_l+0xae6>
 8007ece:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007ed2:	ec49 8b10 	vmov	d0, r8, r9
 8007ed6:	f7ff f9b9 	bl	800724c <__ulp>
 8007eda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ede:	ec51 0b10 	vmov	r0, r1, d0
 8007ee2:	f7f8 fb89 	bl	80005f8 <__aeabi_dmul>
 8007ee6:	4642      	mov	r2, r8
 8007ee8:	464b      	mov	r3, r9
 8007eea:	f7f8 f9cf 	bl	800028c <__adddf3>
 8007eee:	460b      	mov	r3, r1
 8007ef0:	4979      	ldr	r1, [pc, #484]	; (80080d8 <_strtod_l+0xbd0>)
 8007ef2:	4a7b      	ldr	r2, [pc, #492]	; (80080e0 <_strtod_l+0xbd8>)
 8007ef4:	4019      	ands	r1, r3
 8007ef6:	4291      	cmp	r1, r2
 8007ef8:	4680      	mov	r8, r0
 8007efa:	d944      	bls.n	8007f86 <_strtod_l+0xa7e>
 8007efc:	ee18 2a90 	vmov	r2, s17
 8007f00:	4b78      	ldr	r3, [pc, #480]	; (80080e4 <_strtod_l+0xbdc>)
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d104      	bne.n	8007f10 <_strtod_l+0xa08>
 8007f06:	ee18 3a10 	vmov	r3, s16
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	f43f ad40 	beq.w	8007990 <_strtod_l+0x488>
 8007f10:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80080e4 <_strtod_l+0xbdc>
 8007f14:	f04f 38ff 	mov.w	r8, #4294967295
 8007f18:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	f7fe fe6a 	bl	8006bf4 <_Bfree>
 8007f20:	9905      	ldr	r1, [sp, #20]
 8007f22:	4620      	mov	r0, r4
 8007f24:	f7fe fe66 	bl	8006bf4 <_Bfree>
 8007f28:	4659      	mov	r1, fp
 8007f2a:	4620      	mov	r0, r4
 8007f2c:	f7fe fe62 	bl	8006bf4 <_Bfree>
 8007f30:	4629      	mov	r1, r5
 8007f32:	4620      	mov	r0, r4
 8007f34:	f7fe fe5e 	bl	8006bf4 <_Bfree>
 8007f38:	e609      	b.n	8007b4e <_strtod_l+0x646>
 8007f3a:	f1b8 0f01 	cmp.w	r8, #1
 8007f3e:	d103      	bne.n	8007f48 <_strtod_l+0xa40>
 8007f40:	f1b9 0f00 	cmp.w	r9, #0
 8007f44:	f43f ad95 	beq.w	8007a72 <_strtod_l+0x56a>
 8007f48:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80080a0 <_strtod_l+0xb98>
 8007f4c:	4f60      	ldr	r7, [pc, #384]	; (80080d0 <_strtod_l+0xbc8>)
 8007f4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007f52:	2600      	movs	r6, #0
 8007f54:	e7ae      	b.n	8007eb4 <_strtod_l+0x9ac>
 8007f56:	4f5f      	ldr	r7, [pc, #380]	; (80080d4 <_strtod_l+0xbcc>)
 8007f58:	2600      	movs	r6, #0
 8007f5a:	e7a7      	b.n	8007eac <_strtod_l+0x9a4>
 8007f5c:	4b5d      	ldr	r3, [pc, #372]	; (80080d4 <_strtod_l+0xbcc>)
 8007f5e:	4630      	mov	r0, r6
 8007f60:	4639      	mov	r1, r7
 8007f62:	2200      	movs	r2, #0
 8007f64:	f7f8 fb48 	bl	80005f8 <__aeabi_dmul>
 8007f68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f6a:	4606      	mov	r6, r0
 8007f6c:	460f      	mov	r7, r1
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d09c      	beq.n	8007eac <_strtod_l+0x9a4>
 8007f72:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007f76:	e79d      	b.n	8007eb4 <_strtod_l+0x9ac>
 8007f78:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80080a8 <_strtod_l+0xba0>
 8007f7c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007f80:	ec57 6b17 	vmov	r6, r7, d7
 8007f84:	e796      	b.n	8007eb4 <_strtod_l+0x9ac>
 8007f86:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007f8a:	9b04      	ldr	r3, [sp, #16]
 8007f8c:	46ca      	mov	sl, r9
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d1c2      	bne.n	8007f18 <_strtod_l+0xa10>
 8007f92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f98:	0d1b      	lsrs	r3, r3, #20
 8007f9a:	051b      	lsls	r3, r3, #20
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d1bb      	bne.n	8007f18 <_strtod_l+0xa10>
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	4639      	mov	r1, r7
 8007fa4:	f7f8 fe88 	bl	8000cb8 <__aeabi_d2lz>
 8007fa8:	f7f8 faf8 	bl	800059c <__aeabi_l2d>
 8007fac:	4602      	mov	r2, r0
 8007fae:	460b      	mov	r3, r1
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	4639      	mov	r1, r7
 8007fb4:	f7f8 f968 	bl	8000288 <__aeabi_dsub>
 8007fb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007fba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007fbe:	ea43 0308 	orr.w	r3, r3, r8
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	4606      	mov	r6, r0
 8007fc6:	460f      	mov	r7, r1
 8007fc8:	d054      	beq.n	8008074 <_strtod_l+0xb6c>
 8007fca:	a339      	add	r3, pc, #228	; (adr r3, 80080b0 <_strtod_l+0xba8>)
 8007fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd0:	f7f8 fd84 	bl	8000adc <__aeabi_dcmplt>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	f47f ace5 	bne.w	80079a4 <_strtod_l+0x49c>
 8007fda:	a337      	add	r3, pc, #220	; (adr r3, 80080b8 <_strtod_l+0xbb0>)
 8007fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	4639      	mov	r1, r7
 8007fe4:	f7f8 fd98 	bl	8000b18 <__aeabi_dcmpgt>
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	d095      	beq.n	8007f18 <_strtod_l+0xa10>
 8007fec:	e4da      	b.n	80079a4 <_strtod_l+0x49c>
 8007fee:	9b04      	ldr	r3, [sp, #16]
 8007ff0:	b333      	cbz	r3, 8008040 <_strtod_l+0xb38>
 8007ff2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ff4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007ff8:	d822      	bhi.n	8008040 <_strtod_l+0xb38>
 8007ffa:	a331      	add	r3, pc, #196	; (adr r3, 80080c0 <_strtod_l+0xbb8>)
 8007ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008000:	4630      	mov	r0, r6
 8008002:	4639      	mov	r1, r7
 8008004:	f7f8 fd74 	bl	8000af0 <__aeabi_dcmple>
 8008008:	b1a0      	cbz	r0, 8008034 <_strtod_l+0xb2c>
 800800a:	4639      	mov	r1, r7
 800800c:	4630      	mov	r0, r6
 800800e:	f7f8 fdcb 	bl	8000ba8 <__aeabi_d2uiz>
 8008012:	2801      	cmp	r0, #1
 8008014:	bf38      	it	cc
 8008016:	2001      	movcc	r0, #1
 8008018:	f7f8 fa74 	bl	8000504 <__aeabi_ui2d>
 800801c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800801e:	4606      	mov	r6, r0
 8008020:	460f      	mov	r7, r1
 8008022:	bb23      	cbnz	r3, 800806e <_strtod_l+0xb66>
 8008024:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008028:	9010      	str	r0, [sp, #64]	; 0x40
 800802a:	9311      	str	r3, [sp, #68]	; 0x44
 800802c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008030:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008034:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008036:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008038:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800803c:	1a9b      	subs	r3, r3, r2
 800803e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008040:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008044:	eeb0 0a48 	vmov.f32	s0, s16
 8008048:	eef0 0a68 	vmov.f32	s1, s17
 800804c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008050:	f7ff f8fc 	bl	800724c <__ulp>
 8008054:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008058:	ec53 2b10 	vmov	r2, r3, d0
 800805c:	f7f8 facc 	bl	80005f8 <__aeabi_dmul>
 8008060:	ec53 2b18 	vmov	r2, r3, d8
 8008064:	f7f8 f912 	bl	800028c <__adddf3>
 8008068:	4680      	mov	r8, r0
 800806a:	4689      	mov	r9, r1
 800806c:	e78d      	b.n	8007f8a <_strtod_l+0xa82>
 800806e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008072:	e7db      	b.n	800802c <_strtod_l+0xb24>
 8008074:	a314      	add	r3, pc, #80	; (adr r3, 80080c8 <_strtod_l+0xbc0>)
 8008076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807a:	f7f8 fd2f 	bl	8000adc <__aeabi_dcmplt>
 800807e:	e7b3      	b.n	8007fe8 <_strtod_l+0xae0>
 8008080:	2300      	movs	r3, #0
 8008082:	930a      	str	r3, [sp, #40]	; 0x28
 8008084:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008086:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008088:	6013      	str	r3, [r2, #0]
 800808a:	f7ff ba7c 	b.w	8007586 <_strtod_l+0x7e>
 800808e:	2a65      	cmp	r2, #101	; 0x65
 8008090:	f43f ab75 	beq.w	800777e <_strtod_l+0x276>
 8008094:	2a45      	cmp	r2, #69	; 0x45
 8008096:	f43f ab72 	beq.w	800777e <_strtod_l+0x276>
 800809a:	2301      	movs	r3, #1
 800809c:	f7ff bbaa 	b.w	80077f4 <_strtod_l+0x2ec>
 80080a0:	00000000 	.word	0x00000000
 80080a4:	bff00000 	.word	0xbff00000
 80080a8:	00000000 	.word	0x00000000
 80080ac:	3ff00000 	.word	0x3ff00000
 80080b0:	94a03595 	.word	0x94a03595
 80080b4:	3fdfffff 	.word	0x3fdfffff
 80080b8:	35afe535 	.word	0x35afe535
 80080bc:	3fe00000 	.word	0x3fe00000
 80080c0:	ffc00000 	.word	0xffc00000
 80080c4:	41dfffff 	.word	0x41dfffff
 80080c8:	94a03595 	.word	0x94a03595
 80080cc:	3fcfffff 	.word	0x3fcfffff
 80080d0:	3ff00000 	.word	0x3ff00000
 80080d4:	3fe00000 	.word	0x3fe00000
 80080d8:	7ff00000 	.word	0x7ff00000
 80080dc:	7fe00000 	.word	0x7fe00000
 80080e0:	7c9fffff 	.word	0x7c9fffff
 80080e4:	7fefffff 	.word	0x7fefffff

080080e8 <_strtod_r>:
 80080e8:	4b01      	ldr	r3, [pc, #4]	; (80080f0 <_strtod_r+0x8>)
 80080ea:	f7ff ba0d 	b.w	8007508 <_strtod_l>
 80080ee:	bf00      	nop
 80080f0:	20000068 	.word	0x20000068

080080f4 <_strtol_l.constprop.0>:
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080fa:	d001      	beq.n	8008100 <_strtol_l.constprop.0+0xc>
 80080fc:	2b24      	cmp	r3, #36	; 0x24
 80080fe:	d906      	bls.n	800810e <_strtol_l.constprop.0+0x1a>
 8008100:	f7fd fd88 	bl	8005c14 <__errno>
 8008104:	2316      	movs	r3, #22
 8008106:	6003      	str	r3, [r0, #0]
 8008108:	2000      	movs	r0, #0
 800810a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800810e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80081f4 <_strtol_l.constprop.0+0x100>
 8008112:	460d      	mov	r5, r1
 8008114:	462e      	mov	r6, r5
 8008116:	f815 4b01 	ldrb.w	r4, [r5], #1
 800811a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800811e:	f017 0708 	ands.w	r7, r7, #8
 8008122:	d1f7      	bne.n	8008114 <_strtol_l.constprop.0+0x20>
 8008124:	2c2d      	cmp	r4, #45	; 0x2d
 8008126:	d132      	bne.n	800818e <_strtol_l.constprop.0+0x9a>
 8008128:	782c      	ldrb	r4, [r5, #0]
 800812a:	2701      	movs	r7, #1
 800812c:	1cb5      	adds	r5, r6, #2
 800812e:	2b00      	cmp	r3, #0
 8008130:	d05b      	beq.n	80081ea <_strtol_l.constprop.0+0xf6>
 8008132:	2b10      	cmp	r3, #16
 8008134:	d109      	bne.n	800814a <_strtol_l.constprop.0+0x56>
 8008136:	2c30      	cmp	r4, #48	; 0x30
 8008138:	d107      	bne.n	800814a <_strtol_l.constprop.0+0x56>
 800813a:	782c      	ldrb	r4, [r5, #0]
 800813c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008140:	2c58      	cmp	r4, #88	; 0x58
 8008142:	d14d      	bne.n	80081e0 <_strtol_l.constprop.0+0xec>
 8008144:	786c      	ldrb	r4, [r5, #1]
 8008146:	2310      	movs	r3, #16
 8008148:	3502      	adds	r5, #2
 800814a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800814e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008152:	f04f 0e00 	mov.w	lr, #0
 8008156:	fbb8 f9f3 	udiv	r9, r8, r3
 800815a:	4676      	mov	r6, lr
 800815c:	fb03 8a19 	mls	sl, r3, r9, r8
 8008160:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008164:	f1bc 0f09 	cmp.w	ip, #9
 8008168:	d816      	bhi.n	8008198 <_strtol_l.constprop.0+0xa4>
 800816a:	4664      	mov	r4, ip
 800816c:	42a3      	cmp	r3, r4
 800816e:	dd24      	ble.n	80081ba <_strtol_l.constprop.0+0xc6>
 8008170:	f1be 3fff 	cmp.w	lr, #4294967295
 8008174:	d008      	beq.n	8008188 <_strtol_l.constprop.0+0x94>
 8008176:	45b1      	cmp	r9, r6
 8008178:	d31c      	bcc.n	80081b4 <_strtol_l.constprop.0+0xc0>
 800817a:	d101      	bne.n	8008180 <_strtol_l.constprop.0+0x8c>
 800817c:	45a2      	cmp	sl, r4
 800817e:	db19      	blt.n	80081b4 <_strtol_l.constprop.0+0xc0>
 8008180:	fb06 4603 	mla	r6, r6, r3, r4
 8008184:	f04f 0e01 	mov.w	lr, #1
 8008188:	f815 4b01 	ldrb.w	r4, [r5], #1
 800818c:	e7e8      	b.n	8008160 <_strtol_l.constprop.0+0x6c>
 800818e:	2c2b      	cmp	r4, #43	; 0x2b
 8008190:	bf04      	itt	eq
 8008192:	782c      	ldrbeq	r4, [r5, #0]
 8008194:	1cb5      	addeq	r5, r6, #2
 8008196:	e7ca      	b.n	800812e <_strtol_l.constprop.0+0x3a>
 8008198:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800819c:	f1bc 0f19 	cmp.w	ip, #25
 80081a0:	d801      	bhi.n	80081a6 <_strtol_l.constprop.0+0xb2>
 80081a2:	3c37      	subs	r4, #55	; 0x37
 80081a4:	e7e2      	b.n	800816c <_strtol_l.constprop.0+0x78>
 80081a6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80081aa:	f1bc 0f19 	cmp.w	ip, #25
 80081ae:	d804      	bhi.n	80081ba <_strtol_l.constprop.0+0xc6>
 80081b0:	3c57      	subs	r4, #87	; 0x57
 80081b2:	e7db      	b.n	800816c <_strtol_l.constprop.0+0x78>
 80081b4:	f04f 3eff 	mov.w	lr, #4294967295
 80081b8:	e7e6      	b.n	8008188 <_strtol_l.constprop.0+0x94>
 80081ba:	f1be 3fff 	cmp.w	lr, #4294967295
 80081be:	d105      	bne.n	80081cc <_strtol_l.constprop.0+0xd8>
 80081c0:	2322      	movs	r3, #34	; 0x22
 80081c2:	6003      	str	r3, [r0, #0]
 80081c4:	4646      	mov	r6, r8
 80081c6:	b942      	cbnz	r2, 80081da <_strtol_l.constprop.0+0xe6>
 80081c8:	4630      	mov	r0, r6
 80081ca:	e79e      	b.n	800810a <_strtol_l.constprop.0+0x16>
 80081cc:	b107      	cbz	r7, 80081d0 <_strtol_l.constprop.0+0xdc>
 80081ce:	4276      	negs	r6, r6
 80081d0:	2a00      	cmp	r2, #0
 80081d2:	d0f9      	beq.n	80081c8 <_strtol_l.constprop.0+0xd4>
 80081d4:	f1be 0f00 	cmp.w	lr, #0
 80081d8:	d000      	beq.n	80081dc <_strtol_l.constprop.0+0xe8>
 80081da:	1e69      	subs	r1, r5, #1
 80081dc:	6011      	str	r1, [r2, #0]
 80081de:	e7f3      	b.n	80081c8 <_strtol_l.constprop.0+0xd4>
 80081e0:	2430      	movs	r4, #48	; 0x30
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d1b1      	bne.n	800814a <_strtol_l.constprop.0+0x56>
 80081e6:	2308      	movs	r3, #8
 80081e8:	e7af      	b.n	800814a <_strtol_l.constprop.0+0x56>
 80081ea:	2c30      	cmp	r4, #48	; 0x30
 80081ec:	d0a5      	beq.n	800813a <_strtol_l.constprop.0+0x46>
 80081ee:	230a      	movs	r3, #10
 80081f0:	e7ab      	b.n	800814a <_strtol_l.constprop.0+0x56>
 80081f2:	bf00      	nop
 80081f4:	08009721 	.word	0x08009721

080081f8 <_strtol_r>:
 80081f8:	f7ff bf7c 	b.w	80080f4 <_strtol_l.constprop.0>

080081fc <__ssputs_r>:
 80081fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008200:	688e      	ldr	r6, [r1, #8]
 8008202:	461f      	mov	r7, r3
 8008204:	42be      	cmp	r6, r7
 8008206:	680b      	ldr	r3, [r1, #0]
 8008208:	4682      	mov	sl, r0
 800820a:	460c      	mov	r4, r1
 800820c:	4690      	mov	r8, r2
 800820e:	d82c      	bhi.n	800826a <__ssputs_r+0x6e>
 8008210:	898a      	ldrh	r2, [r1, #12]
 8008212:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008216:	d026      	beq.n	8008266 <__ssputs_r+0x6a>
 8008218:	6965      	ldr	r5, [r4, #20]
 800821a:	6909      	ldr	r1, [r1, #16]
 800821c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008220:	eba3 0901 	sub.w	r9, r3, r1
 8008224:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008228:	1c7b      	adds	r3, r7, #1
 800822a:	444b      	add	r3, r9
 800822c:	106d      	asrs	r5, r5, #1
 800822e:	429d      	cmp	r5, r3
 8008230:	bf38      	it	cc
 8008232:	461d      	movcc	r5, r3
 8008234:	0553      	lsls	r3, r2, #21
 8008236:	d527      	bpl.n	8008288 <__ssputs_r+0x8c>
 8008238:	4629      	mov	r1, r5
 800823a:	f7fe fc0f 	bl	8006a5c <_malloc_r>
 800823e:	4606      	mov	r6, r0
 8008240:	b360      	cbz	r0, 800829c <__ssputs_r+0xa0>
 8008242:	6921      	ldr	r1, [r4, #16]
 8008244:	464a      	mov	r2, r9
 8008246:	f000 fa1b 	bl	8008680 <memcpy>
 800824a:	89a3      	ldrh	r3, [r4, #12]
 800824c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008254:	81a3      	strh	r3, [r4, #12]
 8008256:	6126      	str	r6, [r4, #16]
 8008258:	6165      	str	r5, [r4, #20]
 800825a:	444e      	add	r6, r9
 800825c:	eba5 0509 	sub.w	r5, r5, r9
 8008260:	6026      	str	r6, [r4, #0]
 8008262:	60a5      	str	r5, [r4, #8]
 8008264:	463e      	mov	r6, r7
 8008266:	42be      	cmp	r6, r7
 8008268:	d900      	bls.n	800826c <__ssputs_r+0x70>
 800826a:	463e      	mov	r6, r7
 800826c:	6820      	ldr	r0, [r4, #0]
 800826e:	4632      	mov	r2, r6
 8008270:	4641      	mov	r1, r8
 8008272:	f000 f9c9 	bl	8008608 <memmove>
 8008276:	68a3      	ldr	r3, [r4, #8]
 8008278:	1b9b      	subs	r3, r3, r6
 800827a:	60a3      	str	r3, [r4, #8]
 800827c:	6823      	ldr	r3, [r4, #0]
 800827e:	4433      	add	r3, r6
 8008280:	6023      	str	r3, [r4, #0]
 8008282:	2000      	movs	r0, #0
 8008284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008288:	462a      	mov	r2, r5
 800828a:	f000 fdae 	bl	8008dea <_realloc_r>
 800828e:	4606      	mov	r6, r0
 8008290:	2800      	cmp	r0, #0
 8008292:	d1e0      	bne.n	8008256 <__ssputs_r+0x5a>
 8008294:	6921      	ldr	r1, [r4, #16]
 8008296:	4650      	mov	r0, sl
 8008298:	f7fe fb6c 	bl	8006974 <_free_r>
 800829c:	230c      	movs	r3, #12
 800829e:	f8ca 3000 	str.w	r3, [sl]
 80082a2:	89a3      	ldrh	r3, [r4, #12]
 80082a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082a8:	81a3      	strh	r3, [r4, #12]
 80082aa:	f04f 30ff 	mov.w	r0, #4294967295
 80082ae:	e7e9      	b.n	8008284 <__ssputs_r+0x88>

080082b0 <_svfiprintf_r>:
 80082b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b4:	4698      	mov	r8, r3
 80082b6:	898b      	ldrh	r3, [r1, #12]
 80082b8:	061b      	lsls	r3, r3, #24
 80082ba:	b09d      	sub	sp, #116	; 0x74
 80082bc:	4607      	mov	r7, r0
 80082be:	460d      	mov	r5, r1
 80082c0:	4614      	mov	r4, r2
 80082c2:	d50e      	bpl.n	80082e2 <_svfiprintf_r+0x32>
 80082c4:	690b      	ldr	r3, [r1, #16]
 80082c6:	b963      	cbnz	r3, 80082e2 <_svfiprintf_r+0x32>
 80082c8:	2140      	movs	r1, #64	; 0x40
 80082ca:	f7fe fbc7 	bl	8006a5c <_malloc_r>
 80082ce:	6028      	str	r0, [r5, #0]
 80082d0:	6128      	str	r0, [r5, #16]
 80082d2:	b920      	cbnz	r0, 80082de <_svfiprintf_r+0x2e>
 80082d4:	230c      	movs	r3, #12
 80082d6:	603b      	str	r3, [r7, #0]
 80082d8:	f04f 30ff 	mov.w	r0, #4294967295
 80082dc:	e0d0      	b.n	8008480 <_svfiprintf_r+0x1d0>
 80082de:	2340      	movs	r3, #64	; 0x40
 80082e0:	616b      	str	r3, [r5, #20]
 80082e2:	2300      	movs	r3, #0
 80082e4:	9309      	str	r3, [sp, #36]	; 0x24
 80082e6:	2320      	movs	r3, #32
 80082e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80082f0:	2330      	movs	r3, #48	; 0x30
 80082f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008498 <_svfiprintf_r+0x1e8>
 80082f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082fa:	f04f 0901 	mov.w	r9, #1
 80082fe:	4623      	mov	r3, r4
 8008300:	469a      	mov	sl, r3
 8008302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008306:	b10a      	cbz	r2, 800830c <_svfiprintf_r+0x5c>
 8008308:	2a25      	cmp	r2, #37	; 0x25
 800830a:	d1f9      	bne.n	8008300 <_svfiprintf_r+0x50>
 800830c:	ebba 0b04 	subs.w	fp, sl, r4
 8008310:	d00b      	beq.n	800832a <_svfiprintf_r+0x7a>
 8008312:	465b      	mov	r3, fp
 8008314:	4622      	mov	r2, r4
 8008316:	4629      	mov	r1, r5
 8008318:	4638      	mov	r0, r7
 800831a:	f7ff ff6f 	bl	80081fc <__ssputs_r>
 800831e:	3001      	adds	r0, #1
 8008320:	f000 80a9 	beq.w	8008476 <_svfiprintf_r+0x1c6>
 8008324:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008326:	445a      	add	r2, fp
 8008328:	9209      	str	r2, [sp, #36]	; 0x24
 800832a:	f89a 3000 	ldrb.w	r3, [sl]
 800832e:	2b00      	cmp	r3, #0
 8008330:	f000 80a1 	beq.w	8008476 <_svfiprintf_r+0x1c6>
 8008334:	2300      	movs	r3, #0
 8008336:	f04f 32ff 	mov.w	r2, #4294967295
 800833a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800833e:	f10a 0a01 	add.w	sl, sl, #1
 8008342:	9304      	str	r3, [sp, #16]
 8008344:	9307      	str	r3, [sp, #28]
 8008346:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800834a:	931a      	str	r3, [sp, #104]	; 0x68
 800834c:	4654      	mov	r4, sl
 800834e:	2205      	movs	r2, #5
 8008350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008354:	4850      	ldr	r0, [pc, #320]	; (8008498 <_svfiprintf_r+0x1e8>)
 8008356:	f7f7 ff3b 	bl	80001d0 <memchr>
 800835a:	9a04      	ldr	r2, [sp, #16]
 800835c:	b9d8      	cbnz	r0, 8008396 <_svfiprintf_r+0xe6>
 800835e:	06d0      	lsls	r0, r2, #27
 8008360:	bf44      	itt	mi
 8008362:	2320      	movmi	r3, #32
 8008364:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008368:	0711      	lsls	r1, r2, #28
 800836a:	bf44      	itt	mi
 800836c:	232b      	movmi	r3, #43	; 0x2b
 800836e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008372:	f89a 3000 	ldrb.w	r3, [sl]
 8008376:	2b2a      	cmp	r3, #42	; 0x2a
 8008378:	d015      	beq.n	80083a6 <_svfiprintf_r+0xf6>
 800837a:	9a07      	ldr	r2, [sp, #28]
 800837c:	4654      	mov	r4, sl
 800837e:	2000      	movs	r0, #0
 8008380:	f04f 0c0a 	mov.w	ip, #10
 8008384:	4621      	mov	r1, r4
 8008386:	f811 3b01 	ldrb.w	r3, [r1], #1
 800838a:	3b30      	subs	r3, #48	; 0x30
 800838c:	2b09      	cmp	r3, #9
 800838e:	d94d      	bls.n	800842c <_svfiprintf_r+0x17c>
 8008390:	b1b0      	cbz	r0, 80083c0 <_svfiprintf_r+0x110>
 8008392:	9207      	str	r2, [sp, #28]
 8008394:	e014      	b.n	80083c0 <_svfiprintf_r+0x110>
 8008396:	eba0 0308 	sub.w	r3, r0, r8
 800839a:	fa09 f303 	lsl.w	r3, r9, r3
 800839e:	4313      	orrs	r3, r2
 80083a0:	9304      	str	r3, [sp, #16]
 80083a2:	46a2      	mov	sl, r4
 80083a4:	e7d2      	b.n	800834c <_svfiprintf_r+0x9c>
 80083a6:	9b03      	ldr	r3, [sp, #12]
 80083a8:	1d19      	adds	r1, r3, #4
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	9103      	str	r1, [sp, #12]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	bfbb      	ittet	lt
 80083b2:	425b      	neglt	r3, r3
 80083b4:	f042 0202 	orrlt.w	r2, r2, #2
 80083b8:	9307      	strge	r3, [sp, #28]
 80083ba:	9307      	strlt	r3, [sp, #28]
 80083bc:	bfb8      	it	lt
 80083be:	9204      	strlt	r2, [sp, #16]
 80083c0:	7823      	ldrb	r3, [r4, #0]
 80083c2:	2b2e      	cmp	r3, #46	; 0x2e
 80083c4:	d10c      	bne.n	80083e0 <_svfiprintf_r+0x130>
 80083c6:	7863      	ldrb	r3, [r4, #1]
 80083c8:	2b2a      	cmp	r3, #42	; 0x2a
 80083ca:	d134      	bne.n	8008436 <_svfiprintf_r+0x186>
 80083cc:	9b03      	ldr	r3, [sp, #12]
 80083ce:	1d1a      	adds	r2, r3, #4
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	9203      	str	r2, [sp, #12]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	bfb8      	it	lt
 80083d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80083dc:	3402      	adds	r4, #2
 80083de:	9305      	str	r3, [sp, #20]
 80083e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80084a8 <_svfiprintf_r+0x1f8>
 80083e4:	7821      	ldrb	r1, [r4, #0]
 80083e6:	2203      	movs	r2, #3
 80083e8:	4650      	mov	r0, sl
 80083ea:	f7f7 fef1 	bl	80001d0 <memchr>
 80083ee:	b138      	cbz	r0, 8008400 <_svfiprintf_r+0x150>
 80083f0:	9b04      	ldr	r3, [sp, #16]
 80083f2:	eba0 000a 	sub.w	r0, r0, sl
 80083f6:	2240      	movs	r2, #64	; 0x40
 80083f8:	4082      	lsls	r2, r0
 80083fa:	4313      	orrs	r3, r2
 80083fc:	3401      	adds	r4, #1
 80083fe:	9304      	str	r3, [sp, #16]
 8008400:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008404:	4825      	ldr	r0, [pc, #148]	; (800849c <_svfiprintf_r+0x1ec>)
 8008406:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800840a:	2206      	movs	r2, #6
 800840c:	f7f7 fee0 	bl	80001d0 <memchr>
 8008410:	2800      	cmp	r0, #0
 8008412:	d038      	beq.n	8008486 <_svfiprintf_r+0x1d6>
 8008414:	4b22      	ldr	r3, [pc, #136]	; (80084a0 <_svfiprintf_r+0x1f0>)
 8008416:	bb1b      	cbnz	r3, 8008460 <_svfiprintf_r+0x1b0>
 8008418:	9b03      	ldr	r3, [sp, #12]
 800841a:	3307      	adds	r3, #7
 800841c:	f023 0307 	bic.w	r3, r3, #7
 8008420:	3308      	adds	r3, #8
 8008422:	9303      	str	r3, [sp, #12]
 8008424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008426:	4433      	add	r3, r6
 8008428:	9309      	str	r3, [sp, #36]	; 0x24
 800842a:	e768      	b.n	80082fe <_svfiprintf_r+0x4e>
 800842c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008430:	460c      	mov	r4, r1
 8008432:	2001      	movs	r0, #1
 8008434:	e7a6      	b.n	8008384 <_svfiprintf_r+0xd4>
 8008436:	2300      	movs	r3, #0
 8008438:	3401      	adds	r4, #1
 800843a:	9305      	str	r3, [sp, #20]
 800843c:	4619      	mov	r1, r3
 800843e:	f04f 0c0a 	mov.w	ip, #10
 8008442:	4620      	mov	r0, r4
 8008444:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008448:	3a30      	subs	r2, #48	; 0x30
 800844a:	2a09      	cmp	r2, #9
 800844c:	d903      	bls.n	8008456 <_svfiprintf_r+0x1a6>
 800844e:	2b00      	cmp	r3, #0
 8008450:	d0c6      	beq.n	80083e0 <_svfiprintf_r+0x130>
 8008452:	9105      	str	r1, [sp, #20]
 8008454:	e7c4      	b.n	80083e0 <_svfiprintf_r+0x130>
 8008456:	fb0c 2101 	mla	r1, ip, r1, r2
 800845a:	4604      	mov	r4, r0
 800845c:	2301      	movs	r3, #1
 800845e:	e7f0      	b.n	8008442 <_svfiprintf_r+0x192>
 8008460:	ab03      	add	r3, sp, #12
 8008462:	9300      	str	r3, [sp, #0]
 8008464:	462a      	mov	r2, r5
 8008466:	4b0f      	ldr	r3, [pc, #60]	; (80084a4 <_svfiprintf_r+0x1f4>)
 8008468:	a904      	add	r1, sp, #16
 800846a:	4638      	mov	r0, r7
 800846c:	f7fc fc84 	bl	8004d78 <_printf_float>
 8008470:	1c42      	adds	r2, r0, #1
 8008472:	4606      	mov	r6, r0
 8008474:	d1d6      	bne.n	8008424 <_svfiprintf_r+0x174>
 8008476:	89ab      	ldrh	r3, [r5, #12]
 8008478:	065b      	lsls	r3, r3, #25
 800847a:	f53f af2d 	bmi.w	80082d8 <_svfiprintf_r+0x28>
 800847e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008480:	b01d      	add	sp, #116	; 0x74
 8008482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008486:	ab03      	add	r3, sp, #12
 8008488:	9300      	str	r3, [sp, #0]
 800848a:	462a      	mov	r2, r5
 800848c:	4b05      	ldr	r3, [pc, #20]	; (80084a4 <_svfiprintf_r+0x1f4>)
 800848e:	a904      	add	r1, sp, #16
 8008490:	4638      	mov	r0, r7
 8008492:	f7fc ff15 	bl	80052c0 <_printf_i>
 8008496:	e7eb      	b.n	8008470 <_svfiprintf_r+0x1c0>
 8008498:	08009821 	.word	0x08009821
 800849c:	0800982b 	.word	0x0800982b
 80084a0:	08004d79 	.word	0x08004d79
 80084a4:	080081fd 	.word	0x080081fd
 80084a8:	08009827 	.word	0x08009827

080084ac <__sflush_r>:
 80084ac:	898a      	ldrh	r2, [r1, #12]
 80084ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084b2:	4605      	mov	r5, r0
 80084b4:	0710      	lsls	r0, r2, #28
 80084b6:	460c      	mov	r4, r1
 80084b8:	d458      	bmi.n	800856c <__sflush_r+0xc0>
 80084ba:	684b      	ldr	r3, [r1, #4]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	dc05      	bgt.n	80084cc <__sflush_r+0x20>
 80084c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	dc02      	bgt.n	80084cc <__sflush_r+0x20>
 80084c6:	2000      	movs	r0, #0
 80084c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084ce:	2e00      	cmp	r6, #0
 80084d0:	d0f9      	beq.n	80084c6 <__sflush_r+0x1a>
 80084d2:	2300      	movs	r3, #0
 80084d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80084d8:	682f      	ldr	r7, [r5, #0]
 80084da:	6a21      	ldr	r1, [r4, #32]
 80084dc:	602b      	str	r3, [r5, #0]
 80084de:	d032      	beq.n	8008546 <__sflush_r+0x9a>
 80084e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80084e2:	89a3      	ldrh	r3, [r4, #12]
 80084e4:	075a      	lsls	r2, r3, #29
 80084e6:	d505      	bpl.n	80084f4 <__sflush_r+0x48>
 80084e8:	6863      	ldr	r3, [r4, #4]
 80084ea:	1ac0      	subs	r0, r0, r3
 80084ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80084ee:	b10b      	cbz	r3, 80084f4 <__sflush_r+0x48>
 80084f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084f2:	1ac0      	subs	r0, r0, r3
 80084f4:	2300      	movs	r3, #0
 80084f6:	4602      	mov	r2, r0
 80084f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084fa:	6a21      	ldr	r1, [r4, #32]
 80084fc:	4628      	mov	r0, r5
 80084fe:	47b0      	blx	r6
 8008500:	1c43      	adds	r3, r0, #1
 8008502:	89a3      	ldrh	r3, [r4, #12]
 8008504:	d106      	bne.n	8008514 <__sflush_r+0x68>
 8008506:	6829      	ldr	r1, [r5, #0]
 8008508:	291d      	cmp	r1, #29
 800850a:	d82b      	bhi.n	8008564 <__sflush_r+0xb8>
 800850c:	4a29      	ldr	r2, [pc, #164]	; (80085b4 <__sflush_r+0x108>)
 800850e:	410a      	asrs	r2, r1
 8008510:	07d6      	lsls	r6, r2, #31
 8008512:	d427      	bmi.n	8008564 <__sflush_r+0xb8>
 8008514:	2200      	movs	r2, #0
 8008516:	6062      	str	r2, [r4, #4]
 8008518:	04d9      	lsls	r1, r3, #19
 800851a:	6922      	ldr	r2, [r4, #16]
 800851c:	6022      	str	r2, [r4, #0]
 800851e:	d504      	bpl.n	800852a <__sflush_r+0x7e>
 8008520:	1c42      	adds	r2, r0, #1
 8008522:	d101      	bne.n	8008528 <__sflush_r+0x7c>
 8008524:	682b      	ldr	r3, [r5, #0]
 8008526:	b903      	cbnz	r3, 800852a <__sflush_r+0x7e>
 8008528:	6560      	str	r0, [r4, #84]	; 0x54
 800852a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800852c:	602f      	str	r7, [r5, #0]
 800852e:	2900      	cmp	r1, #0
 8008530:	d0c9      	beq.n	80084c6 <__sflush_r+0x1a>
 8008532:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008536:	4299      	cmp	r1, r3
 8008538:	d002      	beq.n	8008540 <__sflush_r+0x94>
 800853a:	4628      	mov	r0, r5
 800853c:	f7fe fa1a 	bl	8006974 <_free_r>
 8008540:	2000      	movs	r0, #0
 8008542:	6360      	str	r0, [r4, #52]	; 0x34
 8008544:	e7c0      	b.n	80084c8 <__sflush_r+0x1c>
 8008546:	2301      	movs	r3, #1
 8008548:	4628      	mov	r0, r5
 800854a:	47b0      	blx	r6
 800854c:	1c41      	adds	r1, r0, #1
 800854e:	d1c8      	bne.n	80084e2 <__sflush_r+0x36>
 8008550:	682b      	ldr	r3, [r5, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d0c5      	beq.n	80084e2 <__sflush_r+0x36>
 8008556:	2b1d      	cmp	r3, #29
 8008558:	d001      	beq.n	800855e <__sflush_r+0xb2>
 800855a:	2b16      	cmp	r3, #22
 800855c:	d101      	bne.n	8008562 <__sflush_r+0xb6>
 800855e:	602f      	str	r7, [r5, #0]
 8008560:	e7b1      	b.n	80084c6 <__sflush_r+0x1a>
 8008562:	89a3      	ldrh	r3, [r4, #12]
 8008564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008568:	81a3      	strh	r3, [r4, #12]
 800856a:	e7ad      	b.n	80084c8 <__sflush_r+0x1c>
 800856c:	690f      	ldr	r7, [r1, #16]
 800856e:	2f00      	cmp	r7, #0
 8008570:	d0a9      	beq.n	80084c6 <__sflush_r+0x1a>
 8008572:	0793      	lsls	r3, r2, #30
 8008574:	680e      	ldr	r6, [r1, #0]
 8008576:	bf08      	it	eq
 8008578:	694b      	ldreq	r3, [r1, #20]
 800857a:	600f      	str	r7, [r1, #0]
 800857c:	bf18      	it	ne
 800857e:	2300      	movne	r3, #0
 8008580:	eba6 0807 	sub.w	r8, r6, r7
 8008584:	608b      	str	r3, [r1, #8]
 8008586:	f1b8 0f00 	cmp.w	r8, #0
 800858a:	dd9c      	ble.n	80084c6 <__sflush_r+0x1a>
 800858c:	6a21      	ldr	r1, [r4, #32]
 800858e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008590:	4643      	mov	r3, r8
 8008592:	463a      	mov	r2, r7
 8008594:	4628      	mov	r0, r5
 8008596:	47b0      	blx	r6
 8008598:	2800      	cmp	r0, #0
 800859a:	dc06      	bgt.n	80085aa <__sflush_r+0xfe>
 800859c:	89a3      	ldrh	r3, [r4, #12]
 800859e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085a2:	81a3      	strh	r3, [r4, #12]
 80085a4:	f04f 30ff 	mov.w	r0, #4294967295
 80085a8:	e78e      	b.n	80084c8 <__sflush_r+0x1c>
 80085aa:	4407      	add	r7, r0
 80085ac:	eba8 0800 	sub.w	r8, r8, r0
 80085b0:	e7e9      	b.n	8008586 <__sflush_r+0xda>
 80085b2:	bf00      	nop
 80085b4:	dfbffffe 	.word	0xdfbffffe

080085b8 <_fflush_r>:
 80085b8:	b538      	push	{r3, r4, r5, lr}
 80085ba:	690b      	ldr	r3, [r1, #16]
 80085bc:	4605      	mov	r5, r0
 80085be:	460c      	mov	r4, r1
 80085c0:	b913      	cbnz	r3, 80085c8 <_fflush_r+0x10>
 80085c2:	2500      	movs	r5, #0
 80085c4:	4628      	mov	r0, r5
 80085c6:	bd38      	pop	{r3, r4, r5, pc}
 80085c8:	b118      	cbz	r0, 80085d2 <_fflush_r+0x1a>
 80085ca:	6a03      	ldr	r3, [r0, #32]
 80085cc:	b90b      	cbnz	r3, 80085d2 <_fflush_r+0x1a>
 80085ce:	f7fd fa35 	bl	8005a3c <__sinit>
 80085d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d0f3      	beq.n	80085c2 <_fflush_r+0xa>
 80085da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80085dc:	07d0      	lsls	r0, r2, #31
 80085de:	d404      	bmi.n	80085ea <_fflush_r+0x32>
 80085e0:	0599      	lsls	r1, r3, #22
 80085e2:	d402      	bmi.n	80085ea <_fflush_r+0x32>
 80085e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085e6:	f7fd fb40 	bl	8005c6a <__retarget_lock_acquire_recursive>
 80085ea:	4628      	mov	r0, r5
 80085ec:	4621      	mov	r1, r4
 80085ee:	f7ff ff5d 	bl	80084ac <__sflush_r>
 80085f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085f4:	07da      	lsls	r2, r3, #31
 80085f6:	4605      	mov	r5, r0
 80085f8:	d4e4      	bmi.n	80085c4 <_fflush_r+0xc>
 80085fa:	89a3      	ldrh	r3, [r4, #12]
 80085fc:	059b      	lsls	r3, r3, #22
 80085fe:	d4e1      	bmi.n	80085c4 <_fflush_r+0xc>
 8008600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008602:	f7fd fb33 	bl	8005c6c <__retarget_lock_release_recursive>
 8008606:	e7dd      	b.n	80085c4 <_fflush_r+0xc>

08008608 <memmove>:
 8008608:	4288      	cmp	r0, r1
 800860a:	b510      	push	{r4, lr}
 800860c:	eb01 0402 	add.w	r4, r1, r2
 8008610:	d902      	bls.n	8008618 <memmove+0x10>
 8008612:	4284      	cmp	r4, r0
 8008614:	4623      	mov	r3, r4
 8008616:	d807      	bhi.n	8008628 <memmove+0x20>
 8008618:	1e43      	subs	r3, r0, #1
 800861a:	42a1      	cmp	r1, r4
 800861c:	d008      	beq.n	8008630 <memmove+0x28>
 800861e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008622:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008626:	e7f8      	b.n	800861a <memmove+0x12>
 8008628:	4402      	add	r2, r0
 800862a:	4601      	mov	r1, r0
 800862c:	428a      	cmp	r2, r1
 800862e:	d100      	bne.n	8008632 <memmove+0x2a>
 8008630:	bd10      	pop	{r4, pc}
 8008632:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008636:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800863a:	e7f7      	b.n	800862c <memmove+0x24>

0800863c <strncmp>:
 800863c:	b510      	push	{r4, lr}
 800863e:	b16a      	cbz	r2, 800865c <strncmp+0x20>
 8008640:	3901      	subs	r1, #1
 8008642:	1884      	adds	r4, r0, r2
 8008644:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008648:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800864c:	429a      	cmp	r2, r3
 800864e:	d103      	bne.n	8008658 <strncmp+0x1c>
 8008650:	42a0      	cmp	r0, r4
 8008652:	d001      	beq.n	8008658 <strncmp+0x1c>
 8008654:	2a00      	cmp	r2, #0
 8008656:	d1f5      	bne.n	8008644 <strncmp+0x8>
 8008658:	1ad0      	subs	r0, r2, r3
 800865a:	bd10      	pop	{r4, pc}
 800865c:	4610      	mov	r0, r2
 800865e:	e7fc      	b.n	800865a <strncmp+0x1e>

08008660 <_sbrk_r>:
 8008660:	b538      	push	{r3, r4, r5, lr}
 8008662:	4d06      	ldr	r5, [pc, #24]	; (800867c <_sbrk_r+0x1c>)
 8008664:	2300      	movs	r3, #0
 8008666:	4604      	mov	r4, r0
 8008668:	4608      	mov	r0, r1
 800866a:	602b      	str	r3, [r5, #0]
 800866c:	f7f9 fb2a 	bl	8001cc4 <_sbrk>
 8008670:	1c43      	adds	r3, r0, #1
 8008672:	d102      	bne.n	800867a <_sbrk_r+0x1a>
 8008674:	682b      	ldr	r3, [r5, #0]
 8008676:	b103      	cbz	r3, 800867a <_sbrk_r+0x1a>
 8008678:	6023      	str	r3, [r4, #0]
 800867a:	bd38      	pop	{r3, r4, r5, pc}
 800867c:	20000564 	.word	0x20000564

08008680 <memcpy>:
 8008680:	440a      	add	r2, r1
 8008682:	4291      	cmp	r1, r2
 8008684:	f100 33ff 	add.w	r3, r0, #4294967295
 8008688:	d100      	bne.n	800868c <memcpy+0xc>
 800868a:	4770      	bx	lr
 800868c:	b510      	push	{r4, lr}
 800868e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008692:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008696:	4291      	cmp	r1, r2
 8008698:	d1f9      	bne.n	800868e <memcpy+0xe>
 800869a:	bd10      	pop	{r4, pc}
 800869c:	0000      	movs	r0, r0
	...

080086a0 <nan>:
 80086a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80086a8 <nan+0x8>
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	00000000 	.word	0x00000000
 80086ac:	7ff80000 	.word	0x7ff80000

080086b0 <__assert_func>:
 80086b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086b2:	4614      	mov	r4, r2
 80086b4:	461a      	mov	r2, r3
 80086b6:	4b09      	ldr	r3, [pc, #36]	; (80086dc <__assert_func+0x2c>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4605      	mov	r5, r0
 80086bc:	68d8      	ldr	r0, [r3, #12]
 80086be:	b14c      	cbz	r4, 80086d4 <__assert_func+0x24>
 80086c0:	4b07      	ldr	r3, [pc, #28]	; (80086e0 <__assert_func+0x30>)
 80086c2:	9100      	str	r1, [sp, #0]
 80086c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086c8:	4906      	ldr	r1, [pc, #24]	; (80086e4 <__assert_func+0x34>)
 80086ca:	462b      	mov	r3, r5
 80086cc:	f000 fbca 	bl	8008e64 <fiprintf>
 80086d0:	f000 fbda 	bl	8008e88 <abort>
 80086d4:	4b04      	ldr	r3, [pc, #16]	; (80086e8 <__assert_func+0x38>)
 80086d6:	461c      	mov	r4, r3
 80086d8:	e7f3      	b.n	80086c2 <__assert_func+0x12>
 80086da:	bf00      	nop
 80086dc:	20000064 	.word	0x20000064
 80086e0:	0800983a 	.word	0x0800983a
 80086e4:	08009847 	.word	0x08009847
 80086e8:	08009875 	.word	0x08009875

080086ec <_calloc_r>:
 80086ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086ee:	fba1 2402 	umull	r2, r4, r1, r2
 80086f2:	b94c      	cbnz	r4, 8008708 <_calloc_r+0x1c>
 80086f4:	4611      	mov	r1, r2
 80086f6:	9201      	str	r2, [sp, #4]
 80086f8:	f7fe f9b0 	bl	8006a5c <_malloc_r>
 80086fc:	9a01      	ldr	r2, [sp, #4]
 80086fe:	4605      	mov	r5, r0
 8008700:	b930      	cbnz	r0, 8008710 <_calloc_r+0x24>
 8008702:	4628      	mov	r0, r5
 8008704:	b003      	add	sp, #12
 8008706:	bd30      	pop	{r4, r5, pc}
 8008708:	220c      	movs	r2, #12
 800870a:	6002      	str	r2, [r0, #0]
 800870c:	2500      	movs	r5, #0
 800870e:	e7f8      	b.n	8008702 <_calloc_r+0x16>
 8008710:	4621      	mov	r1, r4
 8008712:	f7fd fa2c 	bl	8005b6e <memset>
 8008716:	e7f4      	b.n	8008702 <_calloc_r+0x16>

08008718 <rshift>:
 8008718:	6903      	ldr	r3, [r0, #16]
 800871a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800871e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008722:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008726:	f100 0414 	add.w	r4, r0, #20
 800872a:	dd45      	ble.n	80087b8 <rshift+0xa0>
 800872c:	f011 011f 	ands.w	r1, r1, #31
 8008730:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008734:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008738:	d10c      	bne.n	8008754 <rshift+0x3c>
 800873a:	f100 0710 	add.w	r7, r0, #16
 800873e:	4629      	mov	r1, r5
 8008740:	42b1      	cmp	r1, r6
 8008742:	d334      	bcc.n	80087ae <rshift+0x96>
 8008744:	1a9b      	subs	r3, r3, r2
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	1eea      	subs	r2, r5, #3
 800874a:	4296      	cmp	r6, r2
 800874c:	bf38      	it	cc
 800874e:	2300      	movcc	r3, #0
 8008750:	4423      	add	r3, r4
 8008752:	e015      	b.n	8008780 <rshift+0x68>
 8008754:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008758:	f1c1 0820 	rsb	r8, r1, #32
 800875c:	40cf      	lsrs	r7, r1
 800875e:	f105 0e04 	add.w	lr, r5, #4
 8008762:	46a1      	mov	r9, r4
 8008764:	4576      	cmp	r6, lr
 8008766:	46f4      	mov	ip, lr
 8008768:	d815      	bhi.n	8008796 <rshift+0x7e>
 800876a:	1a9a      	subs	r2, r3, r2
 800876c:	0092      	lsls	r2, r2, #2
 800876e:	3a04      	subs	r2, #4
 8008770:	3501      	adds	r5, #1
 8008772:	42ae      	cmp	r6, r5
 8008774:	bf38      	it	cc
 8008776:	2200      	movcc	r2, #0
 8008778:	18a3      	adds	r3, r4, r2
 800877a:	50a7      	str	r7, [r4, r2]
 800877c:	b107      	cbz	r7, 8008780 <rshift+0x68>
 800877e:	3304      	adds	r3, #4
 8008780:	1b1a      	subs	r2, r3, r4
 8008782:	42a3      	cmp	r3, r4
 8008784:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008788:	bf08      	it	eq
 800878a:	2300      	moveq	r3, #0
 800878c:	6102      	str	r2, [r0, #16]
 800878e:	bf08      	it	eq
 8008790:	6143      	streq	r3, [r0, #20]
 8008792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008796:	f8dc c000 	ldr.w	ip, [ip]
 800879a:	fa0c fc08 	lsl.w	ip, ip, r8
 800879e:	ea4c 0707 	orr.w	r7, ip, r7
 80087a2:	f849 7b04 	str.w	r7, [r9], #4
 80087a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80087aa:	40cf      	lsrs	r7, r1
 80087ac:	e7da      	b.n	8008764 <rshift+0x4c>
 80087ae:	f851 cb04 	ldr.w	ip, [r1], #4
 80087b2:	f847 cf04 	str.w	ip, [r7, #4]!
 80087b6:	e7c3      	b.n	8008740 <rshift+0x28>
 80087b8:	4623      	mov	r3, r4
 80087ba:	e7e1      	b.n	8008780 <rshift+0x68>

080087bc <__hexdig_fun>:
 80087bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80087c0:	2b09      	cmp	r3, #9
 80087c2:	d802      	bhi.n	80087ca <__hexdig_fun+0xe>
 80087c4:	3820      	subs	r0, #32
 80087c6:	b2c0      	uxtb	r0, r0
 80087c8:	4770      	bx	lr
 80087ca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80087ce:	2b05      	cmp	r3, #5
 80087d0:	d801      	bhi.n	80087d6 <__hexdig_fun+0x1a>
 80087d2:	3847      	subs	r0, #71	; 0x47
 80087d4:	e7f7      	b.n	80087c6 <__hexdig_fun+0xa>
 80087d6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80087da:	2b05      	cmp	r3, #5
 80087dc:	d801      	bhi.n	80087e2 <__hexdig_fun+0x26>
 80087de:	3827      	subs	r0, #39	; 0x27
 80087e0:	e7f1      	b.n	80087c6 <__hexdig_fun+0xa>
 80087e2:	2000      	movs	r0, #0
 80087e4:	4770      	bx	lr
	...

080087e8 <__gethex>:
 80087e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ec:	4617      	mov	r7, r2
 80087ee:	680a      	ldr	r2, [r1, #0]
 80087f0:	b085      	sub	sp, #20
 80087f2:	f102 0b02 	add.w	fp, r2, #2
 80087f6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80087fa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80087fe:	4681      	mov	r9, r0
 8008800:	468a      	mov	sl, r1
 8008802:	9302      	str	r3, [sp, #8]
 8008804:	32fe      	adds	r2, #254	; 0xfe
 8008806:	eb02 030b 	add.w	r3, r2, fp
 800880a:	46d8      	mov	r8, fp
 800880c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008810:	9301      	str	r3, [sp, #4]
 8008812:	2830      	cmp	r0, #48	; 0x30
 8008814:	d0f7      	beq.n	8008806 <__gethex+0x1e>
 8008816:	f7ff ffd1 	bl	80087bc <__hexdig_fun>
 800881a:	4604      	mov	r4, r0
 800881c:	2800      	cmp	r0, #0
 800881e:	d138      	bne.n	8008892 <__gethex+0xaa>
 8008820:	49a7      	ldr	r1, [pc, #668]	; (8008ac0 <__gethex+0x2d8>)
 8008822:	2201      	movs	r2, #1
 8008824:	4640      	mov	r0, r8
 8008826:	f7ff ff09 	bl	800863c <strncmp>
 800882a:	4606      	mov	r6, r0
 800882c:	2800      	cmp	r0, #0
 800882e:	d169      	bne.n	8008904 <__gethex+0x11c>
 8008830:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008834:	465d      	mov	r5, fp
 8008836:	f7ff ffc1 	bl	80087bc <__hexdig_fun>
 800883a:	2800      	cmp	r0, #0
 800883c:	d064      	beq.n	8008908 <__gethex+0x120>
 800883e:	465a      	mov	r2, fp
 8008840:	7810      	ldrb	r0, [r2, #0]
 8008842:	2830      	cmp	r0, #48	; 0x30
 8008844:	4690      	mov	r8, r2
 8008846:	f102 0201 	add.w	r2, r2, #1
 800884a:	d0f9      	beq.n	8008840 <__gethex+0x58>
 800884c:	f7ff ffb6 	bl	80087bc <__hexdig_fun>
 8008850:	2301      	movs	r3, #1
 8008852:	fab0 f480 	clz	r4, r0
 8008856:	0964      	lsrs	r4, r4, #5
 8008858:	465e      	mov	r6, fp
 800885a:	9301      	str	r3, [sp, #4]
 800885c:	4642      	mov	r2, r8
 800885e:	4615      	mov	r5, r2
 8008860:	3201      	adds	r2, #1
 8008862:	7828      	ldrb	r0, [r5, #0]
 8008864:	f7ff ffaa 	bl	80087bc <__hexdig_fun>
 8008868:	2800      	cmp	r0, #0
 800886a:	d1f8      	bne.n	800885e <__gethex+0x76>
 800886c:	4994      	ldr	r1, [pc, #592]	; (8008ac0 <__gethex+0x2d8>)
 800886e:	2201      	movs	r2, #1
 8008870:	4628      	mov	r0, r5
 8008872:	f7ff fee3 	bl	800863c <strncmp>
 8008876:	b978      	cbnz	r0, 8008898 <__gethex+0xb0>
 8008878:	b946      	cbnz	r6, 800888c <__gethex+0xa4>
 800887a:	1c6e      	adds	r6, r5, #1
 800887c:	4632      	mov	r2, r6
 800887e:	4615      	mov	r5, r2
 8008880:	3201      	adds	r2, #1
 8008882:	7828      	ldrb	r0, [r5, #0]
 8008884:	f7ff ff9a 	bl	80087bc <__hexdig_fun>
 8008888:	2800      	cmp	r0, #0
 800888a:	d1f8      	bne.n	800887e <__gethex+0x96>
 800888c:	1b73      	subs	r3, r6, r5
 800888e:	009e      	lsls	r6, r3, #2
 8008890:	e004      	b.n	800889c <__gethex+0xb4>
 8008892:	2400      	movs	r4, #0
 8008894:	4626      	mov	r6, r4
 8008896:	e7e1      	b.n	800885c <__gethex+0x74>
 8008898:	2e00      	cmp	r6, #0
 800889a:	d1f7      	bne.n	800888c <__gethex+0xa4>
 800889c:	782b      	ldrb	r3, [r5, #0]
 800889e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80088a2:	2b50      	cmp	r3, #80	; 0x50
 80088a4:	d13d      	bne.n	8008922 <__gethex+0x13a>
 80088a6:	786b      	ldrb	r3, [r5, #1]
 80088a8:	2b2b      	cmp	r3, #43	; 0x2b
 80088aa:	d02f      	beq.n	800890c <__gethex+0x124>
 80088ac:	2b2d      	cmp	r3, #45	; 0x2d
 80088ae:	d031      	beq.n	8008914 <__gethex+0x12c>
 80088b0:	1c69      	adds	r1, r5, #1
 80088b2:	f04f 0b00 	mov.w	fp, #0
 80088b6:	7808      	ldrb	r0, [r1, #0]
 80088b8:	f7ff ff80 	bl	80087bc <__hexdig_fun>
 80088bc:	1e42      	subs	r2, r0, #1
 80088be:	b2d2      	uxtb	r2, r2
 80088c0:	2a18      	cmp	r2, #24
 80088c2:	d82e      	bhi.n	8008922 <__gethex+0x13a>
 80088c4:	f1a0 0210 	sub.w	r2, r0, #16
 80088c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80088cc:	f7ff ff76 	bl	80087bc <__hexdig_fun>
 80088d0:	f100 3cff 	add.w	ip, r0, #4294967295
 80088d4:	fa5f fc8c 	uxtb.w	ip, ip
 80088d8:	f1bc 0f18 	cmp.w	ip, #24
 80088dc:	d91d      	bls.n	800891a <__gethex+0x132>
 80088de:	f1bb 0f00 	cmp.w	fp, #0
 80088e2:	d000      	beq.n	80088e6 <__gethex+0xfe>
 80088e4:	4252      	negs	r2, r2
 80088e6:	4416      	add	r6, r2
 80088e8:	f8ca 1000 	str.w	r1, [sl]
 80088ec:	b1dc      	cbz	r4, 8008926 <__gethex+0x13e>
 80088ee:	9b01      	ldr	r3, [sp, #4]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	bf14      	ite	ne
 80088f4:	f04f 0800 	movne.w	r8, #0
 80088f8:	f04f 0806 	moveq.w	r8, #6
 80088fc:	4640      	mov	r0, r8
 80088fe:	b005      	add	sp, #20
 8008900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008904:	4645      	mov	r5, r8
 8008906:	4626      	mov	r6, r4
 8008908:	2401      	movs	r4, #1
 800890a:	e7c7      	b.n	800889c <__gethex+0xb4>
 800890c:	f04f 0b00 	mov.w	fp, #0
 8008910:	1ca9      	adds	r1, r5, #2
 8008912:	e7d0      	b.n	80088b6 <__gethex+0xce>
 8008914:	f04f 0b01 	mov.w	fp, #1
 8008918:	e7fa      	b.n	8008910 <__gethex+0x128>
 800891a:	230a      	movs	r3, #10
 800891c:	fb03 0002 	mla	r0, r3, r2, r0
 8008920:	e7d0      	b.n	80088c4 <__gethex+0xdc>
 8008922:	4629      	mov	r1, r5
 8008924:	e7e0      	b.n	80088e8 <__gethex+0x100>
 8008926:	eba5 0308 	sub.w	r3, r5, r8
 800892a:	3b01      	subs	r3, #1
 800892c:	4621      	mov	r1, r4
 800892e:	2b07      	cmp	r3, #7
 8008930:	dc0a      	bgt.n	8008948 <__gethex+0x160>
 8008932:	4648      	mov	r0, r9
 8008934:	f7fe f91e 	bl	8006b74 <_Balloc>
 8008938:	4604      	mov	r4, r0
 800893a:	b940      	cbnz	r0, 800894e <__gethex+0x166>
 800893c:	4b61      	ldr	r3, [pc, #388]	; (8008ac4 <__gethex+0x2dc>)
 800893e:	4602      	mov	r2, r0
 8008940:	21e4      	movs	r1, #228	; 0xe4
 8008942:	4861      	ldr	r0, [pc, #388]	; (8008ac8 <__gethex+0x2e0>)
 8008944:	f7ff feb4 	bl	80086b0 <__assert_func>
 8008948:	3101      	adds	r1, #1
 800894a:	105b      	asrs	r3, r3, #1
 800894c:	e7ef      	b.n	800892e <__gethex+0x146>
 800894e:	f100 0a14 	add.w	sl, r0, #20
 8008952:	2300      	movs	r3, #0
 8008954:	495a      	ldr	r1, [pc, #360]	; (8008ac0 <__gethex+0x2d8>)
 8008956:	f8cd a004 	str.w	sl, [sp, #4]
 800895a:	469b      	mov	fp, r3
 800895c:	45a8      	cmp	r8, r5
 800895e:	d342      	bcc.n	80089e6 <__gethex+0x1fe>
 8008960:	9801      	ldr	r0, [sp, #4]
 8008962:	f840 bb04 	str.w	fp, [r0], #4
 8008966:	eba0 000a 	sub.w	r0, r0, sl
 800896a:	1080      	asrs	r0, r0, #2
 800896c:	6120      	str	r0, [r4, #16]
 800896e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8008972:	4658      	mov	r0, fp
 8008974:	f7fe f9f0 	bl	8006d58 <__hi0bits>
 8008978:	683d      	ldr	r5, [r7, #0]
 800897a:	eba8 0000 	sub.w	r0, r8, r0
 800897e:	42a8      	cmp	r0, r5
 8008980:	dd59      	ble.n	8008a36 <__gethex+0x24e>
 8008982:	eba0 0805 	sub.w	r8, r0, r5
 8008986:	4641      	mov	r1, r8
 8008988:	4620      	mov	r0, r4
 800898a:	f7fe fd7f 	bl	800748c <__any_on>
 800898e:	4683      	mov	fp, r0
 8008990:	b1b8      	cbz	r0, 80089c2 <__gethex+0x1da>
 8008992:	f108 33ff 	add.w	r3, r8, #4294967295
 8008996:	1159      	asrs	r1, r3, #5
 8008998:	f003 021f 	and.w	r2, r3, #31
 800899c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80089a0:	f04f 0b01 	mov.w	fp, #1
 80089a4:	fa0b f202 	lsl.w	r2, fp, r2
 80089a8:	420a      	tst	r2, r1
 80089aa:	d00a      	beq.n	80089c2 <__gethex+0x1da>
 80089ac:	455b      	cmp	r3, fp
 80089ae:	dd06      	ble.n	80089be <__gethex+0x1d6>
 80089b0:	f1a8 0102 	sub.w	r1, r8, #2
 80089b4:	4620      	mov	r0, r4
 80089b6:	f7fe fd69 	bl	800748c <__any_on>
 80089ba:	2800      	cmp	r0, #0
 80089bc:	d138      	bne.n	8008a30 <__gethex+0x248>
 80089be:	f04f 0b02 	mov.w	fp, #2
 80089c2:	4641      	mov	r1, r8
 80089c4:	4620      	mov	r0, r4
 80089c6:	f7ff fea7 	bl	8008718 <rshift>
 80089ca:	4446      	add	r6, r8
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	42b3      	cmp	r3, r6
 80089d0:	da41      	bge.n	8008a56 <__gethex+0x26e>
 80089d2:	4621      	mov	r1, r4
 80089d4:	4648      	mov	r0, r9
 80089d6:	f7fe f90d 	bl	8006bf4 <_Bfree>
 80089da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089dc:	2300      	movs	r3, #0
 80089de:	6013      	str	r3, [r2, #0]
 80089e0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80089e4:	e78a      	b.n	80088fc <__gethex+0x114>
 80089e6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80089ea:	2a2e      	cmp	r2, #46	; 0x2e
 80089ec:	d014      	beq.n	8008a18 <__gethex+0x230>
 80089ee:	2b20      	cmp	r3, #32
 80089f0:	d106      	bne.n	8008a00 <__gethex+0x218>
 80089f2:	9b01      	ldr	r3, [sp, #4]
 80089f4:	f843 bb04 	str.w	fp, [r3], #4
 80089f8:	f04f 0b00 	mov.w	fp, #0
 80089fc:	9301      	str	r3, [sp, #4]
 80089fe:	465b      	mov	r3, fp
 8008a00:	7828      	ldrb	r0, [r5, #0]
 8008a02:	9303      	str	r3, [sp, #12]
 8008a04:	f7ff feda 	bl	80087bc <__hexdig_fun>
 8008a08:	9b03      	ldr	r3, [sp, #12]
 8008a0a:	f000 000f 	and.w	r0, r0, #15
 8008a0e:	4098      	lsls	r0, r3
 8008a10:	ea4b 0b00 	orr.w	fp, fp, r0
 8008a14:	3304      	adds	r3, #4
 8008a16:	e7a1      	b.n	800895c <__gethex+0x174>
 8008a18:	45a8      	cmp	r8, r5
 8008a1a:	d8e8      	bhi.n	80089ee <__gethex+0x206>
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	4628      	mov	r0, r5
 8008a20:	9303      	str	r3, [sp, #12]
 8008a22:	f7ff fe0b 	bl	800863c <strncmp>
 8008a26:	4926      	ldr	r1, [pc, #152]	; (8008ac0 <__gethex+0x2d8>)
 8008a28:	9b03      	ldr	r3, [sp, #12]
 8008a2a:	2800      	cmp	r0, #0
 8008a2c:	d1df      	bne.n	80089ee <__gethex+0x206>
 8008a2e:	e795      	b.n	800895c <__gethex+0x174>
 8008a30:	f04f 0b03 	mov.w	fp, #3
 8008a34:	e7c5      	b.n	80089c2 <__gethex+0x1da>
 8008a36:	da0b      	bge.n	8008a50 <__gethex+0x268>
 8008a38:	eba5 0800 	sub.w	r8, r5, r0
 8008a3c:	4621      	mov	r1, r4
 8008a3e:	4642      	mov	r2, r8
 8008a40:	4648      	mov	r0, r9
 8008a42:	f7fe faf1 	bl	8007028 <__lshift>
 8008a46:	eba6 0608 	sub.w	r6, r6, r8
 8008a4a:	4604      	mov	r4, r0
 8008a4c:	f100 0a14 	add.w	sl, r0, #20
 8008a50:	f04f 0b00 	mov.w	fp, #0
 8008a54:	e7ba      	b.n	80089cc <__gethex+0x1e4>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	42b3      	cmp	r3, r6
 8008a5a:	dd73      	ble.n	8008b44 <__gethex+0x35c>
 8008a5c:	1b9e      	subs	r6, r3, r6
 8008a5e:	42b5      	cmp	r5, r6
 8008a60:	dc34      	bgt.n	8008acc <__gethex+0x2e4>
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d023      	beq.n	8008ab0 <__gethex+0x2c8>
 8008a68:	2b03      	cmp	r3, #3
 8008a6a:	d025      	beq.n	8008ab8 <__gethex+0x2d0>
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d115      	bne.n	8008a9c <__gethex+0x2b4>
 8008a70:	42b5      	cmp	r5, r6
 8008a72:	d113      	bne.n	8008a9c <__gethex+0x2b4>
 8008a74:	2d01      	cmp	r5, #1
 8008a76:	d10b      	bne.n	8008a90 <__gethex+0x2a8>
 8008a78:	9a02      	ldr	r2, [sp, #8]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6013      	str	r3, [r2, #0]
 8008a7e:	2301      	movs	r3, #1
 8008a80:	6123      	str	r3, [r4, #16]
 8008a82:	f8ca 3000 	str.w	r3, [sl]
 8008a86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a88:	f04f 0862 	mov.w	r8, #98	; 0x62
 8008a8c:	601c      	str	r4, [r3, #0]
 8008a8e:	e735      	b.n	80088fc <__gethex+0x114>
 8008a90:	1e69      	subs	r1, r5, #1
 8008a92:	4620      	mov	r0, r4
 8008a94:	f7fe fcfa 	bl	800748c <__any_on>
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	d1ed      	bne.n	8008a78 <__gethex+0x290>
 8008a9c:	4621      	mov	r1, r4
 8008a9e:	4648      	mov	r0, r9
 8008aa0:	f7fe f8a8 	bl	8006bf4 <_Bfree>
 8008aa4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	6013      	str	r3, [r2, #0]
 8008aaa:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008aae:	e725      	b.n	80088fc <__gethex+0x114>
 8008ab0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d1f2      	bne.n	8008a9c <__gethex+0x2b4>
 8008ab6:	e7df      	b.n	8008a78 <__gethex+0x290>
 8008ab8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1dc      	bne.n	8008a78 <__gethex+0x290>
 8008abe:	e7ed      	b.n	8008a9c <__gethex+0x2b4>
 8008ac0:	080096cc 	.word	0x080096cc
 8008ac4:	08009561 	.word	0x08009561
 8008ac8:	08009876 	.word	0x08009876
 8008acc:	f106 38ff 	add.w	r8, r6, #4294967295
 8008ad0:	f1bb 0f00 	cmp.w	fp, #0
 8008ad4:	d133      	bne.n	8008b3e <__gethex+0x356>
 8008ad6:	f1b8 0f00 	cmp.w	r8, #0
 8008ada:	d004      	beq.n	8008ae6 <__gethex+0x2fe>
 8008adc:	4641      	mov	r1, r8
 8008ade:	4620      	mov	r0, r4
 8008ae0:	f7fe fcd4 	bl	800748c <__any_on>
 8008ae4:	4683      	mov	fp, r0
 8008ae6:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008aea:	2301      	movs	r3, #1
 8008aec:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008af0:	f008 081f 	and.w	r8, r8, #31
 8008af4:	fa03 f308 	lsl.w	r3, r3, r8
 8008af8:	4213      	tst	r3, r2
 8008afa:	4631      	mov	r1, r6
 8008afc:	4620      	mov	r0, r4
 8008afe:	bf18      	it	ne
 8008b00:	f04b 0b02 	orrne.w	fp, fp, #2
 8008b04:	1bad      	subs	r5, r5, r6
 8008b06:	f7ff fe07 	bl	8008718 <rshift>
 8008b0a:	687e      	ldr	r6, [r7, #4]
 8008b0c:	f04f 0802 	mov.w	r8, #2
 8008b10:	f1bb 0f00 	cmp.w	fp, #0
 8008b14:	d04a      	beq.n	8008bac <__gethex+0x3c4>
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d016      	beq.n	8008b4a <__gethex+0x362>
 8008b1c:	2b03      	cmp	r3, #3
 8008b1e:	d018      	beq.n	8008b52 <__gethex+0x36a>
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d109      	bne.n	8008b38 <__gethex+0x350>
 8008b24:	f01b 0f02 	tst.w	fp, #2
 8008b28:	d006      	beq.n	8008b38 <__gethex+0x350>
 8008b2a:	f8da 3000 	ldr.w	r3, [sl]
 8008b2e:	ea4b 0b03 	orr.w	fp, fp, r3
 8008b32:	f01b 0f01 	tst.w	fp, #1
 8008b36:	d10f      	bne.n	8008b58 <__gethex+0x370>
 8008b38:	f048 0810 	orr.w	r8, r8, #16
 8008b3c:	e036      	b.n	8008bac <__gethex+0x3c4>
 8008b3e:	f04f 0b01 	mov.w	fp, #1
 8008b42:	e7d0      	b.n	8008ae6 <__gethex+0x2fe>
 8008b44:	f04f 0801 	mov.w	r8, #1
 8008b48:	e7e2      	b.n	8008b10 <__gethex+0x328>
 8008b4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b4c:	f1c3 0301 	rsb	r3, r3, #1
 8008b50:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d0ef      	beq.n	8008b38 <__gethex+0x350>
 8008b58:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008b5c:	f104 0214 	add.w	r2, r4, #20
 8008b60:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008b64:	9301      	str	r3, [sp, #4]
 8008b66:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	4694      	mov	ip, r2
 8008b6e:	f852 1b04 	ldr.w	r1, [r2], #4
 8008b72:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008b76:	d01e      	beq.n	8008bb6 <__gethex+0x3ce>
 8008b78:	3101      	adds	r1, #1
 8008b7a:	f8cc 1000 	str.w	r1, [ip]
 8008b7e:	f1b8 0f02 	cmp.w	r8, #2
 8008b82:	f104 0214 	add.w	r2, r4, #20
 8008b86:	d13d      	bne.n	8008c04 <__gethex+0x41c>
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	42ab      	cmp	r3, r5
 8008b8e:	d10b      	bne.n	8008ba8 <__gethex+0x3c0>
 8008b90:	1169      	asrs	r1, r5, #5
 8008b92:	2301      	movs	r3, #1
 8008b94:	f005 051f 	and.w	r5, r5, #31
 8008b98:	fa03 f505 	lsl.w	r5, r3, r5
 8008b9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ba0:	421d      	tst	r5, r3
 8008ba2:	bf18      	it	ne
 8008ba4:	f04f 0801 	movne.w	r8, #1
 8008ba8:	f048 0820 	orr.w	r8, r8, #32
 8008bac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bae:	601c      	str	r4, [r3, #0]
 8008bb0:	9b02      	ldr	r3, [sp, #8]
 8008bb2:	601e      	str	r6, [r3, #0]
 8008bb4:	e6a2      	b.n	80088fc <__gethex+0x114>
 8008bb6:	4290      	cmp	r0, r2
 8008bb8:	f842 3c04 	str.w	r3, [r2, #-4]
 8008bbc:	d8d6      	bhi.n	8008b6c <__gethex+0x384>
 8008bbe:	68a2      	ldr	r2, [r4, #8]
 8008bc0:	4593      	cmp	fp, r2
 8008bc2:	db17      	blt.n	8008bf4 <__gethex+0x40c>
 8008bc4:	6861      	ldr	r1, [r4, #4]
 8008bc6:	4648      	mov	r0, r9
 8008bc8:	3101      	adds	r1, #1
 8008bca:	f7fd ffd3 	bl	8006b74 <_Balloc>
 8008bce:	4682      	mov	sl, r0
 8008bd0:	b918      	cbnz	r0, 8008bda <__gethex+0x3f2>
 8008bd2:	4b1b      	ldr	r3, [pc, #108]	; (8008c40 <__gethex+0x458>)
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	2184      	movs	r1, #132	; 0x84
 8008bd8:	e6b3      	b.n	8008942 <__gethex+0x15a>
 8008bda:	6922      	ldr	r2, [r4, #16]
 8008bdc:	3202      	adds	r2, #2
 8008bde:	f104 010c 	add.w	r1, r4, #12
 8008be2:	0092      	lsls	r2, r2, #2
 8008be4:	300c      	adds	r0, #12
 8008be6:	f7ff fd4b 	bl	8008680 <memcpy>
 8008bea:	4621      	mov	r1, r4
 8008bec:	4648      	mov	r0, r9
 8008bee:	f7fe f801 	bl	8006bf4 <_Bfree>
 8008bf2:	4654      	mov	r4, sl
 8008bf4:	6922      	ldr	r2, [r4, #16]
 8008bf6:	1c51      	adds	r1, r2, #1
 8008bf8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008bfc:	6121      	str	r1, [r4, #16]
 8008bfe:	2101      	movs	r1, #1
 8008c00:	6151      	str	r1, [r2, #20]
 8008c02:	e7bc      	b.n	8008b7e <__gethex+0x396>
 8008c04:	6921      	ldr	r1, [r4, #16]
 8008c06:	4559      	cmp	r1, fp
 8008c08:	dd0b      	ble.n	8008c22 <__gethex+0x43a>
 8008c0a:	2101      	movs	r1, #1
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	f7ff fd83 	bl	8008718 <rshift>
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	3601      	adds	r6, #1
 8008c16:	42b3      	cmp	r3, r6
 8008c18:	f6ff aedb 	blt.w	80089d2 <__gethex+0x1ea>
 8008c1c:	f04f 0801 	mov.w	r8, #1
 8008c20:	e7c2      	b.n	8008ba8 <__gethex+0x3c0>
 8008c22:	f015 051f 	ands.w	r5, r5, #31
 8008c26:	d0f9      	beq.n	8008c1c <__gethex+0x434>
 8008c28:	9b01      	ldr	r3, [sp, #4]
 8008c2a:	441a      	add	r2, r3
 8008c2c:	f1c5 0520 	rsb	r5, r5, #32
 8008c30:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008c34:	f7fe f890 	bl	8006d58 <__hi0bits>
 8008c38:	42a8      	cmp	r0, r5
 8008c3a:	dbe6      	blt.n	8008c0a <__gethex+0x422>
 8008c3c:	e7ee      	b.n	8008c1c <__gethex+0x434>
 8008c3e:	bf00      	nop
 8008c40:	08009561 	.word	0x08009561

08008c44 <L_shift>:
 8008c44:	f1c2 0208 	rsb	r2, r2, #8
 8008c48:	0092      	lsls	r2, r2, #2
 8008c4a:	b570      	push	{r4, r5, r6, lr}
 8008c4c:	f1c2 0620 	rsb	r6, r2, #32
 8008c50:	6843      	ldr	r3, [r0, #4]
 8008c52:	6804      	ldr	r4, [r0, #0]
 8008c54:	fa03 f506 	lsl.w	r5, r3, r6
 8008c58:	432c      	orrs	r4, r5
 8008c5a:	40d3      	lsrs	r3, r2
 8008c5c:	6004      	str	r4, [r0, #0]
 8008c5e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008c62:	4288      	cmp	r0, r1
 8008c64:	d3f4      	bcc.n	8008c50 <L_shift+0xc>
 8008c66:	bd70      	pop	{r4, r5, r6, pc}

08008c68 <__match>:
 8008c68:	b530      	push	{r4, r5, lr}
 8008c6a:	6803      	ldr	r3, [r0, #0]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c72:	b914      	cbnz	r4, 8008c7a <__match+0x12>
 8008c74:	6003      	str	r3, [r0, #0]
 8008c76:	2001      	movs	r0, #1
 8008c78:	bd30      	pop	{r4, r5, pc}
 8008c7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c7e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008c82:	2d19      	cmp	r5, #25
 8008c84:	bf98      	it	ls
 8008c86:	3220      	addls	r2, #32
 8008c88:	42a2      	cmp	r2, r4
 8008c8a:	d0f0      	beq.n	8008c6e <__match+0x6>
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	e7f3      	b.n	8008c78 <__match+0x10>

08008c90 <__hexnan>:
 8008c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c94:	680b      	ldr	r3, [r1, #0]
 8008c96:	6801      	ldr	r1, [r0, #0]
 8008c98:	115e      	asrs	r6, r3, #5
 8008c9a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008c9e:	f013 031f 	ands.w	r3, r3, #31
 8008ca2:	b087      	sub	sp, #28
 8008ca4:	bf18      	it	ne
 8008ca6:	3604      	addne	r6, #4
 8008ca8:	2500      	movs	r5, #0
 8008caa:	1f37      	subs	r7, r6, #4
 8008cac:	4682      	mov	sl, r0
 8008cae:	4690      	mov	r8, r2
 8008cb0:	9301      	str	r3, [sp, #4]
 8008cb2:	f846 5c04 	str.w	r5, [r6, #-4]
 8008cb6:	46b9      	mov	r9, r7
 8008cb8:	463c      	mov	r4, r7
 8008cba:	9502      	str	r5, [sp, #8]
 8008cbc:	46ab      	mov	fp, r5
 8008cbe:	784a      	ldrb	r2, [r1, #1]
 8008cc0:	1c4b      	adds	r3, r1, #1
 8008cc2:	9303      	str	r3, [sp, #12]
 8008cc4:	b342      	cbz	r2, 8008d18 <__hexnan+0x88>
 8008cc6:	4610      	mov	r0, r2
 8008cc8:	9105      	str	r1, [sp, #20]
 8008cca:	9204      	str	r2, [sp, #16]
 8008ccc:	f7ff fd76 	bl	80087bc <__hexdig_fun>
 8008cd0:	2800      	cmp	r0, #0
 8008cd2:	d14f      	bne.n	8008d74 <__hexnan+0xe4>
 8008cd4:	9a04      	ldr	r2, [sp, #16]
 8008cd6:	9905      	ldr	r1, [sp, #20]
 8008cd8:	2a20      	cmp	r2, #32
 8008cda:	d818      	bhi.n	8008d0e <__hexnan+0x7e>
 8008cdc:	9b02      	ldr	r3, [sp, #8]
 8008cde:	459b      	cmp	fp, r3
 8008ce0:	dd13      	ble.n	8008d0a <__hexnan+0x7a>
 8008ce2:	454c      	cmp	r4, r9
 8008ce4:	d206      	bcs.n	8008cf4 <__hexnan+0x64>
 8008ce6:	2d07      	cmp	r5, #7
 8008ce8:	dc04      	bgt.n	8008cf4 <__hexnan+0x64>
 8008cea:	462a      	mov	r2, r5
 8008cec:	4649      	mov	r1, r9
 8008cee:	4620      	mov	r0, r4
 8008cf0:	f7ff ffa8 	bl	8008c44 <L_shift>
 8008cf4:	4544      	cmp	r4, r8
 8008cf6:	d950      	bls.n	8008d9a <__hexnan+0x10a>
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	f1a4 0904 	sub.w	r9, r4, #4
 8008cfe:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d02:	f8cd b008 	str.w	fp, [sp, #8]
 8008d06:	464c      	mov	r4, r9
 8008d08:	461d      	mov	r5, r3
 8008d0a:	9903      	ldr	r1, [sp, #12]
 8008d0c:	e7d7      	b.n	8008cbe <__hexnan+0x2e>
 8008d0e:	2a29      	cmp	r2, #41	; 0x29
 8008d10:	d155      	bne.n	8008dbe <__hexnan+0x12e>
 8008d12:	3102      	adds	r1, #2
 8008d14:	f8ca 1000 	str.w	r1, [sl]
 8008d18:	f1bb 0f00 	cmp.w	fp, #0
 8008d1c:	d04f      	beq.n	8008dbe <__hexnan+0x12e>
 8008d1e:	454c      	cmp	r4, r9
 8008d20:	d206      	bcs.n	8008d30 <__hexnan+0xa0>
 8008d22:	2d07      	cmp	r5, #7
 8008d24:	dc04      	bgt.n	8008d30 <__hexnan+0xa0>
 8008d26:	462a      	mov	r2, r5
 8008d28:	4649      	mov	r1, r9
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	f7ff ff8a 	bl	8008c44 <L_shift>
 8008d30:	4544      	cmp	r4, r8
 8008d32:	d934      	bls.n	8008d9e <__hexnan+0x10e>
 8008d34:	f1a8 0204 	sub.w	r2, r8, #4
 8008d38:	4623      	mov	r3, r4
 8008d3a:	f853 1b04 	ldr.w	r1, [r3], #4
 8008d3e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008d42:	429f      	cmp	r7, r3
 8008d44:	d2f9      	bcs.n	8008d3a <__hexnan+0xaa>
 8008d46:	1b3b      	subs	r3, r7, r4
 8008d48:	f023 0303 	bic.w	r3, r3, #3
 8008d4c:	3304      	adds	r3, #4
 8008d4e:	3e03      	subs	r6, #3
 8008d50:	3401      	adds	r4, #1
 8008d52:	42a6      	cmp	r6, r4
 8008d54:	bf38      	it	cc
 8008d56:	2304      	movcc	r3, #4
 8008d58:	4443      	add	r3, r8
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f843 2b04 	str.w	r2, [r3], #4
 8008d60:	429f      	cmp	r7, r3
 8008d62:	d2fb      	bcs.n	8008d5c <__hexnan+0xcc>
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	b91b      	cbnz	r3, 8008d70 <__hexnan+0xe0>
 8008d68:	4547      	cmp	r7, r8
 8008d6a:	d126      	bne.n	8008dba <__hexnan+0x12a>
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	603b      	str	r3, [r7, #0]
 8008d70:	2005      	movs	r0, #5
 8008d72:	e025      	b.n	8008dc0 <__hexnan+0x130>
 8008d74:	3501      	adds	r5, #1
 8008d76:	2d08      	cmp	r5, #8
 8008d78:	f10b 0b01 	add.w	fp, fp, #1
 8008d7c:	dd06      	ble.n	8008d8c <__hexnan+0xfc>
 8008d7e:	4544      	cmp	r4, r8
 8008d80:	d9c3      	bls.n	8008d0a <__hexnan+0x7a>
 8008d82:	2300      	movs	r3, #0
 8008d84:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d88:	2501      	movs	r5, #1
 8008d8a:	3c04      	subs	r4, #4
 8008d8c:	6822      	ldr	r2, [r4, #0]
 8008d8e:	f000 000f 	and.w	r0, r0, #15
 8008d92:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008d96:	6020      	str	r0, [r4, #0]
 8008d98:	e7b7      	b.n	8008d0a <__hexnan+0x7a>
 8008d9a:	2508      	movs	r5, #8
 8008d9c:	e7b5      	b.n	8008d0a <__hexnan+0x7a>
 8008d9e:	9b01      	ldr	r3, [sp, #4]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d0df      	beq.n	8008d64 <__hexnan+0xd4>
 8008da4:	f1c3 0320 	rsb	r3, r3, #32
 8008da8:	f04f 32ff 	mov.w	r2, #4294967295
 8008dac:	40da      	lsrs	r2, r3
 8008dae:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008db2:	4013      	ands	r3, r2
 8008db4:	f846 3c04 	str.w	r3, [r6, #-4]
 8008db8:	e7d4      	b.n	8008d64 <__hexnan+0xd4>
 8008dba:	3f04      	subs	r7, #4
 8008dbc:	e7d2      	b.n	8008d64 <__hexnan+0xd4>
 8008dbe:	2004      	movs	r0, #4
 8008dc0:	b007      	add	sp, #28
 8008dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008dc6 <__ascii_mbtowc>:
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	b901      	cbnz	r1, 8008dcc <__ascii_mbtowc+0x6>
 8008dca:	a901      	add	r1, sp, #4
 8008dcc:	b142      	cbz	r2, 8008de0 <__ascii_mbtowc+0x1a>
 8008dce:	b14b      	cbz	r3, 8008de4 <__ascii_mbtowc+0x1e>
 8008dd0:	7813      	ldrb	r3, [r2, #0]
 8008dd2:	600b      	str	r3, [r1, #0]
 8008dd4:	7812      	ldrb	r2, [r2, #0]
 8008dd6:	1e10      	subs	r0, r2, #0
 8008dd8:	bf18      	it	ne
 8008dda:	2001      	movne	r0, #1
 8008ddc:	b002      	add	sp, #8
 8008dde:	4770      	bx	lr
 8008de0:	4610      	mov	r0, r2
 8008de2:	e7fb      	b.n	8008ddc <__ascii_mbtowc+0x16>
 8008de4:	f06f 0001 	mvn.w	r0, #1
 8008de8:	e7f8      	b.n	8008ddc <__ascii_mbtowc+0x16>

08008dea <_realloc_r>:
 8008dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dee:	4680      	mov	r8, r0
 8008df0:	4614      	mov	r4, r2
 8008df2:	460e      	mov	r6, r1
 8008df4:	b921      	cbnz	r1, 8008e00 <_realloc_r+0x16>
 8008df6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dfa:	4611      	mov	r1, r2
 8008dfc:	f7fd be2e 	b.w	8006a5c <_malloc_r>
 8008e00:	b92a      	cbnz	r2, 8008e0e <_realloc_r+0x24>
 8008e02:	f7fd fdb7 	bl	8006974 <_free_r>
 8008e06:	4625      	mov	r5, r4
 8008e08:	4628      	mov	r0, r5
 8008e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e0e:	f000 f842 	bl	8008e96 <_malloc_usable_size_r>
 8008e12:	4284      	cmp	r4, r0
 8008e14:	4607      	mov	r7, r0
 8008e16:	d802      	bhi.n	8008e1e <_realloc_r+0x34>
 8008e18:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e1c:	d812      	bhi.n	8008e44 <_realloc_r+0x5a>
 8008e1e:	4621      	mov	r1, r4
 8008e20:	4640      	mov	r0, r8
 8008e22:	f7fd fe1b 	bl	8006a5c <_malloc_r>
 8008e26:	4605      	mov	r5, r0
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	d0ed      	beq.n	8008e08 <_realloc_r+0x1e>
 8008e2c:	42bc      	cmp	r4, r7
 8008e2e:	4622      	mov	r2, r4
 8008e30:	4631      	mov	r1, r6
 8008e32:	bf28      	it	cs
 8008e34:	463a      	movcs	r2, r7
 8008e36:	f7ff fc23 	bl	8008680 <memcpy>
 8008e3a:	4631      	mov	r1, r6
 8008e3c:	4640      	mov	r0, r8
 8008e3e:	f7fd fd99 	bl	8006974 <_free_r>
 8008e42:	e7e1      	b.n	8008e08 <_realloc_r+0x1e>
 8008e44:	4635      	mov	r5, r6
 8008e46:	e7df      	b.n	8008e08 <_realloc_r+0x1e>

08008e48 <__ascii_wctomb>:
 8008e48:	b149      	cbz	r1, 8008e5e <__ascii_wctomb+0x16>
 8008e4a:	2aff      	cmp	r2, #255	; 0xff
 8008e4c:	bf85      	ittet	hi
 8008e4e:	238a      	movhi	r3, #138	; 0x8a
 8008e50:	6003      	strhi	r3, [r0, #0]
 8008e52:	700a      	strbls	r2, [r1, #0]
 8008e54:	f04f 30ff 	movhi.w	r0, #4294967295
 8008e58:	bf98      	it	ls
 8008e5a:	2001      	movls	r0, #1
 8008e5c:	4770      	bx	lr
 8008e5e:	4608      	mov	r0, r1
 8008e60:	4770      	bx	lr
	...

08008e64 <fiprintf>:
 8008e64:	b40e      	push	{r1, r2, r3}
 8008e66:	b503      	push	{r0, r1, lr}
 8008e68:	4601      	mov	r1, r0
 8008e6a:	ab03      	add	r3, sp, #12
 8008e6c:	4805      	ldr	r0, [pc, #20]	; (8008e84 <fiprintf+0x20>)
 8008e6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e72:	6800      	ldr	r0, [r0, #0]
 8008e74:	9301      	str	r3, [sp, #4]
 8008e76:	f000 f83f 	bl	8008ef8 <_vfiprintf_r>
 8008e7a:	b002      	add	sp, #8
 8008e7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e80:	b003      	add	sp, #12
 8008e82:	4770      	bx	lr
 8008e84:	20000064 	.word	0x20000064

08008e88 <abort>:
 8008e88:	b508      	push	{r3, lr}
 8008e8a:	2006      	movs	r0, #6
 8008e8c:	f000 fa0c 	bl	80092a8 <raise>
 8008e90:	2001      	movs	r0, #1
 8008e92:	f7f8 fe9f 	bl	8001bd4 <_exit>

08008e96 <_malloc_usable_size_r>:
 8008e96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e9a:	1f18      	subs	r0, r3, #4
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	bfbc      	itt	lt
 8008ea0:	580b      	ldrlt	r3, [r1, r0]
 8008ea2:	18c0      	addlt	r0, r0, r3
 8008ea4:	4770      	bx	lr

08008ea6 <__sfputc_r>:
 8008ea6:	6893      	ldr	r3, [r2, #8]
 8008ea8:	3b01      	subs	r3, #1
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	b410      	push	{r4}
 8008eae:	6093      	str	r3, [r2, #8]
 8008eb0:	da08      	bge.n	8008ec4 <__sfputc_r+0x1e>
 8008eb2:	6994      	ldr	r4, [r2, #24]
 8008eb4:	42a3      	cmp	r3, r4
 8008eb6:	db01      	blt.n	8008ebc <__sfputc_r+0x16>
 8008eb8:	290a      	cmp	r1, #10
 8008eba:	d103      	bne.n	8008ec4 <__sfputc_r+0x1e>
 8008ebc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ec0:	f000 b934 	b.w	800912c <__swbuf_r>
 8008ec4:	6813      	ldr	r3, [r2, #0]
 8008ec6:	1c58      	adds	r0, r3, #1
 8008ec8:	6010      	str	r0, [r2, #0]
 8008eca:	7019      	strb	r1, [r3, #0]
 8008ecc:	4608      	mov	r0, r1
 8008ece:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <__sfputs_r>:
 8008ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed6:	4606      	mov	r6, r0
 8008ed8:	460f      	mov	r7, r1
 8008eda:	4614      	mov	r4, r2
 8008edc:	18d5      	adds	r5, r2, r3
 8008ede:	42ac      	cmp	r4, r5
 8008ee0:	d101      	bne.n	8008ee6 <__sfputs_r+0x12>
 8008ee2:	2000      	movs	r0, #0
 8008ee4:	e007      	b.n	8008ef6 <__sfputs_r+0x22>
 8008ee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eea:	463a      	mov	r2, r7
 8008eec:	4630      	mov	r0, r6
 8008eee:	f7ff ffda 	bl	8008ea6 <__sfputc_r>
 8008ef2:	1c43      	adds	r3, r0, #1
 8008ef4:	d1f3      	bne.n	8008ede <__sfputs_r+0xa>
 8008ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008ef8 <_vfiprintf_r>:
 8008ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008efc:	460d      	mov	r5, r1
 8008efe:	b09d      	sub	sp, #116	; 0x74
 8008f00:	4614      	mov	r4, r2
 8008f02:	4698      	mov	r8, r3
 8008f04:	4606      	mov	r6, r0
 8008f06:	b118      	cbz	r0, 8008f10 <_vfiprintf_r+0x18>
 8008f08:	6a03      	ldr	r3, [r0, #32]
 8008f0a:	b90b      	cbnz	r3, 8008f10 <_vfiprintf_r+0x18>
 8008f0c:	f7fc fd96 	bl	8005a3c <__sinit>
 8008f10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f12:	07d9      	lsls	r1, r3, #31
 8008f14:	d405      	bmi.n	8008f22 <_vfiprintf_r+0x2a>
 8008f16:	89ab      	ldrh	r3, [r5, #12]
 8008f18:	059a      	lsls	r2, r3, #22
 8008f1a:	d402      	bmi.n	8008f22 <_vfiprintf_r+0x2a>
 8008f1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f1e:	f7fc fea4 	bl	8005c6a <__retarget_lock_acquire_recursive>
 8008f22:	89ab      	ldrh	r3, [r5, #12]
 8008f24:	071b      	lsls	r3, r3, #28
 8008f26:	d501      	bpl.n	8008f2c <_vfiprintf_r+0x34>
 8008f28:	692b      	ldr	r3, [r5, #16]
 8008f2a:	b99b      	cbnz	r3, 8008f54 <_vfiprintf_r+0x5c>
 8008f2c:	4629      	mov	r1, r5
 8008f2e:	4630      	mov	r0, r6
 8008f30:	f000 f93a 	bl	80091a8 <__swsetup_r>
 8008f34:	b170      	cbz	r0, 8008f54 <_vfiprintf_r+0x5c>
 8008f36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f38:	07dc      	lsls	r4, r3, #31
 8008f3a:	d504      	bpl.n	8008f46 <_vfiprintf_r+0x4e>
 8008f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f40:	b01d      	add	sp, #116	; 0x74
 8008f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f46:	89ab      	ldrh	r3, [r5, #12]
 8008f48:	0598      	lsls	r0, r3, #22
 8008f4a:	d4f7      	bmi.n	8008f3c <_vfiprintf_r+0x44>
 8008f4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f4e:	f7fc fe8d 	bl	8005c6c <__retarget_lock_release_recursive>
 8008f52:	e7f3      	b.n	8008f3c <_vfiprintf_r+0x44>
 8008f54:	2300      	movs	r3, #0
 8008f56:	9309      	str	r3, [sp, #36]	; 0x24
 8008f58:	2320      	movs	r3, #32
 8008f5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f62:	2330      	movs	r3, #48	; 0x30
 8008f64:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009118 <_vfiprintf_r+0x220>
 8008f68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f6c:	f04f 0901 	mov.w	r9, #1
 8008f70:	4623      	mov	r3, r4
 8008f72:	469a      	mov	sl, r3
 8008f74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f78:	b10a      	cbz	r2, 8008f7e <_vfiprintf_r+0x86>
 8008f7a:	2a25      	cmp	r2, #37	; 0x25
 8008f7c:	d1f9      	bne.n	8008f72 <_vfiprintf_r+0x7a>
 8008f7e:	ebba 0b04 	subs.w	fp, sl, r4
 8008f82:	d00b      	beq.n	8008f9c <_vfiprintf_r+0xa4>
 8008f84:	465b      	mov	r3, fp
 8008f86:	4622      	mov	r2, r4
 8008f88:	4629      	mov	r1, r5
 8008f8a:	4630      	mov	r0, r6
 8008f8c:	f7ff ffa2 	bl	8008ed4 <__sfputs_r>
 8008f90:	3001      	adds	r0, #1
 8008f92:	f000 80a9 	beq.w	80090e8 <_vfiprintf_r+0x1f0>
 8008f96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f98:	445a      	add	r2, fp
 8008f9a:	9209      	str	r2, [sp, #36]	; 0x24
 8008f9c:	f89a 3000 	ldrb.w	r3, [sl]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	f000 80a1 	beq.w	80090e8 <_vfiprintf_r+0x1f0>
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8008fac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fb0:	f10a 0a01 	add.w	sl, sl, #1
 8008fb4:	9304      	str	r3, [sp, #16]
 8008fb6:	9307      	str	r3, [sp, #28]
 8008fb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fbc:	931a      	str	r3, [sp, #104]	; 0x68
 8008fbe:	4654      	mov	r4, sl
 8008fc0:	2205      	movs	r2, #5
 8008fc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fc6:	4854      	ldr	r0, [pc, #336]	; (8009118 <_vfiprintf_r+0x220>)
 8008fc8:	f7f7 f902 	bl	80001d0 <memchr>
 8008fcc:	9a04      	ldr	r2, [sp, #16]
 8008fce:	b9d8      	cbnz	r0, 8009008 <_vfiprintf_r+0x110>
 8008fd0:	06d1      	lsls	r1, r2, #27
 8008fd2:	bf44      	itt	mi
 8008fd4:	2320      	movmi	r3, #32
 8008fd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fda:	0713      	lsls	r3, r2, #28
 8008fdc:	bf44      	itt	mi
 8008fde:	232b      	movmi	r3, #43	; 0x2b
 8008fe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8008fe8:	2b2a      	cmp	r3, #42	; 0x2a
 8008fea:	d015      	beq.n	8009018 <_vfiprintf_r+0x120>
 8008fec:	9a07      	ldr	r2, [sp, #28]
 8008fee:	4654      	mov	r4, sl
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	f04f 0c0a 	mov.w	ip, #10
 8008ff6:	4621      	mov	r1, r4
 8008ff8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ffc:	3b30      	subs	r3, #48	; 0x30
 8008ffe:	2b09      	cmp	r3, #9
 8009000:	d94d      	bls.n	800909e <_vfiprintf_r+0x1a6>
 8009002:	b1b0      	cbz	r0, 8009032 <_vfiprintf_r+0x13a>
 8009004:	9207      	str	r2, [sp, #28]
 8009006:	e014      	b.n	8009032 <_vfiprintf_r+0x13a>
 8009008:	eba0 0308 	sub.w	r3, r0, r8
 800900c:	fa09 f303 	lsl.w	r3, r9, r3
 8009010:	4313      	orrs	r3, r2
 8009012:	9304      	str	r3, [sp, #16]
 8009014:	46a2      	mov	sl, r4
 8009016:	e7d2      	b.n	8008fbe <_vfiprintf_r+0xc6>
 8009018:	9b03      	ldr	r3, [sp, #12]
 800901a:	1d19      	adds	r1, r3, #4
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	9103      	str	r1, [sp, #12]
 8009020:	2b00      	cmp	r3, #0
 8009022:	bfbb      	ittet	lt
 8009024:	425b      	neglt	r3, r3
 8009026:	f042 0202 	orrlt.w	r2, r2, #2
 800902a:	9307      	strge	r3, [sp, #28]
 800902c:	9307      	strlt	r3, [sp, #28]
 800902e:	bfb8      	it	lt
 8009030:	9204      	strlt	r2, [sp, #16]
 8009032:	7823      	ldrb	r3, [r4, #0]
 8009034:	2b2e      	cmp	r3, #46	; 0x2e
 8009036:	d10c      	bne.n	8009052 <_vfiprintf_r+0x15a>
 8009038:	7863      	ldrb	r3, [r4, #1]
 800903a:	2b2a      	cmp	r3, #42	; 0x2a
 800903c:	d134      	bne.n	80090a8 <_vfiprintf_r+0x1b0>
 800903e:	9b03      	ldr	r3, [sp, #12]
 8009040:	1d1a      	adds	r2, r3, #4
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	9203      	str	r2, [sp, #12]
 8009046:	2b00      	cmp	r3, #0
 8009048:	bfb8      	it	lt
 800904a:	f04f 33ff 	movlt.w	r3, #4294967295
 800904e:	3402      	adds	r4, #2
 8009050:	9305      	str	r3, [sp, #20]
 8009052:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009128 <_vfiprintf_r+0x230>
 8009056:	7821      	ldrb	r1, [r4, #0]
 8009058:	2203      	movs	r2, #3
 800905a:	4650      	mov	r0, sl
 800905c:	f7f7 f8b8 	bl	80001d0 <memchr>
 8009060:	b138      	cbz	r0, 8009072 <_vfiprintf_r+0x17a>
 8009062:	9b04      	ldr	r3, [sp, #16]
 8009064:	eba0 000a 	sub.w	r0, r0, sl
 8009068:	2240      	movs	r2, #64	; 0x40
 800906a:	4082      	lsls	r2, r0
 800906c:	4313      	orrs	r3, r2
 800906e:	3401      	adds	r4, #1
 8009070:	9304      	str	r3, [sp, #16]
 8009072:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009076:	4829      	ldr	r0, [pc, #164]	; (800911c <_vfiprintf_r+0x224>)
 8009078:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800907c:	2206      	movs	r2, #6
 800907e:	f7f7 f8a7 	bl	80001d0 <memchr>
 8009082:	2800      	cmp	r0, #0
 8009084:	d03f      	beq.n	8009106 <_vfiprintf_r+0x20e>
 8009086:	4b26      	ldr	r3, [pc, #152]	; (8009120 <_vfiprintf_r+0x228>)
 8009088:	bb1b      	cbnz	r3, 80090d2 <_vfiprintf_r+0x1da>
 800908a:	9b03      	ldr	r3, [sp, #12]
 800908c:	3307      	adds	r3, #7
 800908e:	f023 0307 	bic.w	r3, r3, #7
 8009092:	3308      	adds	r3, #8
 8009094:	9303      	str	r3, [sp, #12]
 8009096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009098:	443b      	add	r3, r7
 800909a:	9309      	str	r3, [sp, #36]	; 0x24
 800909c:	e768      	b.n	8008f70 <_vfiprintf_r+0x78>
 800909e:	fb0c 3202 	mla	r2, ip, r2, r3
 80090a2:	460c      	mov	r4, r1
 80090a4:	2001      	movs	r0, #1
 80090a6:	e7a6      	b.n	8008ff6 <_vfiprintf_r+0xfe>
 80090a8:	2300      	movs	r3, #0
 80090aa:	3401      	adds	r4, #1
 80090ac:	9305      	str	r3, [sp, #20]
 80090ae:	4619      	mov	r1, r3
 80090b0:	f04f 0c0a 	mov.w	ip, #10
 80090b4:	4620      	mov	r0, r4
 80090b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090ba:	3a30      	subs	r2, #48	; 0x30
 80090bc:	2a09      	cmp	r2, #9
 80090be:	d903      	bls.n	80090c8 <_vfiprintf_r+0x1d0>
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d0c6      	beq.n	8009052 <_vfiprintf_r+0x15a>
 80090c4:	9105      	str	r1, [sp, #20]
 80090c6:	e7c4      	b.n	8009052 <_vfiprintf_r+0x15a>
 80090c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80090cc:	4604      	mov	r4, r0
 80090ce:	2301      	movs	r3, #1
 80090d0:	e7f0      	b.n	80090b4 <_vfiprintf_r+0x1bc>
 80090d2:	ab03      	add	r3, sp, #12
 80090d4:	9300      	str	r3, [sp, #0]
 80090d6:	462a      	mov	r2, r5
 80090d8:	4b12      	ldr	r3, [pc, #72]	; (8009124 <_vfiprintf_r+0x22c>)
 80090da:	a904      	add	r1, sp, #16
 80090dc:	4630      	mov	r0, r6
 80090de:	f7fb fe4b 	bl	8004d78 <_printf_float>
 80090e2:	4607      	mov	r7, r0
 80090e4:	1c78      	adds	r0, r7, #1
 80090e6:	d1d6      	bne.n	8009096 <_vfiprintf_r+0x19e>
 80090e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090ea:	07d9      	lsls	r1, r3, #31
 80090ec:	d405      	bmi.n	80090fa <_vfiprintf_r+0x202>
 80090ee:	89ab      	ldrh	r3, [r5, #12]
 80090f0:	059a      	lsls	r2, r3, #22
 80090f2:	d402      	bmi.n	80090fa <_vfiprintf_r+0x202>
 80090f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090f6:	f7fc fdb9 	bl	8005c6c <__retarget_lock_release_recursive>
 80090fa:	89ab      	ldrh	r3, [r5, #12]
 80090fc:	065b      	lsls	r3, r3, #25
 80090fe:	f53f af1d 	bmi.w	8008f3c <_vfiprintf_r+0x44>
 8009102:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009104:	e71c      	b.n	8008f40 <_vfiprintf_r+0x48>
 8009106:	ab03      	add	r3, sp, #12
 8009108:	9300      	str	r3, [sp, #0]
 800910a:	462a      	mov	r2, r5
 800910c:	4b05      	ldr	r3, [pc, #20]	; (8009124 <_vfiprintf_r+0x22c>)
 800910e:	a904      	add	r1, sp, #16
 8009110:	4630      	mov	r0, r6
 8009112:	f7fc f8d5 	bl	80052c0 <_printf_i>
 8009116:	e7e4      	b.n	80090e2 <_vfiprintf_r+0x1ea>
 8009118:	08009821 	.word	0x08009821
 800911c:	0800982b 	.word	0x0800982b
 8009120:	08004d79 	.word	0x08004d79
 8009124:	08008ed5 	.word	0x08008ed5
 8009128:	08009827 	.word	0x08009827

0800912c <__swbuf_r>:
 800912c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800912e:	460e      	mov	r6, r1
 8009130:	4614      	mov	r4, r2
 8009132:	4605      	mov	r5, r0
 8009134:	b118      	cbz	r0, 800913e <__swbuf_r+0x12>
 8009136:	6a03      	ldr	r3, [r0, #32]
 8009138:	b90b      	cbnz	r3, 800913e <__swbuf_r+0x12>
 800913a:	f7fc fc7f 	bl	8005a3c <__sinit>
 800913e:	69a3      	ldr	r3, [r4, #24]
 8009140:	60a3      	str	r3, [r4, #8]
 8009142:	89a3      	ldrh	r3, [r4, #12]
 8009144:	071a      	lsls	r2, r3, #28
 8009146:	d525      	bpl.n	8009194 <__swbuf_r+0x68>
 8009148:	6923      	ldr	r3, [r4, #16]
 800914a:	b31b      	cbz	r3, 8009194 <__swbuf_r+0x68>
 800914c:	6823      	ldr	r3, [r4, #0]
 800914e:	6922      	ldr	r2, [r4, #16]
 8009150:	1a98      	subs	r0, r3, r2
 8009152:	6963      	ldr	r3, [r4, #20]
 8009154:	b2f6      	uxtb	r6, r6
 8009156:	4283      	cmp	r3, r0
 8009158:	4637      	mov	r7, r6
 800915a:	dc04      	bgt.n	8009166 <__swbuf_r+0x3a>
 800915c:	4621      	mov	r1, r4
 800915e:	4628      	mov	r0, r5
 8009160:	f7ff fa2a 	bl	80085b8 <_fflush_r>
 8009164:	b9e0      	cbnz	r0, 80091a0 <__swbuf_r+0x74>
 8009166:	68a3      	ldr	r3, [r4, #8]
 8009168:	3b01      	subs	r3, #1
 800916a:	60a3      	str	r3, [r4, #8]
 800916c:	6823      	ldr	r3, [r4, #0]
 800916e:	1c5a      	adds	r2, r3, #1
 8009170:	6022      	str	r2, [r4, #0]
 8009172:	701e      	strb	r6, [r3, #0]
 8009174:	6962      	ldr	r2, [r4, #20]
 8009176:	1c43      	adds	r3, r0, #1
 8009178:	429a      	cmp	r2, r3
 800917a:	d004      	beq.n	8009186 <__swbuf_r+0x5a>
 800917c:	89a3      	ldrh	r3, [r4, #12]
 800917e:	07db      	lsls	r3, r3, #31
 8009180:	d506      	bpl.n	8009190 <__swbuf_r+0x64>
 8009182:	2e0a      	cmp	r6, #10
 8009184:	d104      	bne.n	8009190 <__swbuf_r+0x64>
 8009186:	4621      	mov	r1, r4
 8009188:	4628      	mov	r0, r5
 800918a:	f7ff fa15 	bl	80085b8 <_fflush_r>
 800918e:	b938      	cbnz	r0, 80091a0 <__swbuf_r+0x74>
 8009190:	4638      	mov	r0, r7
 8009192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009194:	4621      	mov	r1, r4
 8009196:	4628      	mov	r0, r5
 8009198:	f000 f806 	bl	80091a8 <__swsetup_r>
 800919c:	2800      	cmp	r0, #0
 800919e:	d0d5      	beq.n	800914c <__swbuf_r+0x20>
 80091a0:	f04f 37ff 	mov.w	r7, #4294967295
 80091a4:	e7f4      	b.n	8009190 <__swbuf_r+0x64>
	...

080091a8 <__swsetup_r>:
 80091a8:	b538      	push	{r3, r4, r5, lr}
 80091aa:	4b2a      	ldr	r3, [pc, #168]	; (8009254 <__swsetup_r+0xac>)
 80091ac:	4605      	mov	r5, r0
 80091ae:	6818      	ldr	r0, [r3, #0]
 80091b0:	460c      	mov	r4, r1
 80091b2:	b118      	cbz	r0, 80091bc <__swsetup_r+0x14>
 80091b4:	6a03      	ldr	r3, [r0, #32]
 80091b6:	b90b      	cbnz	r3, 80091bc <__swsetup_r+0x14>
 80091b8:	f7fc fc40 	bl	8005a3c <__sinit>
 80091bc:	89a3      	ldrh	r3, [r4, #12]
 80091be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091c2:	0718      	lsls	r0, r3, #28
 80091c4:	d422      	bmi.n	800920c <__swsetup_r+0x64>
 80091c6:	06d9      	lsls	r1, r3, #27
 80091c8:	d407      	bmi.n	80091da <__swsetup_r+0x32>
 80091ca:	2309      	movs	r3, #9
 80091cc:	602b      	str	r3, [r5, #0]
 80091ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80091d2:	81a3      	strh	r3, [r4, #12]
 80091d4:	f04f 30ff 	mov.w	r0, #4294967295
 80091d8:	e034      	b.n	8009244 <__swsetup_r+0x9c>
 80091da:	0758      	lsls	r0, r3, #29
 80091dc:	d512      	bpl.n	8009204 <__swsetup_r+0x5c>
 80091de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091e0:	b141      	cbz	r1, 80091f4 <__swsetup_r+0x4c>
 80091e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091e6:	4299      	cmp	r1, r3
 80091e8:	d002      	beq.n	80091f0 <__swsetup_r+0x48>
 80091ea:	4628      	mov	r0, r5
 80091ec:	f7fd fbc2 	bl	8006974 <_free_r>
 80091f0:	2300      	movs	r3, #0
 80091f2:	6363      	str	r3, [r4, #52]	; 0x34
 80091f4:	89a3      	ldrh	r3, [r4, #12]
 80091f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80091fa:	81a3      	strh	r3, [r4, #12]
 80091fc:	2300      	movs	r3, #0
 80091fe:	6063      	str	r3, [r4, #4]
 8009200:	6923      	ldr	r3, [r4, #16]
 8009202:	6023      	str	r3, [r4, #0]
 8009204:	89a3      	ldrh	r3, [r4, #12]
 8009206:	f043 0308 	orr.w	r3, r3, #8
 800920a:	81a3      	strh	r3, [r4, #12]
 800920c:	6923      	ldr	r3, [r4, #16]
 800920e:	b94b      	cbnz	r3, 8009224 <__swsetup_r+0x7c>
 8009210:	89a3      	ldrh	r3, [r4, #12]
 8009212:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009216:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800921a:	d003      	beq.n	8009224 <__swsetup_r+0x7c>
 800921c:	4621      	mov	r1, r4
 800921e:	4628      	mov	r0, r5
 8009220:	f000 f884 	bl	800932c <__smakebuf_r>
 8009224:	89a0      	ldrh	r0, [r4, #12]
 8009226:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800922a:	f010 0301 	ands.w	r3, r0, #1
 800922e:	d00a      	beq.n	8009246 <__swsetup_r+0x9e>
 8009230:	2300      	movs	r3, #0
 8009232:	60a3      	str	r3, [r4, #8]
 8009234:	6963      	ldr	r3, [r4, #20]
 8009236:	425b      	negs	r3, r3
 8009238:	61a3      	str	r3, [r4, #24]
 800923a:	6923      	ldr	r3, [r4, #16]
 800923c:	b943      	cbnz	r3, 8009250 <__swsetup_r+0xa8>
 800923e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009242:	d1c4      	bne.n	80091ce <__swsetup_r+0x26>
 8009244:	bd38      	pop	{r3, r4, r5, pc}
 8009246:	0781      	lsls	r1, r0, #30
 8009248:	bf58      	it	pl
 800924a:	6963      	ldrpl	r3, [r4, #20]
 800924c:	60a3      	str	r3, [r4, #8]
 800924e:	e7f4      	b.n	800923a <__swsetup_r+0x92>
 8009250:	2000      	movs	r0, #0
 8009252:	e7f7      	b.n	8009244 <__swsetup_r+0x9c>
 8009254:	20000064 	.word	0x20000064

08009258 <_raise_r>:
 8009258:	291f      	cmp	r1, #31
 800925a:	b538      	push	{r3, r4, r5, lr}
 800925c:	4604      	mov	r4, r0
 800925e:	460d      	mov	r5, r1
 8009260:	d904      	bls.n	800926c <_raise_r+0x14>
 8009262:	2316      	movs	r3, #22
 8009264:	6003      	str	r3, [r0, #0]
 8009266:	f04f 30ff 	mov.w	r0, #4294967295
 800926a:	bd38      	pop	{r3, r4, r5, pc}
 800926c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800926e:	b112      	cbz	r2, 8009276 <_raise_r+0x1e>
 8009270:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009274:	b94b      	cbnz	r3, 800928a <_raise_r+0x32>
 8009276:	4620      	mov	r0, r4
 8009278:	f000 f830 	bl	80092dc <_getpid_r>
 800927c:	462a      	mov	r2, r5
 800927e:	4601      	mov	r1, r0
 8009280:	4620      	mov	r0, r4
 8009282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009286:	f000 b817 	b.w	80092b8 <_kill_r>
 800928a:	2b01      	cmp	r3, #1
 800928c:	d00a      	beq.n	80092a4 <_raise_r+0x4c>
 800928e:	1c59      	adds	r1, r3, #1
 8009290:	d103      	bne.n	800929a <_raise_r+0x42>
 8009292:	2316      	movs	r3, #22
 8009294:	6003      	str	r3, [r0, #0]
 8009296:	2001      	movs	r0, #1
 8009298:	e7e7      	b.n	800926a <_raise_r+0x12>
 800929a:	2400      	movs	r4, #0
 800929c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80092a0:	4628      	mov	r0, r5
 80092a2:	4798      	blx	r3
 80092a4:	2000      	movs	r0, #0
 80092a6:	e7e0      	b.n	800926a <_raise_r+0x12>

080092a8 <raise>:
 80092a8:	4b02      	ldr	r3, [pc, #8]	; (80092b4 <raise+0xc>)
 80092aa:	4601      	mov	r1, r0
 80092ac:	6818      	ldr	r0, [r3, #0]
 80092ae:	f7ff bfd3 	b.w	8009258 <_raise_r>
 80092b2:	bf00      	nop
 80092b4:	20000064 	.word	0x20000064

080092b8 <_kill_r>:
 80092b8:	b538      	push	{r3, r4, r5, lr}
 80092ba:	4d07      	ldr	r5, [pc, #28]	; (80092d8 <_kill_r+0x20>)
 80092bc:	2300      	movs	r3, #0
 80092be:	4604      	mov	r4, r0
 80092c0:	4608      	mov	r0, r1
 80092c2:	4611      	mov	r1, r2
 80092c4:	602b      	str	r3, [r5, #0]
 80092c6:	f7f8 fc75 	bl	8001bb4 <_kill>
 80092ca:	1c43      	adds	r3, r0, #1
 80092cc:	d102      	bne.n	80092d4 <_kill_r+0x1c>
 80092ce:	682b      	ldr	r3, [r5, #0]
 80092d0:	b103      	cbz	r3, 80092d4 <_kill_r+0x1c>
 80092d2:	6023      	str	r3, [r4, #0]
 80092d4:	bd38      	pop	{r3, r4, r5, pc}
 80092d6:	bf00      	nop
 80092d8:	20000564 	.word	0x20000564

080092dc <_getpid_r>:
 80092dc:	f7f8 bc62 	b.w	8001ba4 <_getpid>

080092e0 <__swhatbuf_r>:
 80092e0:	b570      	push	{r4, r5, r6, lr}
 80092e2:	460c      	mov	r4, r1
 80092e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092e8:	2900      	cmp	r1, #0
 80092ea:	b096      	sub	sp, #88	; 0x58
 80092ec:	4615      	mov	r5, r2
 80092ee:	461e      	mov	r6, r3
 80092f0:	da0d      	bge.n	800930e <__swhatbuf_r+0x2e>
 80092f2:	89a3      	ldrh	r3, [r4, #12]
 80092f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80092f8:	f04f 0100 	mov.w	r1, #0
 80092fc:	bf0c      	ite	eq
 80092fe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009302:	2340      	movne	r3, #64	; 0x40
 8009304:	2000      	movs	r0, #0
 8009306:	6031      	str	r1, [r6, #0]
 8009308:	602b      	str	r3, [r5, #0]
 800930a:	b016      	add	sp, #88	; 0x58
 800930c:	bd70      	pop	{r4, r5, r6, pc}
 800930e:	466a      	mov	r2, sp
 8009310:	f000 f848 	bl	80093a4 <_fstat_r>
 8009314:	2800      	cmp	r0, #0
 8009316:	dbec      	blt.n	80092f2 <__swhatbuf_r+0x12>
 8009318:	9901      	ldr	r1, [sp, #4]
 800931a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800931e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009322:	4259      	negs	r1, r3
 8009324:	4159      	adcs	r1, r3
 8009326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800932a:	e7eb      	b.n	8009304 <__swhatbuf_r+0x24>

0800932c <__smakebuf_r>:
 800932c:	898b      	ldrh	r3, [r1, #12]
 800932e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009330:	079d      	lsls	r5, r3, #30
 8009332:	4606      	mov	r6, r0
 8009334:	460c      	mov	r4, r1
 8009336:	d507      	bpl.n	8009348 <__smakebuf_r+0x1c>
 8009338:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800933c:	6023      	str	r3, [r4, #0]
 800933e:	6123      	str	r3, [r4, #16]
 8009340:	2301      	movs	r3, #1
 8009342:	6163      	str	r3, [r4, #20]
 8009344:	b002      	add	sp, #8
 8009346:	bd70      	pop	{r4, r5, r6, pc}
 8009348:	ab01      	add	r3, sp, #4
 800934a:	466a      	mov	r2, sp
 800934c:	f7ff ffc8 	bl	80092e0 <__swhatbuf_r>
 8009350:	9900      	ldr	r1, [sp, #0]
 8009352:	4605      	mov	r5, r0
 8009354:	4630      	mov	r0, r6
 8009356:	f7fd fb81 	bl	8006a5c <_malloc_r>
 800935a:	b948      	cbnz	r0, 8009370 <__smakebuf_r+0x44>
 800935c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009360:	059a      	lsls	r2, r3, #22
 8009362:	d4ef      	bmi.n	8009344 <__smakebuf_r+0x18>
 8009364:	f023 0303 	bic.w	r3, r3, #3
 8009368:	f043 0302 	orr.w	r3, r3, #2
 800936c:	81a3      	strh	r3, [r4, #12]
 800936e:	e7e3      	b.n	8009338 <__smakebuf_r+0xc>
 8009370:	89a3      	ldrh	r3, [r4, #12]
 8009372:	6020      	str	r0, [r4, #0]
 8009374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009378:	81a3      	strh	r3, [r4, #12]
 800937a:	9b00      	ldr	r3, [sp, #0]
 800937c:	6163      	str	r3, [r4, #20]
 800937e:	9b01      	ldr	r3, [sp, #4]
 8009380:	6120      	str	r0, [r4, #16]
 8009382:	b15b      	cbz	r3, 800939c <__smakebuf_r+0x70>
 8009384:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009388:	4630      	mov	r0, r6
 800938a:	f000 f81d 	bl	80093c8 <_isatty_r>
 800938e:	b128      	cbz	r0, 800939c <__smakebuf_r+0x70>
 8009390:	89a3      	ldrh	r3, [r4, #12]
 8009392:	f023 0303 	bic.w	r3, r3, #3
 8009396:	f043 0301 	orr.w	r3, r3, #1
 800939a:	81a3      	strh	r3, [r4, #12]
 800939c:	89a3      	ldrh	r3, [r4, #12]
 800939e:	431d      	orrs	r5, r3
 80093a0:	81a5      	strh	r5, [r4, #12]
 80093a2:	e7cf      	b.n	8009344 <__smakebuf_r+0x18>

080093a4 <_fstat_r>:
 80093a4:	b538      	push	{r3, r4, r5, lr}
 80093a6:	4d07      	ldr	r5, [pc, #28]	; (80093c4 <_fstat_r+0x20>)
 80093a8:	2300      	movs	r3, #0
 80093aa:	4604      	mov	r4, r0
 80093ac:	4608      	mov	r0, r1
 80093ae:	4611      	mov	r1, r2
 80093b0:	602b      	str	r3, [r5, #0]
 80093b2:	f7f8 fc5e 	bl	8001c72 <_fstat>
 80093b6:	1c43      	adds	r3, r0, #1
 80093b8:	d102      	bne.n	80093c0 <_fstat_r+0x1c>
 80093ba:	682b      	ldr	r3, [r5, #0]
 80093bc:	b103      	cbz	r3, 80093c0 <_fstat_r+0x1c>
 80093be:	6023      	str	r3, [r4, #0]
 80093c0:	bd38      	pop	{r3, r4, r5, pc}
 80093c2:	bf00      	nop
 80093c4:	20000564 	.word	0x20000564

080093c8 <_isatty_r>:
 80093c8:	b538      	push	{r3, r4, r5, lr}
 80093ca:	4d06      	ldr	r5, [pc, #24]	; (80093e4 <_isatty_r+0x1c>)
 80093cc:	2300      	movs	r3, #0
 80093ce:	4604      	mov	r4, r0
 80093d0:	4608      	mov	r0, r1
 80093d2:	602b      	str	r3, [r5, #0]
 80093d4:	f7f8 fc5d 	bl	8001c92 <_isatty>
 80093d8:	1c43      	adds	r3, r0, #1
 80093da:	d102      	bne.n	80093e2 <_isatty_r+0x1a>
 80093dc:	682b      	ldr	r3, [r5, #0]
 80093de:	b103      	cbz	r3, 80093e2 <_isatty_r+0x1a>
 80093e0:	6023      	str	r3, [r4, #0]
 80093e2:	bd38      	pop	{r3, r4, r5, pc}
 80093e4:	20000564 	.word	0x20000564

080093e8 <_init>:
 80093e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ea:	bf00      	nop
 80093ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ee:	bc08      	pop	{r3}
 80093f0:	469e      	mov	lr, r3
 80093f2:	4770      	bx	lr

080093f4 <_fini>:
 80093f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093f6:	bf00      	nop
 80093f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093fa:	bc08      	pop	{r3}
 80093fc:	469e      	mov	lr, r3
 80093fe:	4770      	bx	lr
